{
	"compiler": {
		"version": "0.8.8+commit.dddeac2f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "_proposalId",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bool[]",
						"name": "_callsSucessResult",
						"type": "bool[]"
					},
					{
						"indexed": false,
						"internalType": "bytes[]",
						"name": "_callsDataResult",
						"type": "bytes[]"
					}
				],
				"name": "ExecutionResults",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "_proposalId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_state",
						"type": "uint256"
					}
				],
				"name": "ProposalStateChange",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isWhitelisted",
						"type": "bool"
					}
				],
				"name": "ReputationModify_UnWhitelisted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isWhitelisted",
						"type": "bool"
					}
				],
				"name": "ReputationModify_Whitelisted",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "ANY_ADDRESS",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ANY_SIGNATURE",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ERC20_APPROVE_SIGNATURE",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ERC20_TRANSFER_SIGNATURE",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "SCHEME_TYPE",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "SET_MAX_SECONDS_FOR_EXECUTION_SIGNATURE",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "addWorksystemAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "avatar",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_stakingToken",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "balanceOfStakingToken",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_beneficiary",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "burnReputation",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_beneficiary",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "burnReputationForWork",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "controller",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "doAvatarGenericCalls",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "erc20TransferOrApproveDecode",
				"outputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_proposalId",
						"type": "bytes32"
					},
					{
						"internalType": "int256",
						"name": "_decision",
						"type": "int256"
					}
				],
				"name": "executeProposal",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "getFuncSignature",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNativeReputation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNativeReputationTotalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "proposalId",
						"type": "bytes32"
					}
				],
				"name": "getOrganizationProposal",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "to",
						"type": "address[]"
					},
					{
						"internalType": "bytes[]",
						"name": "callData",
						"type": "bytes[]"
					},
					{
						"internalType": "uint256[]",
						"name": "value",
						"type": "uint256[]"
					},
					{
						"internalType": "enum WalletScheme.ProposalState",
						"name": "state",
						"type": "uint8"
					},
					{
						"internalType": "string",
						"name": "title",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "descriptionHash",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "submittedTime",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "proposalIndex",
						"type": "uint256"
					}
				],
				"name": "getOrganizationProposalByIndex",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "to",
						"type": "address[]"
					},
					{
						"internalType": "bytes[]",
						"name": "callData",
						"type": "bytes[]"
					},
					{
						"internalType": "uint256[]",
						"name": "value",
						"type": "uint256[]"
					},
					{
						"internalType": "enum WalletScheme.ProposalState",
						"name": "state",
						"type": "uint8"
					},
					{
						"internalType": "string",
						"name": "title",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "descriptionHash",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "submittedTime",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOrganizationProposals",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOrganizationProposalsLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_proposalId",
						"type": "bytes32"
					}
				],
				"name": "getTotalReputationSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_avatar",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_votingMachine",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_doAvatarGenericCalls",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "_controller",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_permissionRegistry",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_schemeName",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_maxSecondsForExecution",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxRepPercentageChange",
						"type": "uint256"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "isRegisteredWorksystem",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxRepPercentageChange",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxSecondsForExecution",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_beneficiary",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "mintReputation",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_beneficiary",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "mintReputationForWork",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "permissionRegistry",
				"outputs": [
					{
						"internalType": "contract PermissionRegistry",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "proposals",
				"outputs": [
					{
						"internalType": "enum WalletScheme.ProposalState",
						"name": "state",
						"type": "uint8"
					},
					{
						"internalType": "string",
						"name": "title",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "descriptionHash",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "submittedTime",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "proposalsBlockNumber",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "proposalsList",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_to",
						"type": "address[]"
					},
					{
						"internalType": "bytes[]",
						"name": "_callData",
						"type": "bytes[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_value",
						"type": "uint256[]"
					},
					{
						"internalType": "string",
						"name": "_title",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_descriptionHash",
						"type": "string"
					}
				],
				"name": "proposeCalls",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "removeWorksystemAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_proposalId",
						"type": "bytes32"
					}
				],
				"name": "reputationOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "schemeName",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_maxSecondsForExecution",
						"type": "uint256"
					}
				],
				"name": "setMaxSecondsForExecution",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_stakingToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_beneficiary",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "stakingTokenTransfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votingMachine",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "A scheme for proposing and executing calls to any contract except itself It has a value call controller address, in case of the controller address ot be set the scheme will be doing generic calls to the dao controller. If the controller address is not set it will e executing raw calls form the scheme itself. The scheme can only execute calls allowed to in the permission registry, if the controller address is set the permissions will be checked using the avatar address as sender, if not the scheme address will be used as sender. The permissions for [asset][SCHEME_ADDRESS][ANY_SIGNATURE] are used for global transfer limit, if it is set, it wont allowed a higher total value transferred in the proposal higher to the one set there.",
			"kind": "dev",
			"methods": {
				"erc20TransferOrApproveDecode(bytes)": {
					"details": "Decodes abi encoded data with selector for \"transfer(address,uint256)\".",
					"params": {
						"_data": "ERC20 address and value encoded data."
					},
					"returns": {
						"to": "The account to receive the tokens",
						"value": "The value of tokens to be transferred/approved"
					}
				},
				"executeProposal(bytes32,int256)": {
					"details": "execution of proposals, can only be called by the voting machine in which the vote is held. REQUIRE FROM \"../daostack/votingMachines/ProposalExecuteInterface.sol\" DONT REMOVE",
					"params": {
						"_decision": "a parameter of the voting result, 1 yes and 2 is no.",
						"_proposalId": "the ID of the voting in the voting machine"
					},
					"returns": {
						"_0": "bool success"
					}
				},
				"getFuncSignature(bytes)": {
					"details": "Get call data signature",
					"params": {
						"data": "The bytes data of the data to get the signature"
					}
				},
				"getOrganizationProposal(bytes32)": {
					"details": "Get the information of a proposal by id",
					"params": {
						"proposalId": "the ID of the proposal"
					}
				},
				"getOrganizationProposalByIndex(uint256)": {
					"details": "Get the information of a proposal by index",
					"params": {
						"proposalIndex": "the index of the proposal in the proposals list"
					}
				},
				"getOrganizationProposals()": {
					"details": "Get the proposals ids"
				},
				"getOrganizationProposalsLength()": {
					"details": "Get the proposals length"
				},
				"initialize(address,address,bool,address,address,string,uint256,uint256)": {
					"details": "initialize",
					"params": {
						"_avatar": "the avatar address",
						"_controller": "The controller address",
						"_doAvatarGenericCalls": "will the scheme do generic calls from the avatar",
						"_maxRepPercentageChange": "The maximum percentage allowed to be changed in REP total supply after proposal execution",
						"_maxSecondsForExecution": "The maximum amount of time in seconds for a proposal without executed since submitted time",
						"_permissionRegistry": "The address of the permission registry contract",
						"_votingMachine": "the voting machine address"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"proposeCalls(address[],bytes[],uint256[],string,string)": {
					"details": "Propose calls to be executed, the calls have to be allowed by the permission registry",
					"params": {
						"_callData": "- The abi encode data for the calls",
						"_descriptionHash": "proposal description hash",
						"_title": "title of proposal",
						"_to": "- The addresses to call",
						"_value": "value(ETH) to transfer with the calls"
					},
					"returns": {
						"_0": "an id which represents the proposal"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setMaxSecondsForExecution(uint256)": {
					"details": "Set the max amount of seconds that a proposal has to be executed, only callable from the avatar address",
					"params": {
						"_maxSecondsForExecution": "New max proposal time in seconds to be used"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "WalletScheme.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"control/WalletScheme.sol": "WalletScheme"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888",
			"license": "MIT",
			"urls": [
				"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a",
				"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27",
			"license": "MIT",
			"urls": [
				"bzz-raw://899f850f7df5a270bccfb765d70069959ca1c20d3a7381c1c3bda8a3ffee1935",
				"dweb:/ipfs/QmVdnAqwyX2L3nX2HDA5WKGtVBFyH1nKE9A1k7fZnPBkhP"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
			"keccak256": "0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183",
			"license": "MIT",
			"urls": [
				"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06",
				"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
			"license": "MIT",
			"urls": [
				"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
				"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
			"keccak256": "0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49",
			"license": "MIT",
			"urls": [
				"bzz-raw://9ba2a8d7cd7bdbd42a5c525103da0cd2d190a3f702b7e796bada67f6c613622e",
				"dweb:/ipfs/QmfZSHW9FxVdWwRAQ171dkhumCPEGfAFMXHPeipPc4M2ag"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
			"license": "MIT",
			"urls": [
				"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
				"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
				"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
				"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e",
			"license": "MIT",
			"urls": [
				"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65",
				"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN"
			]
		},
		"control/WalletScheme.sol": {
			"keccak256": "0x79e3aaf3085b06fd65511145abdb1a5f765c31be039f53aacd2318cc91766afb",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://ab0ecf7273b8f3df152baea56d74a61dbcc8598465acff944b4c3fbcb20ac265",
				"dweb:/ipfs/QmWKtkakN5pUC6xjE9yPM1Nrp6Ek2MTgzW2asMdYBb79kJ"
			]
		},
		"utils/PermissionRegistry.sol": {
			"keccak256": "0x9e9dd8900d3b718dd0433b38805041358cf0a053a10ba46f8613cfab80faec80",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://75d8faa93d901ac80672cb7cbfe673a85d2d234fe716a3bb3eff679102d09031",
				"dweb:/ipfs/QmbQFXGbyvKuUeDtkQ1xiM7ZmsHLiP5SgAoiQeecpD3hqk"
			]
		}
	},
	"version": 1
}