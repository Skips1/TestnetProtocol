{
	"compiler": {
		"version": "0.8.8+commit.dddeac2f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_orgName",
						"type": "string"
					},
					{
						"internalType": "contract DAOToken",
						"name": "_nativeToken",
						"type": "address"
					},
					{
						"internalType": "contract Reputation",
						"name": "_nativeReputation",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_externalToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "ExternalTokenApproval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_externalToken",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "ExternalTokenTransfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_externalToken",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "ExternalTokenTransferFrom",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_contract",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "_success",
						"type": "bool"
					}
				],
				"name": "GenericCall",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "_metaData",
						"type": "string"
					}
				],
				"name": "MetaData",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "ReceiveEther",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amountInWei",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_to",
						"type": "address"
					}
				],
				"name": "SendEther",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_externalToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "externalTokenApproval",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_externalToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "externalTokenTransfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_externalToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "externalTokenTransferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_contract",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "genericCall",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "returnValue",
						"type": "bytes"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_metaData",
						"type": "string"
					}
				],
				"name": "metaData",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nativeReputation",
				"outputs": [
					{
						"internalType": "contract Reputation",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nativeToken",
				"outputs": [
					{
						"internalType": "contract DAOToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "orgName",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amountInWei",
						"type": "uint256"
					},
					{
						"internalType": "address payable",
						"name": "_to",
						"type": "address"
					}
				],
				"name": "sendEther",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "the constructor takes organization name, native token and reputation system and creates an avatar for a controller"
				},
				"externalTokenApproval(address,address,uint256)": {
					"details": "externalTokenApproval approve the spender address to spend a specified amount of tokens      on behalf of msg.sender.",
					"params": {
						"_externalToken": "the address of the Token Contract",
						"_spender": "address",
						"_value": "the amount of ether (in Wei) which the approval is referring to."
					},
					"returns": {
						"_0": "bool which represents a success"
					}
				},
				"externalTokenTransfer(address,address,uint256)": {
					"details": "external token transfer",
					"params": {
						"_externalToken": "the token contract",
						"_to": "the destination address",
						"_value": "the amount of tokens to transfer"
					},
					"returns": {
						"_0": "bool which represents success"
					}
				},
				"externalTokenTransferFrom(address,address,address,uint256)": {
					"details": "external token transfer from a specific account",
					"params": {
						"_externalToken": "the token contract",
						"_from": "the account to spend token from",
						"_to": "the destination address",
						"_value": "the amount of tokens to transfer"
					},
					"returns": {
						"_0": "bool which represents success"
					}
				},
				"genericCall(address,bytes,uint256)": {
					"details": "perform a generic call to an arbitrary contract",
					"params": {
						"_contract": "the contract's address to call",
						"_data": "ABI-encoded contract call to call `_contract` address.",
						"_value": "value (ETH) to transfer with the transaction"
					},
					"returns": {
						"returnValue": "- the return bytes of the called contract's function.",
						"success": "   success or fail"
					}
				},
				"metaData(string)": {
					"details": "metaData emits an event with a string, should contain the hash of some meta data.",
					"params": {
						"_metaData": "a string representing a hash of the meta data"
					},
					"returns": {
						"_0": "bool which represents a success"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"sendEther(uint256,address)": {
					"details": "send ethers from the avatar's wallet",
					"params": {
						"_amountInWei": "amount to send in Wei units",
						"_to": "send the ethers to this address"
					},
					"returns": {
						"_0": "bool which represents success"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "An Avatar holds tokens, reputation and ether for a controller",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"daostack/controller/Avatar.sol": "Avatar"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
			"license": "MIT",
			"urls": [
				"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
				"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d",
			"license": "MIT",
			"urls": [
				"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d",
				"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
				"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol": {
			"keccak256": "0x3fe04ed1daf0f12454333fde982a25b103860d8a010dd5d8479b83ebf1dfb788",
			"license": "MIT",
			"urls": [
				"bzz-raw://8322152771e94c9e28a3bd9e7c9d5dd4fdd00ae214f95915962a6638d8dfc7d6",
				"dweb:/ipfs/QmaXJvF3UjRHacx3nPgt94DwAuXCkEoz6fS7MLr2jbuJyW"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
				"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
			"keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
			"license": "MIT",
			"urls": [
				"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
				"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6",
				"dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
				"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"daostack/controller/Avatar.sol": {
			"keccak256": "0xb120a01aee4e23a11ee03680a6b17776b50f7fe91a00d98c7168e9994dbe1354",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://9d47a72e669996c5245504c27dfd2659d9fcf8344ef2973a77fdf25963defaea",
				"dweb:/ipfs/QmUSjnwSeCdv96PUzn66m8HoQF1fWuffv5kxPyjUs8JgzX"
			]
		},
		"daostack/controller/DAOToken.sol": {
			"keccak256": "0xb1d50c18dab88520d6f4f6ded7e8ceaeb12c622fcad0248dcdc6d398c0b67d7d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://59a4c262dab9aabcad1a058a53689a086edff1397a8d58499eed8d5ff0d9e379",
				"dweb:/ipfs/QmPhpgLp8tL7zeHuLT4KiT9PzD71E8jeSw4P6sccuTfmZs"
			]
		},
		"daostack/controller/Reputation.sol": {
			"keccak256": "0xa787c21722b2f41d420d709bf43042f8dd32dc276d1c980cdf053d2e2e808b20",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://83c08a980366cf9c1b7e137689a37d82cb3aa384522705a805555c89bf810c33",
				"dweb:/ipfs/QmbR9gRGj67R1AuJWiQABHuPXgRsF4T9qG5oPD31pFnQZf"
			]
		}
	},
	"version": 1
}