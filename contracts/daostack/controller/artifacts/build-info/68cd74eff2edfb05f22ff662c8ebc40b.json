{
	"id": "68cd74eff2edfb05f22ff662c8ebc40b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "^0.8.0",
	"solcLongVersion": "^0.8.0+commit.d19bba13",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/daostack/controller/Reputation.sol": {
				"content": "pragma solidity 0.8.0;\r\n\r\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\r\n\r\n// Copied from @daostack/infra/contracts/Reputation.sol and added the MintMultiple function\r\n\r\n/**\r\n * @title Reputation system\r\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\r\n * A reputation is use to assign influence measure to a DAO'S peers.\r\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\r\n * The Reputation contract maintain a map of address to reputation value.\r\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\r\n */\r\ncontract Reputation is Ownable {\r\n    uint8 public decimals = 18; //Number of decimals of the smallest unit\r\n    // Event indicating minting of reputation to an address.\r\n    event Mint(address indexed _to, uint256 _amount);\r\n    // Event indicating burning of reputation for an address.\r\n    event Burn(address indexed _from, uint256 _amount);\r\n\r\n    // @dev `Checkpoint` is the structure that attaches a block number to a\r\n    //  given value, the block number attached is the one that last changed the\r\n    //  value\r\n    struct Checkpoint {\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n        // `value` is the amount of reputation at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping(address => Checkpoint[]) private balances;\r\n\r\n    // Tracks the history of the `totalSupply` of the reputation\r\n    Checkpoint[] private totalSupplyHistory;\r\n\r\n    // @notice Generates `_amount` reputation that are assigned to `_owner`\r\n    // @param _user The address that will be assigned the new reputation\r\n    // @param _amount The quantity of reputation generated\r\n    // @return True if the reputation are generated correctly\r\n    function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint256 previousBalanceTo = balanceOf(_user);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_user], previousBalanceTo + _amount);\r\n        emit Mint(_user, _amount);\r\n        return true;\r\n    }\r\n\r\n    // @notice Generates `_amount` reputation that are assigned to `_owner`\r\n    // @param _user The address that will be assigned the new reputation\r\n    // @param _amount The quantity of reputation generated\r\n    // @return True if the reputation are generated correctly\r\n    function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r\n        for (uint256 i = 0; i < _user.length; i++) {\r\n            uint256 curTotalSupply = totalSupply();\r\n            require(curTotalSupply + _amount[i] >= curTotalSupply); // Check for overflow\r\n            uint256 previousBalanceTo = balanceOf(_user[i]);\r\n            require(previousBalanceTo + _amount[i] >= previousBalanceTo); // Check for overflow\r\n            updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount[i]);\r\n            updateValueAtNow(balances[_user[i]], previousBalanceTo + _amount[i]);\r\n            emit Mint(_user[i], _amount[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // @notice Burns `_amount` reputation from `_owner`\r\n    // @param _user The address that will lose the reputation\r\n    // @param _amount The quantity of reputation to burn\r\n    // @return True if the reputation are burned correctly\r\n    function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        uint256 amountBurned = _amount;\r\n        uint256 previousBalanceFrom = balanceOf(_user);\r\n        if (previousBalanceFrom < amountBurned) {\r\n            amountBurned = previousBalanceFrom;\r\n        }\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\r\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\r\n        emit Burn(_user, amountBurned);\r\n        return true;\r\n    }\r\n\r\n    // @dev This function makes it easy to get the total number of reputation\r\n    // @return The total number of reputation\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n    ////////////////\r\n    // Query balance and totalSupply in History\r\n    ////////////////\r\n    /**\r\n     * @dev return the reputation amount of a given owner\r\n     * @param _owner an address of the owner which we want to get his reputation\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    // @notice Total amount of reputation at a specific `_blockNumber`.\r\n    // @param _blockNumber The block number when the totalSupply is queried\r\n    // @return The total amount of reputation at `_blockNumber`\r\n    function totalSupplyAt(uint256 _blockNumber) public view returns (uint256) {\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n            // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n    // @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    // @param _owner The address from which the balance will be retrieved\r\n    // @param _blockNumber The block number when the balance is queried\r\n    // @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256) {\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            return 0;\r\n            // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    ////////////////\r\n    // Internal helper functions to query and set a value in a snapshot array\r\n    ////////////////\r\n\r\n    // @dev `getValueAt` retrieves the number of reputation at a given block number\r\n    // @param checkpoints The history of values being queried\r\n    // @param _block The block number to retrieve the value at\r\n    // @return The number of reputation being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\r\n        if (checkpoints.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length - 1].fromBlock) {\r\n            return checkpoints[checkpoints.length - 1].value;\r\n        }\r\n        if (_block < checkpoints[0].fromBlock) {\r\n            return 0;\r\n        }\r\n\r\n        // Binary search of the value in the array\r\n        uint256 min = 0;\r\n        uint256 max = checkpoints.length - 1;\r\n        while (max > min) {\r\n            uint256 mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock <= _block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid - 1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    // @dev `updateValueAtNow` used to update the `balances` map and the\r\n    //  `totalSupplyHistory`\r\n    // @param checkpoints The history of data being updated\r\n    // @param _value The new number of reputation\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\r\n        require(uint128(_value) == _value); //check value is in the 128 bits bounderies\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n}\r\n"
			},
			"openzeppelin-solidity/contracts/ownership/Ownable.sol": {
				"content": "pragma solidity ^0.5.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
			},
			"openzeppelin-solidity/contracts/GSN/Context.sol": {
				"content": "pragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/daostack/controller/Reputation.sol": {
				"Reputation": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_from",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "Burn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "Mint",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_blockNumber",
									"type": "uint256"
								}
							],
							"name": "balanceOfAt",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "isOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_user",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "_amount",
									"type": "uint256[]"
								}
							],
							"name": "mintMultiple",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_blockNumber",
									"type": "uint256"
								}
							],
							"name": "totalSupplyAt",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "A DAO has Reputation System which allows peers to rate other peers in order to build trust . A reputation is use to assign influence measure to a DAO'S peers. Reputation is similar to regular tokens but with one crucial difference: It is non-transferable. The Reputation contract maintain a map of address to reputation value. It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.",
						"methods": {
							"balanceOf(address)": {
								"details": "return the reputation amount of a given owner",
								"params": {
									"_owner": "an address of the owner which we want to get his reputation"
								}
							},
							"isOwner()": {
								"details": "Returns true if the caller is the current owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"title": "Reputation system"
					},
					"evm": {
						"assembly": "    /* \"contracts/daostack/controller/Reputation.sol\":678:8513  contract Reputation is Ownable {\r... */\n  mstore(0x40, 0x80)\n    /* \"contracts/daostack/controller/Reputation.sol\":716:742  uint8 public decimals = 18 */\n  0x00\n  dup1\n  sload\n  not(shl(0xa0, 0xff))\n  and\n  shl(0xa1, 0x09)\n  or\n  swap1\n  sstore\n    /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":707:719  _msgSender() */\n  tag_5\n    /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":707:717  _msgSender */\n  tag_6\n    /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":707:719  _msgSender() */\n  jump\t// in\ntag_5:\n    /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":698:704  _owner */\n  0x00\n    /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":698:719  _owner = _msgSender() */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  dup4\n  and\n  or\n  dup1\n  dup3\n  sstore\n    /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":734:774  OwnershipTransferred(address(0), _owner) */\n  mload(0x40)\n    /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":767:773  _owner */\n  swap3\n  and\n  swap2\n    /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":734:774  OwnershipTransferred(address(0), _owner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":698:704  _owner */\n  dup3\n  swap1\n    /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":734:774  OwnershipTransferred(address(0), _owner) */\n  log3\n    /* \"contracts/daostack/controller/Reputation.sol\":678:8513  contract Reputation is Ownable {\r... */\n  jump(tag_7)\n    /* \"openzeppelin-solidity/contracts/GSN/Context.sol\":788:884  function _msgSender() internal view returns (address payable) {... */\ntag_6:\n    /* \"openzeppelin-solidity/contracts/GSN/Context.sol\":867:877  msg.sender */\n  caller\n    /* \"openzeppelin-solidity/contracts/GSN/Context.sol\":788:884  function _msgSender() internal view returns (address payable) {... */\n  swap1\n  jump\t// out\n    /* \"contracts/daostack/controller/Reputation.sol\":678:8513  contract Reputation is Ownable {\r... */\ntag_7:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/daostack/controller/Reputation.sol\":678:8513  contract Reputation is Ownable {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/daostack/controller/Reputation.sol\":678:8513  contract Reputation is Ownable {\r... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x07ea5477\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x4ee2cd7e\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8f32d59b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x981b24d0\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x9dc29fac\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_14\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n    tag_3:\n      tag_15\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_16\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_16:\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n      dup2\n      add\n      swap1\n      0x20\n      dup2\n      add\n      dup2\n      calldataload\n      shl(0x20, 0x01)\n        /* \"--CODEGEN--\":5:33   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_17\n      jumpi\n        /* \"--CODEGEN--\":46:47   */\n      0x00\n        /* \"--CODEGEN--\":43:44   */\n      dup1\n        /* \"--CODEGEN--\":36:48   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_17:\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n      dup3\n      add\n        /* \"--CODEGEN--\":35:44   */\n      dup4\n        /* \"--CODEGEN--\":28:32   */\n      0x20\n        /* \"--CODEGEN--\":12:26   */\n      dup3\n        /* \"--CODEGEN--\":8:33   */\n      add\n        /* \"--CODEGEN--\":5:45   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_18\n      jumpi\n        /* \"--CODEGEN--\":58:59   */\n      0x00\n        /* \"--CODEGEN--\":55:56   */\n      dup1\n        /* \"--CODEGEN--\":48:60   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_18:\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n        /* \"--CODEGEN--\":101:110   */\n      dup5\n        /* \"--CODEGEN--\":95:97   */\n      0x20\n        /* \"--CODEGEN--\":81:93   */\n      dup4\n        /* \"--CODEGEN--\":77:98   */\n      mul\n        /* \"--CODEGEN--\":67:75   */\n      dup5\n        /* \"--CODEGEN--\":63:99   */\n      add\n        /* \"--CODEGEN--\":60:111   */\n      gt\n      shl(0x20, 0x01)\n        /* \"--CODEGEN--\":25:37   */\n      dup4\n        /* \"--CODEGEN--\":22:51   */\n      gt\n        /* \"--CODEGEN--\":11:119   */\n      or\n        /* \"--CODEGEN--\":8:10   */\n      iszero\n      tag_19\n      jumpi\n        /* \"--CODEGEN--\":132:133   */\n      0x00\n        /* \"--CODEGEN--\":129:130   */\n      dup1\n        /* \"--CODEGEN--\":122:134   */\n      revert\n        /* \"--CODEGEN--\":8:10   */\n    tag_19:\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n      swap2\n      swap1\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n        /* \"--CODEGEN--\":30:33   */\n      dup1\n        /* \"--CODEGEN--\":22:28   */\n      dup3\n        /* \"--CODEGEN--\":14:20   */\n      dup5\n        /* \"--CODEGEN--\":1:34   */\n      calldatacopy\n        /* \"--CODEGEN--\":99:100   */\n      0x00\n        /* \"--CODEGEN--\":81:97   */\n      swap3\n      add\n        /* \"--CODEGEN--\":74:101   */\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n      swap3\n      swap6\n      swap5\n      swap4\n      0x20\n      dup2\n      add\n      swap4\n      pop\n      calldataload\n      swap2\n      pop\n      pop\n      shl(0x20, 0x01)\n        /* \"--CODEGEN--\":5:33   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_20\n      jumpi\n        /* \"--CODEGEN--\":46:47   */\n      0x00\n        /* \"--CODEGEN--\":43:44   */\n      dup1\n        /* \"--CODEGEN--\":36:48   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_20:\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n      dup3\n      add\n        /* \"--CODEGEN--\":35:44   */\n      dup4\n        /* \"--CODEGEN--\":28:32   */\n      0x20\n        /* \"--CODEGEN--\":12:26   */\n      dup3\n        /* \"--CODEGEN--\":8:33   */\n      add\n        /* \"--CODEGEN--\":5:45   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_21\n      jumpi\n        /* \"--CODEGEN--\":58:59   */\n      0x00\n        /* \"--CODEGEN--\":55:56   */\n      dup1\n        /* \"--CODEGEN--\":48:60   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_21:\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n        /* \"--CODEGEN--\":101:110   */\n      dup5\n        /* \"--CODEGEN--\":95:97   */\n      0x20\n        /* \"--CODEGEN--\":81:93   */\n      dup4\n        /* \"--CODEGEN--\":77:98   */\n      mul\n        /* \"--CODEGEN--\":67:75   */\n      dup5\n        /* \"--CODEGEN--\":63:99   */\n      add\n        /* \"--CODEGEN--\":60:111   */\n      gt\n      shl(0x20, 0x01)\n        /* \"--CODEGEN--\":25:37   */\n      dup4\n        /* \"--CODEGEN--\":22:51   */\n      gt\n        /* \"--CODEGEN--\":11:119   */\n      or\n        /* \"--CODEGEN--\":8:10   */\n      iszero\n      tag_22\n      jumpi\n        /* \"--CODEGEN--\":132:133   */\n      0x00\n        /* \"--CODEGEN--\":129:130   */\n      dup1\n        /* \"--CODEGEN--\":122:134   */\n      revert\n        /* \"--CODEGEN--\":8:10   */\n    tag_22:\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n      swap2\n      swap1\n      dup1\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      0x20\n      mul\n        /* \"--CODEGEN--\":30:33   */\n      dup1\n        /* \"--CODEGEN--\":22:28   */\n      dup3\n        /* \"--CODEGEN--\":14:20   */\n      dup5\n        /* \"--CODEGEN--\":1:34   */\n      calldatacopy\n        /* \"--CODEGEN--\":99:100   */\n      0x00\n        /* \"--CODEGEN--\":81:97   */\n      swap3\n      add\n        /* \"--CODEGEN--\":74:101   */\n      swap2\n      swap1\n      swap2\n      mstore\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n      swap3\n      swap6\n      pop\n      tag_23\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// in\n    tag_15:\n      0x40\n      dup1\n      mload\n      swap2\n      iszero\n      iszero\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/daostack/controller/Reputation.sol\":4595:4701  function totalSupply() public view returns (uint256) {\r... */\n    tag_4:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/daostack/controller/Reputation.sol\":716:742  uint8 public decimals = 18 */\n    tag_5:\n      tag_26\n      tag_27\n      jump\t// in\n    tag_26:\n      0x40\n      dup1\n      mload\n      0xff\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/daostack/controller/Reputation.sol\":2089:2657  function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\r... */\n    tag_6:\n      tag_15\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_29\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_29:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":2089:2657  function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\r... */\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_30\n      jump\t// in\n        /* \"contracts/daostack/controller/Reputation.sol\":5977:6366  function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256) {\r... */\n    tag_7:\n      tag_24\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_32\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_32:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":5977:6366  function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256) {\r... */\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_33\n      jump\t// in\n        /* \"contracts/daostack/controller/Reputation.sol\":4961:5093  function balanceOf(address _owner) public view returns (uint256 balance) {\r... */\n    tag_8:\n      tag_24\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_35\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_35:\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":4961:5093  function balanceOf(address _owner) public view returns (uint256 balance) {\r... */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_36\n      jump\t// in\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1642:1779  function renounceOwnership() public onlyOwner {... */\n    tag_9:\n      tag_37\n      tag_38\n      jump\t// in\n    tag_37:\n      stop\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":857:934  function owner() public view returns (address) {... */\n    tag_10:\n      tag_39\n      tag_40\n      jump\t// in\n    tag_39:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1208:1300  function isOwner() public view returns (bool) {... */\n    tag_11:\n      tag_15\n      tag_42\n      jump\t// in\n        /* \"contracts/daostack/controller/Reputation.sol\":5316:5701  function totalSupplyAt(uint256 _blockNumber) public view returns (uint256) {\r... */\n    tag_12:\n      tag_24\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_44\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_44:\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":5316:5701  function totalSupplyAt(uint256 _blockNumber) public view returns (uint256) {\r... */\n      calldataload\n      tag_45\n      jump\t// in\n        /* \"contracts/daostack/controller/Reputation.sol\":3896:4461  function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\r... */\n    tag_13:\n      tag_15\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_47\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_47:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":3896:4461  function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\r... */\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_48\n      jump\t// in\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1928:2035  function transferOwnership(address newOwner) public onlyOwner {... */\n    tag_14:\n      tag_37\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_50\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_50:\n      pop\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1928:2035  function transferOwnership(address newOwner) public onlyOwner {... */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_51\n      jump\t// in\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n    tag_23:\n        /* \"contracts/daostack/controller/Reputation.sol\":3037:3041  bool */\n      0x00\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1070  isOwner() */\n      tag_53\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1068  isOwner */\n      tag_42\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1070  isOwner() */\n      jump\t// in\n    tag_53:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1053:1107  require(isOwner(), \"Ownable: caller is not the owner\") */\n      tag_54\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_54:\n        /* \"contracts/daostack/controller/Reputation.sol\":3059:3068  uint256 i */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":3054:3621  for (uint256 i = 0; i < _user.length; i++) {\r... */\n    tag_56:\n        /* \"contracts/daostack/controller/Reputation.sol\":3078:3083  _user */\n      dup4\n        /* \"contracts/daostack/controller/Reputation.sol\":3078:3090  _user.length */\n      mload\n        /* \"contracts/daostack/controller/Reputation.sol\":3074:3075  i */\n      dup2\n        /* \"contracts/daostack/controller/Reputation.sol\":3074:3090  i < _user.length */\n      lt\n        /* \"contracts/daostack/controller/Reputation.sol\":3054:3621  for (uint256 i = 0; i < _user.length; i++) {\r... */\n      iszero\n      tag_57\n      jumpi\n        /* \"contracts/daostack/controller/Reputation.sol\":3112:3134  uint256 curTotalSupply */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":3137:3150  totalSupply() */\n      tag_59\n        /* \"contracts/daostack/controller/Reputation.sol\":3137:3148  totalSupply */\n      tag_25\n        /* \"contracts/daostack/controller/Reputation.sol\":3137:3150  totalSupply() */\n      jump\t// in\n    tag_59:\n        /* \"contracts/daostack/controller/Reputation.sol\":3112:3150  uint256 curTotalSupply = totalSupply() */\n      swap1\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":3204:3218  curTotalSupply */\n      dup1\n        /* \"contracts/daostack/controller/Reputation.sol\":3190:3197  _amount */\n      dup5\n        /* \"contracts/daostack/controller/Reputation.sol\":3198:3199  i */\n      dup4\n        /* \"contracts/daostack/controller/Reputation.sol\":3190:3200  _amount[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_60\n      jumpi\n      invalid\n    tag_60:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/daostack/controller/Reputation.sol\":3173:3187  curTotalSupply */\n      dup3\n        /* \"contracts/daostack/controller/Reputation.sol\":3173:3200  curTotalSupply + _amount[i] */\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":3173:3218  curTotalSupply + _amount[i] >= curTotalSupply */\n      lt\n      iszero\n        /* \"contracts/daostack/controller/Reputation.sol\":3165:3219  require(curTotalSupply + _amount[i] >= curTotalSupply) */\n      tag_61\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_61:\n        /* \"contracts/daostack/controller/Reputation.sol\":3256:3281  uint256 previousBalanceTo */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":3284:3303  balanceOf(_user[i]) */\n      tag_62\n        /* \"contracts/daostack/controller/Reputation.sol\":3294:3299  _user */\n      dup7\n        /* \"contracts/daostack/controller/Reputation.sol\":3300:3301  i */\n      dup5\n        /* \"contracts/daostack/controller/Reputation.sol\":3294:3302  _user[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_63\n      jumpi\n      invalid\n    tag_63:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/daostack/controller/Reputation.sol\":3284:3293  balanceOf */\n      tag_36\n        /* \"contracts/daostack/controller/Reputation.sol\":3284:3303  balanceOf(_user[i]) */\n      jump\t// in\n    tag_62:\n        /* \"contracts/daostack/controller/Reputation.sol\":3256:3303  uint256 previousBalanceTo = balanceOf(_user[i]) */\n      swap1\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":3360:3377  previousBalanceTo */\n      dup1\n        /* \"contracts/daostack/controller/Reputation.sol\":3346:3353  _amount */\n      dup6\n        /* \"contracts/daostack/controller/Reputation.sol\":3354:3355  i */\n      dup5\n        /* \"contracts/daostack/controller/Reputation.sol\":3346:3356  _amount[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_64\n      jumpi\n      invalid\n    tag_64:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/daostack/controller/Reputation.sol\":3326:3343  previousBalanceTo */\n      dup3\n        /* \"contracts/daostack/controller/Reputation.sol\":3326:3356  previousBalanceTo + _amount[i] */\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":3326:3377  previousBalanceTo + _amount[i] >= previousBalanceTo */\n      lt\n      iszero\n        /* \"contracts/daostack/controller/Reputation.sol\":3318:3378  require(previousBalanceTo + _amount[i] >= previousBalanceTo) */\n      tag_65\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_65:\n        /* \"contracts/daostack/controller/Reputation.sol\":3415:3480  updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount[i]) */\n      tag_66\n        /* \"contracts/daostack/controller/Reputation.sol\":3432:3450  totalSupplyHistory */\n      0x02\n        /* \"contracts/daostack/controller/Reputation.sol\":3469:3476  _amount */\n      dup7\n        /* \"contracts/daostack/controller/Reputation.sol\":3477:3478  i */\n      dup6\n        /* \"contracts/daostack/controller/Reputation.sol\":3469:3479  _amount[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_67\n      jumpi\n      invalid\n    tag_67:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/daostack/controller/Reputation.sol\":3452:3466  curTotalSupply */\n      dup5\n        /* \"contracts/daostack/controller/Reputation.sol\":3452:3479  curTotalSupply + _amount[i] */\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":3415:3431  updateValueAtNow */\n      tag_68\n        /* \"contracts/daostack/controller/Reputation.sol\":3415:3480  updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount[i]) */\n      jump\t// in\n    tag_66:\n        /* \"contracts/daostack/controller/Reputation.sol\":3495:3563  updateValueAtNow(balances[_user[i]], previousBalanceTo + _amount[i]) */\n      tag_69\n        /* \"contracts/daostack/controller/Reputation.sol\":3512:3520  balances */\n      0x01\n        /* \"contracts/daostack/controller/Reputation.sol\":3512:3530  balances[_user[i]] */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":3521:3526  _user */\n      dup9\n        /* \"contracts/daostack/controller/Reputation.sol\":3527:3528  i */\n      dup7\n        /* \"contracts/daostack/controller/Reputation.sol\":3521:3529  _user[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_70\n      jumpi\n      invalid\n    tag_70:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":3512:3530  balances[_user[i]] */\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/daostack/controller/Reputation.sol\":3552:3559  _amount */\n      dup7\n        /* \"contracts/daostack/controller/Reputation.sol\":3560:3561  i */\n      dup6\n        /* \"contracts/daostack/controller/Reputation.sol\":3552:3562  _amount[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_71\n      jumpi\n      invalid\n    tag_71:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/daostack/controller/Reputation.sol\":3532:3549  previousBalanceTo */\n      dup4\n        /* \"contracts/daostack/controller/Reputation.sol\":3532:3562  previousBalanceTo + _amount[i] */\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":3495:3511  updateValueAtNow */\n      tag_68\n        /* \"contracts/daostack/controller/Reputation.sol\":3495:3563  updateValueAtNow(balances[_user[i]], previousBalanceTo + _amount[i]) */\n      jump\t// in\n    tag_69:\n        /* \"contracts/daostack/controller/Reputation.sol\":3588:3593  _user */\n      dup6\n        /* \"contracts/daostack/controller/Reputation.sol\":3594:3595  i */\n      dup4\n        /* \"contracts/daostack/controller/Reputation.sol\":3588:3596  _user[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_72\n      jumpi\n      invalid\n    tag_72:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":3583:3609  Mint(_user[i], _amount[i]) */\n      and\n      0x00\n      dup1\n      mload\n      0x20\n      data_faef6c4eb5d567b942c0732eb539a574877571781fcfe7e88ebbcacc7e2fa7ef\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"contracts/daostack/controller/Reputation.sol\":3598:3605  _amount */\n      dup7\n        /* \"contracts/daostack/controller/Reputation.sol\":3606:3607  i */\n      dup6\n        /* \"contracts/daostack/controller/Reputation.sol\":3598:3608  _amount[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_73\n      jumpi\n      invalid\n    tag_73:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/daostack/controller/Reputation.sol\":3583:3609  Mint(_user[i], _amount[i]) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n      pop\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":3092:3095  i++ */\n      0x01\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":3054:3621  for (uint256 i = 0; i < _user.length; i++) {\r... */\n      jump(tag_56)\n    tag_57:\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":3638:3642  true */\n      0x01\n        /* \"contracts/daostack/controller/Reputation.sol\":3631:3642  return true */\n      swap1\n      pop\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1117:1118  _ */\n    tag_55:\n        /* \"contracts/daostack/controller/Reputation.sol\":2939:3650  function mintMultiple(address[] memory _user, uint256[] memory _amount) public onlyOwner returns (bool) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/daostack/controller/Reputation.sol\":4595:4701  function totalSupply() public view returns (uint256) {\r... */\n    tag_25:\n        /* \"contracts/daostack/controller/Reputation.sol\":4639:4646  uint256 */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":4666:4693  totalSupplyAt(block.number) */\n      tag_75\n        /* \"contracts/daostack/controller/Reputation.sol\":4680:4692  block.number */\n      number\n        /* \"contracts/daostack/controller/Reputation.sol\":4666:4679  totalSupplyAt */\n      tag_45\n        /* \"contracts/daostack/controller/Reputation.sol\":4666:4693  totalSupplyAt(block.number) */\n      jump\t// in\n    tag_75:\n        /* \"contracts/daostack/controller/Reputation.sol\":4659:4693  return totalSupplyAt(block.number) */\n      swap1\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":4595:4701  function totalSupply() public view returns (uint256) {\r... */\n    tag_74:\n      swap1\n      jump\t// out\n        /* \"contracts/daostack/controller/Reputation.sol\":716:742  uint8 public decimals = 18 */\n    tag_27:\n      sload(0x00)\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/daostack/controller/Reputation.sol\":2089:2657  function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\r... */\n    tag_30:\n        /* \"contracts/daostack/controller/Reputation.sol\":2161:2165  bool */\n      0x00\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1070  isOwner() */\n      tag_77\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1068  isOwner */\n      tag_42\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1070  isOwner() */\n      jump\t// in\n    tag_77:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1053:1107  require(isOwner(), \"Ownable: caller is not the owner\") */\n      tag_78\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_78:\n        /* \"contracts/daostack/controller/Reputation.sol\":2178:2200  uint256 curTotalSupply */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":2203:2216  totalSupply() */\n      tag_80\n        /* \"contracts/daostack/controller/Reputation.sol\":2203:2214  totalSupply */\n      tag_25\n        /* \"contracts/daostack/controller/Reputation.sol\":2203:2216  totalSupply() */\n      jump\t// in\n    tag_80:\n        /* \"contracts/daostack/controller/Reputation.sol\":2178:2216  uint256 curTotalSupply = totalSupply() */\n      swap1\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":2263:2277  curTotalSupply */\n      dup1\n        /* \"contracts/daostack/controller/Reputation.sol\":2252:2259  _amount */\n      dup4\n        /* \"contracts/daostack/controller/Reputation.sol\":2235:2249  curTotalSupply */\n      dup3\n        /* \"contracts/daostack/controller/Reputation.sol\":2235:2259  curTotalSupply + _amount */\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":2235:2277  curTotalSupply + _amount >= curTotalSupply */\n      lt\n      iszero\n        /* \"contracts/daostack/controller/Reputation.sol\":2227:2278  require(curTotalSupply + _amount >= curTotalSupply) */\n      tag_81\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_81:\n        /* \"contracts/daostack/controller/Reputation.sol\":2311:2336  uint256 previousBalanceTo */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":2339:2355  balanceOf(_user) */\n      tag_82\n        /* \"contracts/daostack/controller/Reputation.sol\":2349:2354  _user */\n      dup6\n        /* \"contracts/daostack/controller/Reputation.sol\":2339:2348  balanceOf */\n      tag_36\n        /* \"contracts/daostack/controller/Reputation.sol\":2339:2355  balanceOf(_user) */\n      jump\t// in\n    tag_82:\n        /* \"contracts/daostack/controller/Reputation.sol\":2311:2355  uint256 previousBalanceTo = balanceOf(_user) */\n      swap1\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":2405:2422  previousBalanceTo */\n      dup1\n        /* \"contracts/daostack/controller/Reputation.sol\":2394:2401  _amount */\n      dup5\n        /* \"contracts/daostack/controller/Reputation.sol\":2374:2391  previousBalanceTo */\n      dup3\n        /* \"contracts/daostack/controller/Reputation.sol\":2374:2401  previousBalanceTo + _amount */\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":2374:2422  previousBalanceTo + _amount >= previousBalanceTo */\n      lt\n      iszero\n        /* \"contracts/daostack/controller/Reputation.sol\":2366:2423  require(previousBalanceTo + _amount >= previousBalanceTo) */\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n        /* \"contracts/daostack/controller/Reputation.sol\":2456:2518  updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount) */\n      tag_84\n        /* \"contracts/daostack/controller/Reputation.sol\":2473:2491  totalSupplyHistory */\n      0x02\n        /* \"contracts/daostack/controller/Reputation.sol\":2510:2517  _amount */\n      dup6\n        /* \"contracts/daostack/controller/Reputation.sol\":2493:2507  curTotalSupply */\n      dup5\n        /* \"contracts/daostack/controller/Reputation.sol\":2493:2517  curTotalSupply + _amount */\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":2456:2472  updateValueAtNow */\n      tag_68\n        /* \"contracts/daostack/controller/Reputation.sol\":2456:2518  updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount) */\n      jump\t// in\n    tag_84:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":2546:2561  balances[_user] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/daostack/controller/Reputation.sol\":2546:2554  balances */\n      0x01\n        /* \"contracts/daostack/controller/Reputation.sol\":2546:2561  balances[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/daostack/controller/Reputation.sol\":2529:2591  updateValueAtNow(balances[_user], previousBalanceTo + _amount) */\n      tag_85\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":2563:2590  previousBalanceTo + _amount */\n      dup3\n      dup7\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":2529:2545  updateValueAtNow */\n      tag_68\n        /* \"contracts/daostack/controller/Reputation.sol\":2529:2591  updateValueAtNow(balances[_user], previousBalanceTo + _amount) */\n      jump\t// in\n    tag_85:\n        /* \"contracts/daostack/controller/Reputation.sol\":2607:2627  Mint(_user, _amount) */\n      0x40\n      dup1\n      mload\n      dup6\n      dup2\n      mstore\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup8\n      and\n      swap2\n      0x00\n      dup1\n      mload\n      0x20\n      data_faef6c4eb5d567b942c0732eb539a574877571781fcfe7e88ebbcacc7e2fa7ef\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      swap2\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      log2\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":2645:2649  true */\n      0x01\n      swap5\n        /* \"contracts/daostack/controller/Reputation.sol\":2089:2657  function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\r... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/daostack/controller/Reputation.sol\":5977:6366  function balanceOfAt(address _owner, uint256 _blockNumber) public view returns (uint256) {\r... */\n    tag_33:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":6082:6098  balances[_owner] */\n      dup3\n      and\n        /* \"contracts/daostack/controller/Reputation.sol\":6057:6064  uint256 */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":6082:6098  balances[_owner] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/daostack/controller/Reputation.sol\":6082:6090  balances */\n      0x01\n        /* \"contracts/daostack/controller/Reputation.sol\":6082:6098  balances[_owner] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/daostack/controller/Reputation.sol\":6082:6105  balances[_owner].length */\n      sload\n        /* \"contracts/daostack/controller/Reputation.sol\":6082:6110  balances[_owner].length == 0 */\n      iszero\n      dup1\n        /* \"contracts/daostack/controller/Reputation.sol\":6081:6161  (balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber) */\n      tag_87\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":6116:6132  balances[_owner] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/daostack/controller/Reputation.sol\":6116:6124  balances */\n      0x01\n        /* \"contracts/daostack/controller/Reputation.sol\":6116:6132  balances[_owner] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/daostack/controller/Reputation.sol\":6116:6135  balances[_owner][0] */\n      dup1\n      sload\n        /* \"contracts/daostack/controller/Reputation.sol\":6148:6160  _blockNumber */\n      dup5\n      swap3\n        /* \"contracts/daostack/controller/Reputation.sol\":6116:6132  balances[_owner] */\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":6116:6135  balances[_owner][0] */\n      tag_88\n      jumpi\n      invalid\n    tag_88:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":6116:6145  balances[_owner][0].fromBlock */\n      sload\n      sub(shl(0x80, 0x01), 0x01)\n      and\n        /* \"contracts/daostack/controller/Reputation.sol\":6116:6160  balances[_owner][0].fromBlock > _blockNumber */\n      gt\n        /* \"contracts/daostack/controller/Reputation.sol\":6081:6161  (balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber) */\n    tag_87:\n        /* \"contracts/daostack/controller/Reputation.sol\":6077:6359  if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r... */\n      iszero\n      tag_90\n      jumpi\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":6185:6186  0 */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":6178:6186  return 0 */\n      jump(tag_55)\n        /* \"contracts/daostack/controller/Reputation.sol\":6077:6359  if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r... */\n    tag_90:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":6316:6332  balances[_owner] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/daostack/controller/Reputation.sol\":6316:6324  balances */\n      0x01\n        /* \"contracts/daostack/controller/Reputation.sol\":6316:6332  balances[_owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/daostack/controller/Reputation.sol\":6305:6347  getValueAt(balances[_owner], _blockNumber) */\n      tag_92\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":6334:6346  _blockNumber */\n      dup4\n        /* \"contracts/daostack/controller/Reputation.sol\":6305:6315  getValueAt */\n      tag_93\n        /* \"contracts/daostack/controller/Reputation.sol\":6305:6347  getValueAt(balances[_owner], _blockNumber) */\n      jump\t// in\n    tag_92:\n        /* \"contracts/daostack/controller/Reputation.sol\":6298:6347  return getValueAt(balances[_owner], _blockNumber) */\n      swap1\n      pop\n      jump(tag_55)\n        /* \"contracts/daostack/controller/Reputation.sol\":4961:5093  function balanceOf(address _owner) public view returns (uint256 balance) {\r... */\n    tag_36:\n        /* \"contracts/daostack/controller/Reputation.sol\":5017:5032  uint256 balance */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":5052:5085  balanceOfAt(_owner, block.number) */\n      tag_95\n        /* \"contracts/daostack/controller/Reputation.sol\":5064:5070  _owner */\n      dup3\n        /* \"contracts/daostack/controller/Reputation.sol\":5072:5084  block.number */\n      number\n        /* \"contracts/daostack/controller/Reputation.sol\":5052:5063  balanceOfAt */\n      tag_33\n        /* \"contracts/daostack/controller/Reputation.sol\":5052:5085  balanceOfAt(_owner, block.number) */\n      jump\t// in\n    tag_95:\n        /* \"contracts/daostack/controller/Reputation.sol\":5045:5085  return balanceOfAt(_owner, block.number) */\n      swap1\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":4961:5093  function balanceOf(address _owner) public view returns (uint256 balance) {\r... */\n    tag_94:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1642:1779  function renounceOwnership() public onlyOwner {... */\n    tag_38:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1070  isOwner() */\n      tag_97\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1068  isOwner */\n      tag_42\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1070  isOwner() */\n      jump\t// in\n    tag_97:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1053:1107  require(isOwner(), \"Ownable: caller is not the owner\") */\n      tag_98\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_98:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1740:1741  0 */\n      0x00\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1724:1730  _owner */\n      dup1\n      sload\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1703:1743  OwnershipTransferred(_owner, address(0)) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1724:1730  _owner */\n      swap1\n      swap2\n      and\n      swap1\n      0x00\n      dup1\n      mload\n      0x20\n      data_9c064737b570a74c2bac5d21056d93ac53115214216cd14d4a0fc9b60be81231\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1703:1743  OwnershipTransferred(_owner, address(0)) */\n      swap1\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1740:1741  0 */\n      dup4\n      swap1\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1703:1743  OwnershipTransferred(_owner, address(0)) */\n      log3\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1770:1771  0 */\n      0x00\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1753:1772  _owner = address(0) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      swap1\n      sstore\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1642:1779  function renounceOwnership() public onlyOwner {... */\n      jump\t// out\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":857:934  function owner() public view returns (address) {... */\n    tag_40:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":895:902  address */\n      0x00\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":921:927  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":857:934  function owner() public view returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1208:1300  function isOwner() public view returns (bool) {... */\n    tag_42:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1248:1252  bool */\n      0x00\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1287:1293  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1271:1283  _msgSender() */\n      tag_102\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1271:1281  _msgSender */\n      tag_103\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1271:1283  _msgSender() */\n      jump\t// in\n    tag_102:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1271:1293  _msgSender() == _owner */\n      and\n      eq\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1264:1293  return _msgSender() == _owner */\n      swap1\n      pop\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1208:1300  function isOwner() public view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/daostack/controller/Reputation.sol\":5316:5701  function totalSupplyAt(uint256 _blockNumber) public view returns (uint256) {\r... */\n    tag_45:\n        /* \"contracts/daostack/controller/Reputation.sol\":5407:5425  totalSupplyHistory */\n      0x02\n        /* \"contracts/daostack/controller/Reputation.sol\":5407:5432  totalSupplyHistory.length */\n      sload\n        /* \"contracts/daostack/controller/Reputation.sol\":5382:5389  uint256 */\n      0x00\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":5407:5437  totalSupplyHistory.length == 0 */\n      iszero\n      dup1\n        /* \"contracts/daostack/controller/Reputation.sol\":5406:5490  (totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber) */\n      tag_105\n      jumpi\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":5477:5489  _blockNumber */\n      dup2\n        /* \"contracts/daostack/controller/Reputation.sol\":5443:5461  totalSupplyHistory */\n      0x02\n        /* \"contracts/daostack/controller/Reputation.sol\":5462:5463  0 */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":5443:5464  totalSupplyHistory[0] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_106\n      jumpi\n      invalid\n    tag_106:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":5443:5474  totalSupplyHistory[0].fromBlock */\n      sload\n      sub(shl(0x80, 0x01), 0x01)\n      and\n        /* \"contracts/daostack/controller/Reputation.sol\":5443:5489  totalSupplyHistory[0].fromBlock > _blockNumber */\n      gt\n        /* \"contracts/daostack/controller/Reputation.sol\":5406:5490  (totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber) */\n    tag_105:\n        /* \"contracts/daostack/controller/Reputation.sol\":5402:5694  if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r... */\n      iszero\n      tag_108\n      jumpi\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":5514:5515  0 */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":5507:5515  return 0 */\n      jump(tag_94)\n        /* \"contracts/daostack/controller/Reputation.sol\":5402:5694  if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r... */\n    tag_108:\n        /* \"contracts/daostack/controller/Reputation.sol\":5638:5682  getValueAt(totalSupplyHistory, _blockNumber) */\n      tag_110\n        /* \"contracts/daostack/controller/Reputation.sol\":5649:5667  totalSupplyHistory */\n      0x02\n        /* \"contracts/daostack/controller/Reputation.sol\":5669:5681  _blockNumber */\n      dup4\n        /* \"contracts/daostack/controller/Reputation.sol\":5638:5648  getValueAt */\n      tag_93\n        /* \"contracts/daostack/controller/Reputation.sol\":5638:5682  getValueAt(totalSupplyHistory, _blockNumber) */\n      jump\t// in\n    tag_110:\n        /* \"contracts/daostack/controller/Reputation.sol\":5631:5682  return getValueAt(totalSupplyHistory, _blockNumber) */\n      swap1\n      pop\n      jump(tag_94)\n        /* \"contracts/daostack/controller/Reputation.sol\":3896:4461  function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\r... */\n    tag_48:\n        /* \"contracts/daostack/controller/Reputation.sol\":3968:3972  bool */\n      0x00\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1070  isOwner() */\n      tag_112\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1068  isOwner */\n      tag_42\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1070  isOwner() */\n      jump\t// in\n    tag_112:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1053:1107  require(isOwner(), \"Ownable: caller is not the owner\") */\n      tag_113\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_113:\n        /* \"contracts/daostack/controller/Reputation.sol\":3985:4007  uint256 curTotalSupply */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":4010:4023  totalSupply() */\n      tag_115\n        /* \"contracts/daostack/controller/Reputation.sol\":4010:4021  totalSupply */\n      tag_25\n        /* \"contracts/daostack/controller/Reputation.sol\":4010:4023  totalSupply() */\n      jump\t// in\n    tag_115:\n        /* \"contracts/daostack/controller/Reputation.sol\":3985:4023  uint256 curTotalSupply = totalSupply() */\n      swap1\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":4057:4064  _amount */\n      dup3\n        /* \"contracts/daostack/controller/Reputation.sol\":4034:4054  uint256 amountBurned */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":4105:4121  balanceOf(_user) */\n      tag_116\n        /* \"contracts/daostack/controller/Reputation.sol\":4115:4120  _user */\n      dup7\n        /* \"contracts/daostack/controller/Reputation.sol\":4105:4114  balanceOf */\n      tag_36\n        /* \"contracts/daostack/controller/Reputation.sol\":4105:4121  balanceOf(_user) */\n      jump\t// in\n    tag_116:\n        /* \"contracts/daostack/controller/Reputation.sol\":4075:4121  uint256 previousBalanceFrom = balanceOf(_user) */\n      swap1\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":4158:4170  amountBurned */\n      dup2\n        /* \"contracts/daostack/controller/Reputation.sol\":4136:4155  previousBalanceFrom */\n      dup2\n        /* \"contracts/daostack/controller/Reputation.sol\":4136:4170  previousBalanceFrom < amountBurned */\n      lt\n        /* \"contracts/daostack/controller/Reputation.sol\":4132:4233  if (previousBalanceFrom < amountBurned) {\r... */\n      iszero\n      tag_117\n      jumpi\n        /* \"contracts/daostack/controller/Reputation.sol\":4202:4221  previousBalanceFrom */\n      dup1\n        /* \"contracts/daostack/controller/Reputation.sol\":4187:4221  amountBurned = previousBalanceFrom */\n      swap2\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":4132:4233  if (previousBalanceFrom < amountBurned) {\r... */\n    tag_117:\n        /* \"contracts/daostack/controller/Reputation.sol\":4243:4310  updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned) */\n      tag_118\n        /* \"contracts/daostack/controller/Reputation.sol\":4260:4278  totalSupplyHistory */\n      0x02\n        /* \"contracts/daostack/controller/Reputation.sol\":4297:4309  amountBurned */\n      dup4\n        /* \"contracts/daostack/controller/Reputation.sol\":4280:4294  curTotalSupply */\n      dup6\n        /* \"contracts/daostack/controller/Reputation.sol\":4280:4309  curTotalSupply - amountBurned */\n      sub\n        /* \"contracts/daostack/controller/Reputation.sol\":4243:4259  updateValueAtNow */\n      tag_68\n        /* \"contracts/daostack/controller/Reputation.sol\":4243:4310  updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned) */\n      jump\t// in\n    tag_118:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":4338:4353  balances[_user] */\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/daostack/controller/Reputation.sol\":4338:4346  balances */\n      0x01\n        /* \"contracts/daostack/controller/Reputation.sol\":4338:4353  balances[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/daostack/controller/Reputation.sol\":4321:4390  updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned) */\n      tag_119\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":4355:4389  previousBalanceFrom - amountBurned */\n      dup4\n      dup4\n      sub\n        /* \"contracts/daostack/controller/Reputation.sol\":4321:4337  updateValueAtNow */\n      tag_68\n        /* \"contracts/daostack/controller/Reputation.sol\":4321:4390  updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned) */\n      jump\t// in\n    tag_119:\n        /* \"contracts/daostack/controller/Reputation.sol\":4406:4431  Burn(_user, amountBurned) */\n      0x40\n      dup1\n      mload\n      dup4\n      dup2\n      mstore\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup9\n      and\n      swap2\n      0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5\n      swap2\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      log2\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":4449:4453  true */\n      0x01\n      swap6\n        /* \"contracts/daostack/controller/Reputation.sol\":3896:4461  function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\r... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1928:2035  function transferOwnership(address newOwner) public onlyOwner {... */\n    tag_51:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1070  isOwner() */\n      tag_121\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1068  isOwner */\n      tag_42\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1061:1070  isOwner() */\n      jump\t// in\n    tag_121:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1053:1107  require(isOwner(), \"Ownable: caller is not the owner\") */\n      tag_122\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_122:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2000:2028  _transferOwnership(newOwner) */\n      tag_124\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2019:2027  newOwner */\n      dup2\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2000:2018  _transferOwnership */\n      tag_125\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2000:2028  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_124:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":1928:2035  function transferOwnership(address newOwner) public onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/daostack/controller/Reputation.sol\":7857:8510  function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\r... */\n    tag_68:\n        /* \"contracts/daostack/controller/Reputation.sol\":7980:7986  _value */\n      dup1\n        /* \"contracts/daostack/controller/Reputation.sol\":7969:7975  _value */\n      dup2\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":7961:7986  uint128(_value) == _value */\n      and\n      eq\n        /* \"contracts/daostack/controller/Reputation.sol\":7953:7987  require(uint128(_value) == _value) */\n      tag_127\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_127:\n        /* \"contracts/daostack/controller/Reputation.sol\":8047:8065  checkpoints.length */\n      dup2\n      sload\n        /* \"contracts/daostack/controller/Reputation.sol\":8047:8070  checkpoints.length == 0 */\n      iszero\n      dup1\n        /* \"contracts/daostack/controller/Reputation.sol\":8046:8137  (checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number) */\n      tag_128\n      jumpi\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":8088:8106  checkpoints.length */\n      dup2\n      sload\n        /* \"contracts/daostack/controller/Reputation.sol\":8124:8136  block.number */\n      number\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":8076:8087  checkpoints */\n      dup4\n      swap1\n      not(0x00)\n        /* \"contracts/daostack/controller/Reputation.sol\":8088:8110  checkpoints.length - 1 */\n      dup2\n      add\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":8076:8111  checkpoints[checkpoints.length - 1] */\n      dup2\n      lt\n      tag_129\n      jumpi\n      invalid\n    tag_129:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":8076:8121  checkpoints[checkpoints.length - 1].fromBlock */\n      sload\n      sub(shl(0x80, 0x01), 0x01)\n      and\n        /* \"contracts/daostack/controller/Reputation.sol\":8076:8136  checkpoints[checkpoints.length - 1].fromBlock < block.number */\n      lt\n        /* \"contracts/daostack/controller/Reputation.sol\":8046:8137  (checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number) */\n    tag_128:\n        /* \"contracts/daostack/controller/Reputation.sol\":8042:8503  if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r... */\n      iszero\n      tag_131\n      jumpi\n        /* \"contracts/daostack/controller/Reputation.sol\":8201:8221  checkpoints.length++ */\n      dup2\n      sload\n        /* \"contracts/daostack/controller/Reputation.sol\":8154:8186  Checkpoint storage newCheckPoint */\n      0x00\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":8189:8200  checkpoints */\n      dup4\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":8201:8221  checkpoints.length++ */\n      tag_132\n        /* \"contracts/daostack/controller/Reputation.sol\":8189:8200  checkpoints */\n      dup3\n        /* \"contracts/daostack/controller/Reputation.sol\":8201:8221  checkpoints.length++ */\n      0x01\n      dup4\n      add\n      tag_133\n      jump\t// in\n    tag_132:\n        /* \"contracts/daostack/controller/Reputation.sol\":8189:8222  checkpoints[checkpoints.length++] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_134\n      jumpi\n      invalid\n    tag_134:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":8237:8284  newCheckPoint.fromBlock = uint128(block.number) */\n      dup1\n      sload\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"contracts/daostack/controller/Reputation.sol\":8299:8336  newCheckPoint.value = uint128(_value) */\n      dup5\n      dup2\n      and\n      shl(0x80, 0x01)\n      mul\n        /* \"contracts/daostack/controller/Reputation.sol\":8271:8283  block.number */\n      number\n        /* \"contracts/daostack/controller/Reputation.sol\":8237:8284  newCheckPoint.fromBlock = uint128(block.number) */\n      dup3\n      and\n      not(sub(shl(0x80, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n        /* \"contracts/daostack/controller/Reputation.sol\":8299:8336  newCheckPoint.value = uint128(_value) */\n      and\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":8042:8503  if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r... */\n      jump(tag_136)\n    tag_131:\n        /* \"contracts/daostack/controller/Reputation.sol\":8416:8434  checkpoints.length */\n      dup2\n      sload\n        /* \"contracts/daostack/controller/Reputation.sol\":8369:8401  Checkpoint storage oldCheckPoint */\n      0x00\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":8404:8415  checkpoints */\n      dup4\n      swap1\n      not(0x00)\n        /* \"contracts/daostack/controller/Reputation.sol\":8416:8438  checkpoints.length - 1 */\n      dup2\n      add\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":8404:8439  checkpoints[checkpoints.length - 1] */\n      dup2\n      lt\n      tag_137\n      jumpi\n      invalid\n    tag_137:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":8454:8491  oldCheckPoint.value = uint128(_value) */\n      dup1\n      sload\n      sub(shl(0x80, 0x01), 0x01)\n      dup1\n      dup6\n      and\n      shl(0x80, 0x01)\n      mul\n      swap2\n      and\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":8042:8503  if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\r... */\n    tag_136:\n        /* \"contracts/daostack/controller/Reputation.sol\":7857:8510  function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/daostack/controller/Reputation.sol\":6766:7633  function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\r... */\n    tag_93:\n        /* \"contracts/daostack/controller/Reputation.sol\":6883:6901  checkpoints.length */\n      dup2\n      sload\n        /* \"contracts/daostack/controller/Reputation.sol\":6859:6866  uint256 */\n      0x00\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":6879:6943  if (checkpoints.length == 0) {\r... */\n      tag_140\n      jumpi\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":6930:6931  0 */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":6923:6931  return 0 */\n      jump(tag_55)\n        /* \"contracts/daostack/controller/Reputation.sol\":6879:6943  if (checkpoints.length == 0) {\r... */\n    tag_140:\n        /* \"contracts/daostack/controller/Reputation.sol\":7023:7041  checkpoints.length */\n      dup3\n      sload\n        /* \"contracts/daostack/controller/Reputation.sol\":7011:7022  checkpoints */\n      dup4\n      swap1\n      not(0x00)\n        /* \"contracts/daostack/controller/Reputation.sol\":7023:7045  checkpoints.length - 1 */\n      dup2\n      add\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":7011:7046  checkpoints[checkpoints.length - 1] */\n      dup2\n      lt\n      tag_141\n      jumpi\n      invalid\n    tag_141:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":7011:7056  checkpoints[checkpoints.length - 1].fromBlock */\n      sload\n      sub(shl(0x80, 0x01), 0x01)\n      and\n        /* \"contracts/daostack/controller/Reputation.sol\":7001:7056  _block >= checkpoints[checkpoints.length - 1].fromBlock */\n      dup3\n      lt\n        /* \"contracts/daostack/controller/Reputation.sol\":6997:7133  if (_block >= checkpoints[checkpoints.length - 1].fromBlock) {\r... */\n      tag_143\n      jumpi\n        /* \"contracts/daostack/controller/Reputation.sol\":7092:7110  checkpoints.length */\n      dup3\n      sload\n        /* \"contracts/daostack/controller/Reputation.sol\":7080:7091  checkpoints */\n      dup4\n      swap1\n      not(0x00)\n        /* \"contracts/daostack/controller/Reputation.sol\":7092:7114  checkpoints.length - 1 */\n      dup2\n      add\n      swap1\n        /* \"contracts/daostack/controller/Reputation.sol\":7080:7115  checkpoints[checkpoints.length - 1] */\n      dup2\n      lt\n      tag_144\n      jumpi\n      invalid\n    tag_144:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":7080:7121  checkpoints[checkpoints.length - 1].value */\n      sload\n      shl(0x80, 0x01)\n      swap1\n      div\n      sub(shl(0x80, 0x01), 0x01)\n      and\n      swap1\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":7073:7121  return checkpoints[checkpoints.length - 1].value */\n      jump(tag_55)\n        /* \"contracts/daostack/controller/Reputation.sol\":6997:7133  if (_block >= checkpoints[checkpoints.length - 1].fromBlock) {\r... */\n    tag_143:\n        /* \"contracts/daostack/controller/Reputation.sol\":7156:7167  checkpoints */\n      dup3\n        /* \"contracts/daostack/controller/Reputation.sol\":7168:7169  0 */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":7156:7170  checkpoints[0] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_146\n      jumpi\n      invalid\n    tag_146:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":7156:7180  checkpoints[0].fromBlock */\n      sload\n      sub(shl(0x80, 0x01), 0x01)\n      and\n        /* \"contracts/daostack/controller/Reputation.sol\":7147:7180  _block < checkpoints[0].fromBlock */\n      dup3\n      lt\n        /* \"contracts/daostack/controller/Reputation.sol\":7143:7217  if (_block < checkpoints[0].fromBlock) {\r... */\n      iszero\n      tag_148\n      jumpi\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":7204:7205  0 */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":7197:7205  return 0 */\n      jump(tag_55)\n        /* \"contracts/daostack/controller/Reputation.sol\":7143:7217  if (_block < checkpoints[0].fromBlock) {\r... */\n    tag_148:\n        /* \"contracts/daostack/controller/Reputation.sol\":7321:7339  checkpoints.length */\n      dup3\n      sload\n        /* \"contracts/daostack/controller/Reputation.sol\":7281:7292  uint256 min */\n      0x00\n      swap1\n      not(0x00)\n        /* \"contracts/daostack/controller/Reputation.sol\":7321:7343  checkpoints.length - 1 */\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":7354:7586  while (max > min) {\r... */\n    tag_149:\n        /* \"contracts/daostack/controller/Reputation.sol\":7367:7370  min */\n      dup2\n        /* \"contracts/daostack/controller/Reputation.sol\":7361:7364  max */\n      dup2\n        /* \"contracts/daostack/controller/Reputation.sol\":7361:7370  max > min */\n      gt\n        /* \"contracts/daostack/controller/Reputation.sol\":7354:7586  while (max > min) {\r... */\n      iszero\n      tag_150\n      jumpi\n        /* \"contracts/daostack/controller/Reputation.sol\":7387:7398  uint256 mid */\n      0x00\n        /* \"contracts/daostack/controller/Reputation.sol\":7419:7420  2 */\n      0x02\n        /* \"contracts/daostack/controller/Reputation.sol\":7414:7415  1 */\n      0x01\n        /* \"contracts/daostack/controller/Reputation.sol\":7402:7411  max + min */\n      dup4\n      dup6\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":7402:7415  max + min + 1 */\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":7401:7420  (max + min + 1) / 2 */\n      div\n        /* \"contracts/daostack/controller/Reputation.sol\":7387:7420  uint256 mid = (max + min + 1) / 2 */\n      swap1\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":7469:7475  _block */\n      dup5\n        /* \"contracts/daostack/controller/Reputation.sol\":7439:7450  checkpoints */\n      dup7\n        /* \"contracts/daostack/controller/Reputation.sol\":7451:7454  mid */\n      dup3\n        /* \"contracts/daostack/controller/Reputation.sol\":7439:7455  checkpoints[mid] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_152\n      jumpi\n      invalid\n    tag_152:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":7439:7465  checkpoints[mid].fromBlock */\n      sload\n      sub(shl(0x80, 0x01), 0x01)\n      and\n        /* \"contracts/daostack/controller/Reputation.sol\":7439:7475  checkpoints[mid].fromBlock <= _block */\n      gt\n        /* \"contracts/daostack/controller/Reputation.sol\":7435:7575  if (checkpoints[mid].fromBlock <= _block) {\r... */\n      tag_154\n      jumpi\n        /* \"contracts/daostack/controller/Reputation.sol\":7502:7505  mid */\n      dup1\n        /* \"contracts/daostack/controller/Reputation.sol\":7496:7505  min = mid */\n      swap3\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":7435:7575  if (checkpoints[mid].fromBlock <= _block) {\r... */\n      jump(tag_155)\n    tag_154:\n        /* \"contracts/daostack/controller/Reputation.sol\":7558:7559  1 */\n      0x01\n        /* \"contracts/daostack/controller/Reputation.sol\":7552:7555  mid */\n      dup2\n        /* \"contracts/daostack/controller/Reputation.sol\":7552:7559  mid - 1 */\n      sub\n        /* \"contracts/daostack/controller/Reputation.sol\":7546:7559  max = mid - 1 */\n      swap2\n      pop\n        /* \"contracts/daostack/controller/Reputation.sol\":7435:7575  if (checkpoints[mid].fromBlock <= _block) {\r... */\n    tag_155:\n        /* \"contracts/daostack/controller/Reputation.sol\":7354:7586  while (max > min) {\r... */\n      pop\n      jump(tag_149)\n    tag_150:\n        /* \"contracts/daostack/controller/Reputation.sol\":7603:7614  checkpoints */\n      dup5\n        /* \"contracts/daostack/controller/Reputation.sol\":7615:7618  min */\n      dup3\n        /* \"contracts/daostack/controller/Reputation.sol\":7603:7619  checkpoints[min] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_156\n      jumpi\n      invalid\n    tag_156:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n        /* \"contracts/daostack/controller/Reputation.sol\":7603:7625  checkpoints[min].value */\n      sload\n      shl(0x80, 0x01)\n      swap1\n      div\n      sub(shl(0x80, 0x01), 0x01)\n      and\n      swap6\n        /* \"contracts/daostack/controller/Reputation.sol\":6766:7633  function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\r... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-solidity/contracts/GSN/Context.sol\":788:884  function _msgSender() internal view returns (address payable) {... */\n    tag_103:\n        /* \"openzeppelin-solidity/contracts/GSN/Context.sol\":867:877  msg.sender */\n      caller\n        /* \"openzeppelin-solidity/contracts/GSN/Context.sol\":788:884  function _msgSender() internal view returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2136:2361  function _transferOwnership(address newOwner) internal {... */\n    tag_125:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2209:2231  newOwner != address(0) */\n      dup2\n      and\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2201:2274  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_160\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_160:\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2310:2316  _owner */\n      0x00\n      dup1\n      sload\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2289:2327  OwnershipTransferred(_owner, newOwner) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup6\n      and\n      swap4\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2310:2316  _owner */\n      swap3\n      and\n      swap2\n      0x00\n      dup1\n      mload\n      0x20\n      data_9c064737b570a74c2bac5d21056d93ac53115214216cd14d4a0fc9b60be81231\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2289:2327  OwnershipTransferred(_owner, newOwner) */\n      swap2\n      log3\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2337:2343  _owner */\n      0x00\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2337:2354  _owner = newOwner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"openzeppelin-solidity/contracts/ownership/Ownable.sol\":2136:2361  function _transferOwnership(address newOwner) internal {... */\n      jump\t// out\n        /* \"contracts/daostack/controller/Reputation.sol\":678:8513  contract Reputation is Ownable {\r... */\n    tag_133:\n      dup2\n      sload\n      dup2\n      dup4\n      sstore\n      dup2\n      dup2\n      gt\n      iszero\n      tag_162\n      jumpi\n      0x00\n      dup4\n      dup2\n      mstore\n      0x20\n      swap1\n      keccak256\n      tag_162\n      swap2\n      dup2\n      add\n      swap1\n      dup4\n      add\n      tag_163\n      jump\t// in\n    tag_162:\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_163:\n      tag_74\n      swap2\n      swap1\n    tag_165:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_166\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_165)\n    tag_166:\n      pop\n      swap1\n      jump\n    stop\n    data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe 4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373\n    data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe 4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n    data_9c064737b570a74c2bac5d21056d93ac53115214216cd14d4a0fc9b60be81231 8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n    data_faef6c4eb5d567b942c0732eb539a574877571781fcfe7e88ebbcacc7e2fa7ef 0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885\n\n    auxdata: 0xa265627a7a7231582076261cec79ecb6634ff710ad46c22acf8a9daa3a2412670b7679ff1c78afdd1964736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60806040526000805460ff60a01b1916600960a11b17905561001f61006c565b600080546001600160a01b0319166001600160a01b03928316178082556040519216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610070565b3390565b610c7a8061007f6000396000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c806307ea5477146100a957806318160ddd146101e0578063313ce567146101fa57806340c10f19146102185780634ee2cd7e1461024457806370a0823114610270578063715018a6146102965780638da5cb5b146102a05780638f32d59b146102c4578063981b24d0146102cc5780639dc29fac146102e9578063f2fde38b14610315575b600080fd5b6101cc600480360360408110156100bf57600080fd5b810190602081018135600160201b8111156100d957600080fd5b8201836020820111156100eb57600080fd5b803590602001918460208302840111600160201b8311171561010c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561015b57600080fd5b82018360208201111561016d57600080fd5b803590602001918460208302840111600160201b8311171561018e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061033b945050505050565b604080519115158252519081900360200190f35b6101e86104e1565b60408051918252519081900360200190f35b6102026104f2565b6040805160ff9092168252519081900360200190f35b6101cc6004803603604081101561022e57600080fd5b506001600160a01b038135169060200135610502565b6101e86004803603604081101561025a57600080fd5b506001600160a01b0381351690602001356105eb565b6101e86004803603602081101561028657600080fd5b50356001600160a01b031661067b565b61029e61068f565b005b6102a861070e565b604080516001600160a01b039092168252519081900360200190f35b6101cc61071d565b6101e8600480360360208110156102e257600080fd5b5035610741565b6101cc600480360360408110156102ff57600080fd5b506001600160a01b038135169060200135610793565b61029e6004803603602081101561032b57600080fd5b50356001600160a01b031661087e565b600061034561071d565b610384576040805162461bcd60e51b81526020600482018190526024820152600080516020610be6833981519152604482015290519081900360640190fd5b60005b83518110156104d557600061039a6104e1565b9050808483815181106103a957fe5b6020026020010151820110156103be57600080fd5b60006103dc8684815181106103cf57fe5b602002602001015161067b565b9050808584815181106103eb57fe5b60200260200101518201101561040057600080fd5b610420600286858151811061041157fe5b602002602001015184016108d1565b6104766001600088868151811061043357fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002086858151811061046757fe5b602002602001015183016108d1565b85838151811061048257fe5b60200260200101516001600160a01b0316600080516020610c268339815191528685815181106104ae57fe5b60200260200101516040518082815260200191505060405180910390a25050600101610387565b50600190505b92915050565b60006104ec43610741565b90505b90565b600054600160a01b900460ff1681565b600061050c61071d565b61054b576040805162461bcd60e51b81526020600482018190526024820152600080516020610be6833981519152604482015290519081900360640190fd5b60006105556104e1565b905080838201101561056657600080fd5b60006105718561067b565b905080848201101561058257600080fd5b61058f60028584016108d1565b6001600160a01b03851660009081526001602052604090206105b3908286016108d1565b6040805185815290516001600160a01b03871691600080516020610c26833981519152919081900360200190a2506001949350505050565b6001600160a01b038216600090815260016020526040812054158061064557506001600160a01b0383166000908152600160205260408120805484929061062e57fe5b6000918252602090912001546001600160801b0316115b15610652575060006104db565b6001600160a01b038316600090815260016020526040902061067490836109b6565b90506104db565b600061068782436105eb565b90505b919050565b61069761071d565b6106d6576040805162461bcd60e51b81526020600482018190526024820152600080516020610be6833981519152604482015290519081900360640190fd5b600080546040516001600160a01b0390911690600080516020610c06833981519152908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b600080546001600160a01b0316610732610ae6565b6001600160a01b031614905090565b6002546000901580610774575081600260008154811061075d57fe5b6000918252602090912001546001600160801b0316115b156107815750600061068a565b61078c6002836109b6565b905061068a565b600061079d61071d565b6107dc576040805162461bcd60e51b81526020600482018190526024820152600080516020610be6833981519152604482015290519081900360640190fd5b60006107e66104e1565b90508260006107f48661067b565b905081811015610802578091505b61080f60028385036108d1565b6001600160a01b0386166000908152600160205260409020610833908383036108d1565b6040805183815290516001600160a01b038816917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600195945050505050565b61088661071d565b6108c5576040805162461bcd60e51b81526020600482018190526024820152600080516020610be6833981519152604482015290519081900360640190fd5b6108ce81610aea565b50565b80816001600160801b0316146108e657600080fd5b8154158061091a5750815443908390600019810190811061090357fe5b6000918252602090912001546001600160801b0316105b1561097857815460009083906109338260018301610b78565b8154811061093d57fe5b600091825260209091200180546001600160801b03848116600160801b024382166001600160801b03199093169290921716179055506109b2565b81546000908390600019810190811061098d57fe5b600091825260209091200180546001600160801b03808516600160801b029116179055505b5050565b81546000906109c7575060006104db565b8254839060001981019081106109d957fe5b6000918252602090912001546001600160801b03168210610a2957825483906000198101908110610a0657fe5b600091825260209091200154600160801b90046001600160801b031690506104db565b82600081548110610a3657fe5b6000918252602090912001546001600160801b0316821015610a5a575060006104db565b8254600090600019015b81811115610ab5576000600260018385010104905084868281548110610a8657fe5b6000918252602090912001546001600160801b031611610aa857809250610aaf565b6001810391505b50610a64565b848281548110610ac157fe5b600091825260209091200154600160801b90046001600160801b031695945050505050565b3390565b6001600160a01b038116610b2f5760405162461bcd60e51b8152600401808060200182810382526026815260200180610bc06026913960400191505060405180910390fd5b600080546040516001600160a01b0380851693921691600080516020610c0683398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b815481835581811115610b9c57600083815260209020610b9c918101908301610ba1565b505050565b6104ef91905b80821115610bbb5760008155600101610ba7565b509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e00f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885a265627a7a7231582076261cec79ecb6634ff710ad46c22acf8a9daa3a2412670b7679ff1c78afdd1964736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x9 PUSH1 0xA1 SHL OR SWAP1 SSTORE PUSH2 0x1F PUSH2 0x6C JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR DUP1 DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 PUSH2 0x70 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH2 0xC7A DUP1 PUSH2 0x7F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7EA5477 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x4EE2CD7E EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x981B24D0 EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x9DC29FAC EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x315 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x16D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x33B SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1E8 PUSH2 0x4E1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x202 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x502 JUMP JUMPDEST PUSH2 0x1E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x25A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x5EB JUMP JUMPDEST PUSH2 0x1E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x67B JUMP JUMPDEST PUSH2 0x29E PUSH2 0x68F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A8 PUSH2 0x70E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1CC PUSH2 0x71D JUMP JUMPDEST PUSH2 0x1E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x741 JUMP JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x29E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x87E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x345 PUSH2 0x71D JUMP JUMPDEST PUSH2 0x384 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xBE6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 PUSH2 0x39A PUSH2 0x4E1 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 ADD LT ISZERO PUSH2 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3DC DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3CF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x67B JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 ADD LT ISZERO PUSH2 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x420 PUSH1 0x2 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x411 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 ADD PUSH2 0x8D1 JUMP JUMPDEST PUSH2 0x476 PUSH1 0x1 PUSH1 0x0 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x433 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x467 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 ADD PUSH2 0x8D1 JUMP JUMPDEST DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x482 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xC26 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4AE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 ADD PUSH2 0x387 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4EC NUMBER PUSH2 0x741 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50C PUSH2 0x71D JUMP JUMPDEST PUSH2 0x54B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xBE6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x555 PUSH2 0x4E1 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 ADD LT ISZERO PUSH2 0x566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x571 DUP6 PUSH2 0x67B JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP3 ADD LT ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x58F PUSH1 0x2 DUP6 DUP5 ADD PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x5B3 SWAP1 DUP3 DUP7 ADD PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xC26 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO DUP1 PUSH2 0x645 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x62E JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT JUMPDEST ISZERO PUSH2 0x652 JUMPI POP PUSH1 0x0 PUSH2 0x4DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x674 SWAP1 DUP4 PUSH2 0x9B6 JUMP JUMPDEST SWAP1 POP PUSH2 0x4DB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x687 DUP3 NUMBER PUSH2 0x5EB JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x697 PUSH2 0x71D JUMP JUMPDEST PUSH2 0x6D6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xBE6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xC06 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x732 PUSH2 0xAE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 ISZERO DUP1 PUSH2 0x774 JUMPI POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x75D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT JUMPDEST ISZERO PUSH2 0x781 JUMPI POP PUSH1 0x0 PUSH2 0x68A JUMP JUMPDEST PUSH2 0x78C PUSH1 0x2 DUP4 PUSH2 0x9B6 JUMP JUMPDEST SWAP1 POP PUSH2 0x68A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x79D PUSH2 0x71D JUMP JUMPDEST PUSH2 0x7DC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xBE6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH2 0x4E1 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x0 PUSH2 0x7F4 DUP7 PUSH2 0x67B JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x802 JUMPI DUP1 SWAP2 POP JUMPDEST PUSH2 0x80F PUSH1 0x2 DUP4 DUP6 SUB PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x833 SWAP1 DUP4 DUP4 SUB PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH32 0xCC16F5DBB4873280815C1EE09DBD06736CFFCC184412CF7A71A0FDB75D397CA5 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP PUSH1 0x1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x886 PUSH2 0x71D JUMP JUMPDEST PUSH2 0x8C5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xBE6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x8CE DUP2 PUSH2 0xAEA JUMP JUMPDEST POP JUMP JUMPDEST DUP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND EQ PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 SLOAD ISZERO DUP1 PUSH2 0x91A JUMPI POP DUP2 SLOAD NUMBER SWAP1 DUP4 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x903 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT JUMPDEST ISZERO PUSH2 0x978 JUMPI DUP2 SLOAD PUSH1 0x0 SWAP1 DUP4 SWAP1 PUSH2 0x933 DUP3 PUSH1 0x1 DUP4 ADD PUSH2 0xB78 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x93D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x80 SHL MUL NUMBER DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR AND OR SWAP1 SSTORE POP PUSH2 0x9B2 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP4 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x98D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP6 AND PUSH1 0x1 PUSH1 0x80 SHL MUL SWAP2 AND OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x9C7 JUMPI POP PUSH1 0x0 PUSH2 0x4DB JUMP JUMPDEST DUP3 SLOAD DUP4 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x9D9 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 LT PUSH2 0xA29 JUMPI DUP3 SLOAD DUP4 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0xA06 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 POP PUSH2 0x4DB JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0xA36 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 LT ISZERO PUSH2 0xA5A JUMPI POP PUSH1 0x0 PUSH2 0x4DB JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x0 NOT ADD JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xAB5 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 DUP4 DUP6 ADD ADD DIV SWAP1 POP DUP5 DUP7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xA86 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0xAA8 JUMPI DUP1 SWAP3 POP PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x1 DUP2 SUB SWAP2 POP JUMPDEST POP PUSH2 0xA64 JUMP JUMPDEST DUP5 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xAC1 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xBC0 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xC06 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 0xB9C JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH2 0xB9C SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 0xBA1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x4EF SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xBBB JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xBA7 JUMP JUMPDEST POP SWAP1 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F20616464726573734F776E61626C653A2063616C6C657220 PUSH10 0x73206E6F742074686520 PUSH16 0x776E65728BE0079C531659141344CD1F 0xD0 LOG4 CALLCODE DUP5 NOT 0x49 PUSH32 0x9722A3DAAFE3B4186F6B6457E00F6798A560793A54C3BCFE86A93CDE1E73087D SWAP5 0x4C 0xE LOG2 SDIV DIFFICULTY SGT PUSH30 0x4121396885A265627A7A7231582076261CEC79ECB6634FF710AD46C22ACF DUP11 SWAP14 0xAA GASPRICE 0x24 SLT PUSH8 0xB7679FF1C78AFDD NOT PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "678:7835:0:-;;;716:26;;;-1:-1:-1;;;;716:26:0;-1:-1:-1;;;716:26:0;;;707:12:2;:10;:12::i;:::-;698:6;:21;;-1:-1:-1;;;;;;698:21:2;-1:-1:-1;;;;;698:21:2;;;;;;;734:40;;767:6;;;734:40;;698:6;;734:40;678:7835:0;;788:96:1;867:10;788:96;:::o;678:7835:0:-;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a45760003560e01c806307ea5477146100a957806318160ddd146101e0578063313ce567146101fa57806340c10f19146102185780634ee2cd7e1461024457806370a0823114610270578063715018a6146102965780638da5cb5b146102a05780638f32d59b146102c4578063981b24d0146102cc5780639dc29fac146102e9578063f2fde38b14610315575b600080fd5b6101cc600480360360408110156100bf57600080fd5b810190602081018135600160201b8111156100d957600080fd5b8201836020820111156100eb57600080fd5b803590602001918460208302840111600160201b8311171561010c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561015b57600080fd5b82018360208201111561016d57600080fd5b803590602001918460208302840111600160201b8311171561018e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061033b945050505050565b604080519115158252519081900360200190f35b6101e86104e1565b60408051918252519081900360200190f35b6102026104f2565b6040805160ff9092168252519081900360200190f35b6101cc6004803603604081101561022e57600080fd5b506001600160a01b038135169060200135610502565b6101e86004803603604081101561025a57600080fd5b506001600160a01b0381351690602001356105eb565b6101e86004803603602081101561028657600080fd5b50356001600160a01b031661067b565b61029e61068f565b005b6102a861070e565b604080516001600160a01b039092168252519081900360200190f35b6101cc61071d565b6101e8600480360360208110156102e257600080fd5b5035610741565b6101cc600480360360408110156102ff57600080fd5b506001600160a01b038135169060200135610793565b61029e6004803603602081101561032b57600080fd5b50356001600160a01b031661087e565b600061034561071d565b610384576040805162461bcd60e51b81526020600482018190526024820152600080516020610be6833981519152604482015290519081900360640190fd5b60005b83518110156104d557600061039a6104e1565b9050808483815181106103a957fe5b6020026020010151820110156103be57600080fd5b60006103dc8684815181106103cf57fe5b602002602001015161067b565b9050808584815181106103eb57fe5b60200260200101518201101561040057600080fd5b610420600286858151811061041157fe5b602002602001015184016108d1565b6104766001600088868151811061043357fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002086858151811061046757fe5b602002602001015183016108d1565b85838151811061048257fe5b60200260200101516001600160a01b0316600080516020610c268339815191528685815181106104ae57fe5b60200260200101516040518082815260200191505060405180910390a25050600101610387565b50600190505b92915050565b60006104ec43610741565b90505b90565b600054600160a01b900460ff1681565b600061050c61071d565b61054b576040805162461bcd60e51b81526020600482018190526024820152600080516020610be6833981519152604482015290519081900360640190fd5b60006105556104e1565b905080838201101561056657600080fd5b60006105718561067b565b905080848201101561058257600080fd5b61058f60028584016108d1565b6001600160a01b03851660009081526001602052604090206105b3908286016108d1565b6040805185815290516001600160a01b03871691600080516020610c26833981519152919081900360200190a2506001949350505050565b6001600160a01b038216600090815260016020526040812054158061064557506001600160a01b0383166000908152600160205260408120805484929061062e57fe5b6000918252602090912001546001600160801b0316115b15610652575060006104db565b6001600160a01b038316600090815260016020526040902061067490836109b6565b90506104db565b600061068782436105eb565b90505b919050565b61069761071d565b6106d6576040805162461bcd60e51b81526020600482018190526024820152600080516020610be6833981519152604482015290519081900360640190fd5b600080546040516001600160a01b0390911690600080516020610c06833981519152908390a3600080546001600160a01b0319169055565b6000546001600160a01b031690565b600080546001600160a01b0316610732610ae6565b6001600160a01b031614905090565b6002546000901580610774575081600260008154811061075d57fe5b6000918252602090912001546001600160801b0316115b156107815750600061068a565b61078c6002836109b6565b905061068a565b600061079d61071d565b6107dc576040805162461bcd60e51b81526020600482018190526024820152600080516020610be6833981519152604482015290519081900360640190fd5b60006107e66104e1565b90508260006107f48661067b565b905081811015610802578091505b61080f60028385036108d1565b6001600160a01b0386166000908152600160205260409020610833908383036108d1565b6040805183815290516001600160a01b038816917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600195945050505050565b61088661071d565b6108c5576040805162461bcd60e51b81526020600482018190526024820152600080516020610be6833981519152604482015290519081900360640190fd5b6108ce81610aea565b50565b80816001600160801b0316146108e657600080fd5b8154158061091a5750815443908390600019810190811061090357fe5b6000918252602090912001546001600160801b0316105b1561097857815460009083906109338260018301610b78565b8154811061093d57fe5b600091825260209091200180546001600160801b03848116600160801b024382166001600160801b03199093169290921716179055506109b2565b81546000908390600019810190811061098d57fe5b600091825260209091200180546001600160801b03808516600160801b029116179055505b5050565b81546000906109c7575060006104db565b8254839060001981019081106109d957fe5b6000918252602090912001546001600160801b03168210610a2957825483906000198101908110610a0657fe5b600091825260209091200154600160801b90046001600160801b031690506104db565b82600081548110610a3657fe5b6000918252602090912001546001600160801b0316821015610a5a575060006104db565b8254600090600019015b81811115610ab5576000600260018385010104905084868281548110610a8657fe5b6000918252602090912001546001600160801b031611610aa857809250610aaf565b6001810391505b50610a64565b848281548110610ac157fe5b600091825260209091200154600160801b90046001600160801b031695945050505050565b3390565b6001600160a01b038116610b2f5760405162461bcd60e51b8152600401808060200182810382526026815260200180610bc06026913960400191505060405180910390fd5b600080546040516001600160a01b0380851693921691600080516020610c0683398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b815481835581811115610b9c57600083815260209020610b9c918101908301610ba1565b505050565b6104ef91905b80821115610bbb5760008155600101610ba7565b509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e00f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885a265627a7a7231582076261cec79ecb6634ff710ad46c22acf8a9daa3a2412670b7679ff1c78afdd1964736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7EA5477 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x4EE2CD7E EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x981B24D0 EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x9DC29FAC EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x315 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 SWAP5 SWAP4 PUSH1 0x20 DUP2 ADD SWAP4 POP CALLDATALOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x20 SHL DUP2 GT ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x16D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH1 0x1 PUSH1 0x20 SHL DUP4 GT OR ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP6 POP PUSH2 0x33B SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1E8 PUSH2 0x4E1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x202 PUSH2 0x4F2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x502 JUMP JUMPDEST PUSH2 0x1E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x25A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x5EB JUMP JUMPDEST PUSH2 0x1E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x67B JUMP JUMPDEST PUSH2 0x29E PUSH2 0x68F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A8 PUSH2 0x70E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1CC PUSH2 0x71D JUMP JUMPDEST PUSH2 0x1E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x741 JUMP JUMPDEST PUSH2 0x1CC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x793 JUMP JUMPDEST PUSH2 0x29E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x87E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x345 PUSH2 0x71D JUMP JUMPDEST PUSH2 0x384 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xBE6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x4D5 JUMPI PUSH1 0x0 PUSH2 0x39A PUSH2 0x4E1 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 ADD LT ISZERO PUSH2 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3DC DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3CF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x67B JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 ADD LT ISZERO PUSH2 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x420 PUSH1 0x2 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x411 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 ADD PUSH2 0x8D1 JUMP JUMPDEST PUSH2 0x476 PUSH1 0x1 PUSH1 0x0 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x433 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x467 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 ADD PUSH2 0x8D1 JUMP JUMPDEST DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x482 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xC26 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4AE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 ADD PUSH2 0x387 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4EC NUMBER PUSH2 0x741 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50C PUSH2 0x71D JUMP JUMPDEST PUSH2 0x54B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xBE6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x555 PUSH2 0x4E1 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 ADD LT ISZERO PUSH2 0x566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x571 DUP6 PUSH2 0x67B JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP3 ADD LT ISZERO PUSH2 0x582 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x58F PUSH1 0x2 DUP6 DUP5 ADD PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x5B3 SWAP1 DUP3 DUP7 ADD PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xC26 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO DUP1 PUSH2 0x645 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x62E JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT JUMPDEST ISZERO PUSH2 0x652 JUMPI POP PUSH1 0x0 PUSH2 0x4DB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x674 SWAP1 DUP4 PUSH2 0x9B6 JUMP JUMPDEST SWAP1 POP PUSH2 0x4DB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x687 DUP3 NUMBER PUSH2 0x5EB JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x697 PUSH2 0x71D JUMP JUMPDEST PUSH2 0x6D6 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xBE6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xC06 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x732 PUSH2 0xAE6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP1 ISZERO DUP1 PUSH2 0x774 JUMPI POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x75D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT JUMPDEST ISZERO PUSH2 0x781 JUMPI POP PUSH1 0x0 PUSH2 0x68A JUMP JUMPDEST PUSH2 0x78C PUSH1 0x2 DUP4 PUSH2 0x9B6 JUMP JUMPDEST SWAP1 POP PUSH2 0x68A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x79D PUSH2 0x71D JUMP JUMPDEST PUSH2 0x7DC JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xBE6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH2 0x4E1 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x0 PUSH2 0x7F4 DUP7 PUSH2 0x67B JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x802 JUMPI DUP1 SWAP2 POP JUMPDEST PUSH2 0x80F PUSH1 0x2 DUP4 DUP6 SUB PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x833 SWAP1 DUP4 DUP4 SUB PUSH2 0x8D1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 PUSH32 0xCC16F5DBB4873280815C1EE09DBD06736CFFCC184412CF7A71A0FDB75D397CA5 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP PUSH1 0x1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x886 PUSH2 0x71D JUMP JUMPDEST PUSH2 0x8C5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xBE6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x8CE DUP2 PUSH2 0xAEA JUMP JUMPDEST POP JUMP JUMPDEST DUP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND EQ PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 SLOAD ISZERO DUP1 PUSH2 0x91A JUMPI POP DUP2 SLOAD NUMBER SWAP1 DUP4 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x903 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT JUMPDEST ISZERO PUSH2 0x978 JUMPI DUP2 SLOAD PUSH1 0x0 SWAP1 DUP4 SWAP1 PUSH2 0x933 DUP3 PUSH1 0x1 DUP4 ADD PUSH2 0xB78 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x93D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x80 SHL MUL NUMBER DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR AND OR SWAP1 SSTORE POP PUSH2 0x9B2 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 DUP4 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x98D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP6 AND PUSH1 0x1 PUSH1 0x80 SHL MUL SWAP2 AND OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x9C7 JUMPI POP PUSH1 0x0 PUSH2 0x4DB JUMP JUMPDEST DUP3 SLOAD DUP4 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x9D9 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 LT PUSH2 0xA29 JUMPI DUP3 SLOAD DUP4 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0xA06 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 POP PUSH2 0x4DB JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0xA36 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 LT ISZERO PUSH2 0xA5A JUMPI POP PUSH1 0x0 PUSH2 0x4DB JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x0 NOT ADD JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xAB5 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 DUP4 DUP6 ADD ADD DIV SWAP1 POP DUP5 DUP7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xA86 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND GT PUSH2 0xAA8 JUMPI DUP1 SWAP3 POP PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x1 DUP2 SUB SWAP2 POP JUMPDEST POP PUSH2 0xA64 JUMP JUMPDEST DUP5 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xAC1 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xBC0 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0xC06 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 0xB9C JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH2 0xB9C SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 0xBA1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x4EF SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xBBB JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xBA7 JUMP JUMPDEST POP SWAP1 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F20616464726573734F776E61626C653A2063616C6C657220 PUSH10 0x73206E6F742074686520 PUSH16 0x776E65728BE0079C531659141344CD1F 0xD0 LOG4 CALLCODE DUP5 NOT 0x49 PUSH32 0x9722A3DAAFE3B4186F6B6457E00F6798A560793A54C3BCFE86A93CDE1E73087D SWAP5 0x4C 0xE LOG2 SDIV DIFFICULTY SGT PUSH30 0x4121396885A265627A7A7231582076261CEC79ECB6634FF710AD46C22ACF DUP11 SWAP14 0xAA GASPRICE 0x24 SLT PUSH8 0xB7679FF1C78AFDD NOT PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "678:7835:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;678:7835:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2939:711;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2939:711:0;;;;;;;;-1:-1:-1;;;5:28;;2:2;;;46:1;43;36:12;2:2;2939:711:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2939:711:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;-1:-1;;;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;2939:711:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;2939:711:0;;;;;;;;-1:-1:-1;2939:711:0;;-1:-1:-1;;;;;5:28;;2:2;;;46:1;43;36:12;2:2;2939:711:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2939:711:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;-1:-1;;;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;2939:711:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;2939:711:0;;-1:-1:-1;2939:711:0;;-1:-1:-1;;;;;2939:711:0:i;:::-;;;;;;;;;;;;;;;;;;4595:106;;;:::i;:::-;;;;;;;;;;;;;;;;716:26;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2089:568;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2089:568:0;;;;;;;;:::i;5977:389::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5977:389:0;;;;;;;;:::i;4961:132::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4961:132:0;-1:-1:-1;;;;;4961:132:0;;:::i;1642:137:2:-;;;:::i;:::-;;857:77;;;:::i;:::-;;;;-1:-1:-1;;;;;857:77:2;;;;;;;;;;;;;;1208:92;;;:::i;5316:385:0:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5316:385:0;;:::i;3896:565::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3896:565:0;;;;;;;;:::i;1928:107:2:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1928:107:2;-1:-1:-1;;;;;1928:107:2;;:::i;2939:711:0:-;3037:4;1061:9:2;:7;:9::i;:::-;1053:54;;;;;-1:-1:-1;;;1053:54:2;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1053:54:2;;;;;;;;;;;;;;;3059:9:0;3054:567;3078:5;:12;3074:1;:16;3054:567;;;3112:22;3137:13;:11;:13::i;:::-;3112:38;;3204:14;3190:7;3198:1;3190:10;;;;;;;;;;;;;;3173:14;:27;:45;;3165:54;;;;;;3256:25;3284:19;3294:5;3300:1;3294:8;;;;;;;;;;;;;;3284:9;:19::i;:::-;3256:47;;3360:17;3346:7;3354:1;3346:10;;;;;;;;;;;;;;3326:17;:30;:51;;3318:60;;;;;;3415:65;3432:18;3469:7;3477:1;3469:10;;;;;;;;;;;;;;3452:14;:27;3415:16;:65::i;:::-;3495:68;3512:8;:18;3521:5;3527:1;3521:8;;;;;;;;;;;;;;-1:-1:-1;;;;;3512:18:0;-1:-1:-1;;;;;3512:18:0;;;;;;;;;;;;3552:7;3560:1;3552:10;;;;;;;;;;;;;;3532:17;:30;3495:16;:68::i;:::-;3588:5;3594:1;3588:8;;;;;;;;;;;;;;-1:-1:-1;;;;;3583:26:0;-1:-1:-1;;;;;;;;;;;3598:7:0;3606:1;3598:10;;;;;;;;;;;;;;3583:26;;;;;;;;;;;;;;;;;;-1:-1:-1;;3092:3:0;;3054:567;;;;3638:4;3631:11;;1117:1:2;2939:711:0;;;;:::o;4595:106::-;4639:7;4666:27;4680:12;4666:13;:27::i;:::-;4659:34;;4595:106;;:::o;716:26::-;;;-1:-1:-1;;;716:26:0;;;;;:::o;2089:568::-;2161:4;1061:9:2;:7;:9::i;:::-;1053:54;;;;;-1:-1:-1;;;1053:54:2;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1053:54:2;;;;;;;;;;;;;;;2178:22:0;2203:13;:11;:13::i;:::-;2178:38;;2263:14;2252:7;2235:14;:24;:42;;2227:51;;;;;;2311:25;2339:16;2349:5;2339:9;:16::i;:::-;2311:44;;2405:17;2394:7;2374:17;:27;:48;;2366:57;;;;;;2456:62;2473:18;2510:7;2493:14;:24;2456:16;:62::i;:::-;-1:-1:-1;;;;;2546:15:0;;;;;;:8;:15;;;;;2529:62;;2563:27;;;2529:16;:62::i;:::-;2607:20;;;;;;;;-1:-1:-1;;;;;2607:20:0;;;-1:-1:-1;;;;;;;;;;;2607:20:0;;;;;;;;;-1:-1:-1;2645:4:0;;2089:568;-1:-1:-1;;;;2089:568:0:o;5977:389::-;-1:-1:-1;;;;;6082:16:0;;6057:7;6082:16;;;:8;:16;;;;;:23;:28;;6081:80;;-1:-1:-1;;;;;;6116:16:0;;;;;;:8;:16;;;;;:19;;6148:12;;6116:16;:19;;;;;;;;;;;;;:29;-1:-1:-1;;;;;6116:29:0;:44;6081:80;6077:282;;;-1:-1:-1;6185:1:0;6178:8;;6077:282;-1:-1:-1;;;;;6316:16:0;;;;;;:8;:16;;;;;6305:42;;6334:12;6305:10;:42::i;:::-;6298:49;;;;4961:132;5017:15;5052:33;5064:6;5072:12;5052:11;:33::i;:::-;5045:40;;4961:132;;;;:::o;1642:137:2:-;1061:9;:7;:9::i;:::-;1053:54;;;;;-1:-1:-1;;;1053:54:2;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1053:54:2;;;;;;;;;;;;;;;1740:1;1724:6;;1703:40;;-1:-1:-1;;;;;1724:6:2;;;;-1:-1:-1;;;;;;;;;;;1703:40:2;1740:1;;1703:40;1770:1;1753:19;;-1:-1:-1;;;;;;1753:19:2;;;1642:137::o;857:77::-;895:7;921:6;-1:-1:-1;;;;;921:6:2;857:77;:::o;1208:92::-;1248:4;1287:6;;-1:-1:-1;;;;;1287:6:2;1271:12;:10;:12::i;:::-;-1:-1:-1;;;;;1271:22:2;;1264:29;;1208:92;:::o;5316:385:0:-;5407:18;:25;5382:7;;5407:30;;5406:84;;;5477:12;5443:18;5462:1;5443:21;;;;;;;;;;;;;;;;;:31;-1:-1:-1;;;;;5443:31:0;:46;5406:84;5402:292;;;-1:-1:-1;5514:1:0;5507:8;;5402:292;5638:44;5649:18;5669:12;5638:10;:44::i;:::-;5631:51;;;;3896:565;3968:4;1061:9:2;:7;:9::i;:::-;1053:54;;;;;-1:-1:-1;;;1053:54:2;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1053:54:2;;;;;;;;;;;;;;;3985:22:0;4010:13;:11;:13::i;:::-;3985:38;-1:-1:-1;4057:7:0;4034:20;4105:16;4115:5;4105:9;:16::i;:::-;4075:46;;4158:12;4136:19;:34;4132:101;;;4202:19;4187:34;;4132:101;4243:67;4260:18;4297:12;4280:14;:29;4243:16;:67::i;:::-;-1:-1:-1;;;;;4338:15:0;;;;;;:8;:15;;;;;4321:69;;4355:34;;;4321:16;:69::i;:::-;4406:25;;;;;;;;-1:-1:-1;;;;;4406:25:0;;;;;;;;;;;;;-1:-1:-1;4449:4:0;;3896:565;-1:-1:-1;;;;;3896:565:0:o;1928:107:2:-;1061:9;:7;:9::i;:::-;1053:54;;;;;-1:-1:-1;;;1053:54:2;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1053:54:2;;;;;;;;;;;;;;;2000:28;2019:8;2000:18;:28::i;:::-;1928:107;:::o;7857:653:0:-;7980:6;7969;-1:-1:-1;;;;;7961:25:0;;7953:34;;;;;;8047:18;;:23;;8046:91;;-1:-1:-1;8088:18:0;;8124:12;;8076:11;;-1:-1:-1;;8088:22:0;;;8076:35;;;;;;;;;;;;;;;:45;-1:-1:-1;;;;;8076:45:0;:60;8046:91;8042:461;;;8201:20;;8154:32;;8189:11;;8201:20;8189:11;8201:20;;;;:::i;:::-;8189:33;;;;;;;;;;;;;;;;;8237:47;;-1:-1:-1;;;;;8299:37:0;;;-1:-1:-1;;;8299:37:0;8271:12;8237:47;;-1:-1:-1;;;;;;8237:47:0;;;;;;;8299:37;;;;-1:-1:-1;8042:461:0;;;8416:18;;8369:32;;8404:11;;-1:-1:-1;;8416:22:0;;;8404:35;;;;;;;;;;;;;;;8454:37;;-1:-1:-1;;;;;8454:37:0;;;-1:-1:-1;;;8454:37:0;;;;;;-1:-1:-1;8042:461:0;7857:653;;:::o;6766:867::-;6883:18;;6859:7;;6879:64;;-1:-1:-1;6930:1:0;6923:8;;6879:64;7023:18;;7011:11;;-1:-1:-1;;7023:22:0;;;7011:35;;;;;;;;;;;;;;;:45;-1:-1:-1;;;;;7011:45:0;7001:55;;6997:136;;7092:18;;7080:11;;-1:-1:-1;;7092:22:0;;;7080:35;;;;;;;;;;;;;;;:41;-1:-1:-1;;;7080:41:0;;-1:-1:-1;;;;;7080:41:0;;-1:-1:-1;7073:48:0;;6997:136;7156:11;7168:1;7156:14;;;;;;;;;;;;;;;;;:24;-1:-1:-1;;;;;7156:24:0;7147:33;;7143:74;;;-1:-1:-1;7204:1:0;7197:8;;7143:74;7321:18;;7281:11;;-1:-1:-1;;7321:22:0;7354:232;7367:3;7361;:9;7354:232;;;7387:11;7419:1;7414;7402:9;;;:13;7401:19;7387:33;;7469:6;7439:11;7451:3;7439:16;;;;;;;;;;;;;;;;;:26;-1:-1:-1;;;;;7439:26:0;:36;7435:140;;7502:3;7496:9;;7435:140;;;7558:1;7552:3;:7;7546:13;;7435:140;7354:232;;;;7603:11;7615:3;7603:16;;;;;;;;;;;;;;;;;:22;-1:-1:-1;;;7603:22:0;;-1:-1:-1;;;;;7603:22:0;;6766:867;-1:-1:-1;;;;;6766:867:0:o;788:96:1:-;867:10;788:96;:::o;2136:225:2:-;-1:-1:-1;;;;;2209:22:2;;2201:73;;;;-1:-1:-1;;;2201:73:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2310:6;;;2289:38;;-1:-1:-1;;;;;2289:38:2;;;;2310:6;;;-1:-1:-1;;;;;;;;;;;2289:38:2;;2337:6;:17;;-1:-1:-1;;;;;;2337:17:2;-1:-1:-1;;;;;2337:17:2;;;;;;;;;;2136:225::o;678:7835:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "638800",
								"executionCost": "43910",
								"totalCost": "682710"
							},
							"external": {
								"balanceOf(address)": "infinite",
								"balanceOfAt(address,uint256)": "infinite",
								"burn(address,uint256)": "infinite",
								"decimals()": "1052",
								"isOwner()": "1234",
								"mint(address,uint256)": "infinite",
								"mintMultiple(address[],uint256[])": "infinite",
								"owner()": "1169",
								"renounceOwnership()": "infinite",
								"totalSupply()": "infinite",
								"totalSupplyAt(uint256)": "infinite",
								"transferOwnership(address)": "infinite"
							},
							"internal": {
								"getValueAt(struct Reputation.Checkpoint storage ref[] storage pointer,uint256)": "infinite",
								"updateValueAtNow(struct Reputation.Checkpoint storage ref[] storage pointer,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 678,
									"end": 8513,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "MSTORE"
								},
								{
									"begin": 716,
									"end": 742,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 716,
									"end": 742,
									"name": "DUP1"
								},
								{
									"begin": 716,
									"end": 742,
									"name": "SLOAD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT"
								},
								{
									"begin": 716,
									"end": 742,
									"name": "AND"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "A1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL"
								},
								{
									"begin": 716,
									"end": 742,
									"name": "OR"
								},
								{
									"begin": 716,
									"end": 742,
									"name": "SWAP1"
								},
								{
									"begin": 716,
									"end": 742,
									"name": "SSTORE"
								},
								{
									"begin": 707,
									"end": 719,
									"name": "PUSH [tag]",
									"value": "5"
								},
								{
									"begin": 707,
									"end": 717,
									"name": "PUSH [tag]",
									"value": "6"
								},
								{
									"begin": 707,
									"end": 719,
									"name": "JUMP",
									"value": "[in]"
								},
								{
									"begin": 707,
									"end": 719,
									"name": "tag",
									"value": "5"
								},
								{
									"begin": 707,
									"end": 719,
									"name": "JUMPDEST"
								},
								{
									"begin": 698,
									"end": 704,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 698,
									"end": 719,
									"name": "DUP1"
								},
								{
									"begin": 698,
									"end": 719,
									"name": "SLOAD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT"
								},
								{
									"begin": 698,
									"end": 719,
									"name": "AND"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB"
								},
								{
									"begin": 698,
									"end": 719,
									"name": "SWAP3"
								},
								{
									"begin": 698,
									"end": 719,
									"name": "DUP4"
								},
								{
									"begin": 698,
									"end": 719,
									"name": "AND"
								},
								{
									"begin": 698,
									"end": 719,
									"name": "OR"
								},
								{
									"begin": 698,
									"end": 719,
									"name": "DUP1"
								},
								{
									"begin": 698,
									"end": 719,
									"name": "DUP3"
								},
								{
									"begin": 698,
									"end": 719,
									"name": "SSTORE"
								},
								{
									"begin": 734,
									"end": 774,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 734,
									"end": 774,
									"name": "MLOAD"
								},
								{
									"begin": 767,
									"end": 773,
									"name": "SWAP3"
								},
								{
									"begin": 767,
									"end": 773,
									"name": "AND"
								},
								{
									"begin": 767,
									"end": 773,
									"name": "SWAP2"
								},
								{
									"begin": 734,
									"end": 774,
									"name": "PUSH",
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 734,
									"end": 774,
									"name": "SWAP1"
								},
								{
									"begin": 698,
									"end": 704,
									"name": "DUP3"
								},
								{
									"begin": 698,
									"end": 704,
									"name": "SWAP1"
								},
								{
									"begin": 734,
									"end": 774,
									"name": "LOG3"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "PUSH [tag]",
									"value": "7"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "JUMP"
								},
								{
									"begin": 788,
									"end": 884,
									"name": "tag",
									"value": "6"
								},
								{
									"begin": 788,
									"end": 884,
									"name": "JUMPDEST"
								},
								{
									"begin": 867,
									"end": 877,
									"name": "CALLER"
								},
								{
									"begin": 788,
									"end": 884,
									"name": "SWAP1"
								},
								{
									"begin": 788,
									"end": 884,
									"name": "JUMP",
									"value": "[out]"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "tag",
									"value": "7"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "JUMPDEST"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "DUP1"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "CODECOPY"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 678,
									"end": 8513,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a7231582076261cec79ecb6634ff710ad46c22acf8a9daa3a2412670b7679ff1c78afdd1964736f6c63430005110032",
									".code": [
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "MSTORE"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "POP"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "LT"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "SHR"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "7EA5477"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "18160DDD"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "313CE567"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "40C10F19"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "4EE2CD7E"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "70A08231"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "715018A6"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "8DA5CB5B"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "8F32D59B"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "981B24D0"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "9DC29FAC"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "F2FDE38B"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "EQ"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPDEST"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "REVERT"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "JUMPDEST"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "CALLDATALOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 46,
											"end": 47,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 43,
											"end": 44,
											"name": "DUP1"
										},
										{
											"begin": 36,
											"end": 48,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP3"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 35,
											"end": 44,
											"name": "DUP4"
										},
										{
											"begin": 28,
											"end": 32,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "DUP3"
										},
										{
											"begin": 8,
											"end": 33,
											"name": "ADD"
										},
										{
											"begin": 5,
											"end": 45,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 58,
											"end": 59,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 55,
											"end": 56,
											"name": "DUP1"
										},
										{
											"begin": 48,
											"end": 60,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP2"
										},
										{
											"begin": 101,
											"end": 110,
											"name": "DUP5"
										},
										{
											"begin": 95,
											"end": 97,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 81,
											"end": 93,
											"name": "DUP4"
										},
										{
											"begin": 77,
											"end": 98,
											"name": "MUL"
										},
										{
											"begin": 67,
											"end": 75,
											"name": "DUP5"
										},
										{
											"begin": 63,
											"end": 99,
											"name": "ADD"
										},
										{
											"begin": 60,
											"end": 111,
											"name": "GT"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 25,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 22,
											"end": 51,
											"name": "GT"
										},
										{
											"begin": 11,
											"end": 119,
											"name": "OR"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPI"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 129,
											"end": 130,
											"name": "DUP1"
										},
										{
											"begin": 122,
											"end": 134,
											"name": "REVERT"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPDEST"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MUL"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MLOAD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MSTORE"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP4"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP3"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MSTORE"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP4"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP4"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MUL"
										},
										{
											"begin": 30,
											"end": 33,
											"name": "DUP1"
										},
										{
											"begin": 22,
											"end": 28,
											"name": "DUP3"
										},
										{
											"begin": 14,
											"end": 20,
											"name": "DUP5"
										},
										{
											"begin": 1,
											"end": 34,
											"name": "CALLDATACOPY"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 81,
											"end": 97,
											"name": "SWAP3"
										},
										{
											"begin": 81,
											"end": 97,
											"name": "ADD"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "SWAP2"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "SWAP1"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "SWAP2"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "MSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP3"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP6"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP5"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP4"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 46,
											"end": 47,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 43,
											"end": 44,
											"name": "DUP1"
										},
										{
											"begin": 36,
											"end": 48,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP3"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 35,
											"end": 44,
											"name": "DUP4"
										},
										{
											"begin": 28,
											"end": 32,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "DUP3"
										},
										{
											"begin": 8,
											"end": 33,
											"name": "ADD"
										},
										{
											"begin": 5,
											"end": 45,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 58,
											"end": 59,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 55,
											"end": 56,
											"name": "DUP1"
										},
										{
											"begin": 48,
											"end": 60,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP2"
										},
										{
											"begin": 101,
											"end": 110,
											"name": "DUP5"
										},
										{
											"begin": 95,
											"end": 97,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 81,
											"end": 93,
											"name": "DUP4"
										},
										{
											"begin": 77,
											"end": 98,
											"name": "MUL"
										},
										{
											"begin": 67,
											"end": 75,
											"name": "DUP5"
										},
										{
											"begin": 63,
											"end": 99,
											"name": "ADD"
										},
										{
											"begin": 60,
											"end": 111,
											"name": "GT"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 25,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 22,
											"end": 51,
											"name": "GT"
										},
										{
											"begin": 11,
											"end": 119,
											"name": "OR"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPI"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 129,
											"end": 130,
											"name": "DUP1"
										},
										{
											"begin": 122,
											"end": 134,
											"name": "REVERT"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPDEST"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MUL"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MLOAD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MSTORE"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP4"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP3"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MSTORE"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP4"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP4"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MUL"
										},
										{
											"begin": 30,
											"end": 33,
											"name": "DUP1"
										},
										{
											"begin": 22,
											"end": 28,
											"name": "DUP3"
										},
										{
											"begin": 14,
											"end": 20,
											"name": "DUP5"
										},
										{
											"begin": 1,
											"end": 34,
											"name": "CALLDATACOPY"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 81,
											"end": 97,
											"name": "SWAP3"
										},
										{
											"begin": 81,
											"end": 97,
											"name": "ADD"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "SWAP2"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "SWAP1"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "SWAP2"
										},
										{
											"begin": 74,
											"end": 101,
											"name": "MSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP3"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP6"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "JUMPDEST"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MLOAD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ISZERO"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ISZERO"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP3"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MSTORE"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "MLOAD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "DUP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SUB"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "ADD"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP1"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "RETURN"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "JUMPDEST"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "tag",
											"value": "24"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "JUMPDEST"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "DUP1"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "MLOAD"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "SWAP2"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "DUP3"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "MSTORE"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "MLOAD"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "SWAP1"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "DUP2"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "SWAP1"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "SUB"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "ADD"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "SWAP1"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "RETURN"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "JUMPDEST"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "PUSH [tag]",
											"value": "26"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "PUSH [tag]",
											"value": "27"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "tag",
											"value": "26"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "JUMPDEST"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "DUP1"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "MLOAD"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "SWAP1"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "SWAP3"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "AND"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "DUP3"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "MSTORE"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "MLOAD"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "SWAP1"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "DUP2"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "SWAP1"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "SUB"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "ADD"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "SWAP1"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "RETURN"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "JUMPDEST"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "DUP1"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "29"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "29"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "DUP2"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "AND"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "SWAP1"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "ADD"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "PUSH [tag]",
											"value": "30"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "JUMPDEST"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "DUP1"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "32"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "32"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "DUP2"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "AND"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "SWAP1"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "ADD"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "PUSH [tag]",
											"value": "33"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "JUMPDEST"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "DUP1"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "35"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "35"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "CALLDATALOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "AND"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "PUSH [tag]",
											"value": "36"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1642,
											"end": 1779,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 1642,
											"end": 1779,
											"name": "JUMPDEST"
										},
										{
											"begin": 1642,
											"end": 1779,
											"name": "PUSH [tag]",
											"value": "37"
										},
										{
											"begin": 1642,
											"end": 1779,
											"name": "PUSH [tag]",
											"value": "38"
										},
										{
											"begin": 1642,
											"end": 1779,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1642,
											"end": 1779,
											"name": "tag",
											"value": "37"
										},
										{
											"begin": 1642,
											"end": 1779,
											"name": "JUMPDEST"
										},
										{
											"begin": 1642,
											"end": 1779,
											"name": "STOP"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "JUMPDEST"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "PUSH [tag]",
											"value": "39"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "PUSH [tag]",
											"value": "40"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "tag",
											"value": "39"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "JUMPDEST"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "DUP1"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "SWAP1"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "SWAP3"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "AND"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "DUP3"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "MSTORE"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "MLOAD"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "SWAP1"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "DUP2"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "SWAP1"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "SUB"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "ADD"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "SWAP1"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "RETURN"
										},
										{
											"begin": 1208,
											"end": 1300,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 1208,
											"end": 1300,
											"name": "JUMPDEST"
										},
										{
											"begin": 1208,
											"end": 1300,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 1208,
											"end": 1300,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 1208,
											"end": 1300,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "JUMPDEST"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "DUP1"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "44"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "44"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "PUSH [tag]",
											"value": "45"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "JUMPDEST"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "DUP1"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "47"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "47"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "DUP2"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "AND"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "SWAP1"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "ADD"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "PUSH [tag]",
											"value": "48"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "JUMPDEST"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "PUSH [tag]",
											"value": "37"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "DUP1"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "50"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "50"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "CALLDATALOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "AND"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "PUSH [tag]",
											"value": "51"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "JUMPDEST"
										},
										{
											"begin": 3037,
											"end": 3041,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "PUSH [tag]",
											"value": "53"
										},
										{
											"begin": 1061,
											"end": 1068,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "tag",
											"value": "53"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "JUMPDEST"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH [tag]",
											"value": "54"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "JUMPI"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "44"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MLOAD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SUB"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "64"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "REVERT"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "tag",
											"value": "54"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "JUMPDEST"
										},
										{
											"begin": 3059,
											"end": 3068,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "tag",
											"value": "56"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "JUMPDEST"
										},
										{
											"begin": 3078,
											"end": 3083,
											"name": "DUP4"
										},
										{
											"begin": 3078,
											"end": 3090,
											"name": "MLOAD"
										},
										{
											"begin": 3074,
											"end": 3075,
											"name": "DUP2"
										},
										{
											"begin": 3074,
											"end": 3090,
											"name": "LT"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "ISZERO"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "PUSH [tag]",
											"value": "57"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "JUMPI"
										},
										{
											"begin": 3112,
											"end": 3134,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3137,
											"end": 3150,
											"name": "PUSH [tag]",
											"value": "59"
										},
										{
											"begin": 3137,
											"end": 3148,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 3137,
											"end": 3150,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3137,
											"end": 3150,
											"name": "tag",
											"value": "59"
										},
										{
											"begin": 3137,
											"end": 3150,
											"name": "JUMPDEST"
										},
										{
											"begin": 3112,
											"end": 3150,
											"name": "SWAP1"
										},
										{
											"begin": 3112,
											"end": 3150,
											"name": "POP"
										},
										{
											"begin": 3204,
											"end": 3218,
											"name": "DUP1"
										},
										{
											"begin": 3190,
											"end": 3197,
											"name": "DUP5"
										},
										{
											"begin": 3198,
											"end": 3199,
											"name": "DUP4"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "DUP2"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "MLOAD"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "DUP2"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "LT"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "PUSH [tag]",
											"value": "60"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "JUMPI"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "INVALID"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "tag",
											"value": "60"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "JUMPDEST"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "MUL"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "ADD"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "ADD"
										},
										{
											"begin": 3190,
											"end": 3200,
											"name": "MLOAD"
										},
										{
											"begin": 3173,
											"end": 3187,
											"name": "DUP3"
										},
										{
											"begin": 3173,
											"end": 3200,
											"name": "ADD"
										},
										{
											"begin": 3173,
											"end": 3218,
											"name": "LT"
										},
										{
											"begin": 3173,
											"end": 3218,
											"name": "ISZERO"
										},
										{
											"begin": 3165,
											"end": 3219,
											"name": "PUSH [tag]",
											"value": "61"
										},
										{
											"begin": 3165,
											"end": 3219,
											"name": "JUMPI"
										},
										{
											"begin": 3165,
											"end": 3219,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3165,
											"end": 3219,
											"name": "DUP1"
										},
										{
											"begin": 3165,
											"end": 3219,
											"name": "REVERT"
										},
										{
											"begin": 3165,
											"end": 3219,
											"name": "tag",
											"value": "61"
										},
										{
											"begin": 3165,
											"end": 3219,
											"name": "JUMPDEST"
										},
										{
											"begin": 3256,
											"end": 3281,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3284,
											"end": 3303,
											"name": "PUSH [tag]",
											"value": "62"
										},
										{
											"begin": 3294,
											"end": 3299,
											"name": "DUP7"
										},
										{
											"begin": 3300,
											"end": 3301,
											"name": "DUP5"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "DUP2"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "MLOAD"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "DUP2"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "LT"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "PUSH [tag]",
											"value": "63"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "JUMPI"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "INVALID"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "tag",
											"value": "63"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "JUMPDEST"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "MUL"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "ADD"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "ADD"
										},
										{
											"begin": 3294,
											"end": 3302,
											"name": "MLOAD"
										},
										{
											"begin": 3284,
											"end": 3293,
											"name": "PUSH [tag]",
											"value": "36"
										},
										{
											"begin": 3284,
											"end": 3303,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3284,
											"end": 3303,
											"name": "tag",
											"value": "62"
										},
										{
											"begin": 3284,
											"end": 3303,
											"name": "JUMPDEST"
										},
										{
											"begin": 3256,
											"end": 3303,
											"name": "SWAP1"
										},
										{
											"begin": 3256,
											"end": 3303,
											"name": "POP"
										},
										{
											"begin": 3360,
											"end": 3377,
											"name": "DUP1"
										},
										{
											"begin": 3346,
											"end": 3353,
											"name": "DUP6"
										},
										{
											"begin": 3354,
											"end": 3355,
											"name": "DUP5"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "DUP2"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "MLOAD"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "DUP2"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "LT"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "PUSH [tag]",
											"value": "64"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "JUMPI"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "INVALID"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "tag",
											"value": "64"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "JUMPDEST"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "MUL"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "ADD"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "ADD"
										},
										{
											"begin": 3346,
											"end": 3356,
											"name": "MLOAD"
										},
										{
											"begin": 3326,
											"end": 3343,
											"name": "DUP3"
										},
										{
											"begin": 3326,
											"end": 3356,
											"name": "ADD"
										},
										{
											"begin": 3326,
											"end": 3377,
											"name": "LT"
										},
										{
											"begin": 3326,
											"end": 3377,
											"name": "ISZERO"
										},
										{
											"begin": 3318,
											"end": 3378,
											"name": "PUSH [tag]",
											"value": "65"
										},
										{
											"begin": 3318,
											"end": 3378,
											"name": "JUMPI"
										},
										{
											"begin": 3318,
											"end": 3378,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3318,
											"end": 3378,
											"name": "DUP1"
										},
										{
											"begin": 3318,
											"end": 3378,
											"name": "REVERT"
										},
										{
											"begin": 3318,
											"end": 3378,
											"name": "tag",
											"value": "65"
										},
										{
											"begin": 3318,
											"end": 3378,
											"name": "JUMPDEST"
										},
										{
											"begin": 3415,
											"end": 3480,
											"name": "PUSH [tag]",
											"value": "66"
										},
										{
											"begin": 3432,
											"end": 3450,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 3469,
											"end": 3476,
											"name": "DUP7"
										},
										{
											"begin": 3477,
											"end": 3478,
											"name": "DUP6"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "DUP2"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "MLOAD"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "DUP2"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "LT"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "PUSH [tag]",
											"value": "67"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "JUMPI"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "INVALID"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "tag",
											"value": "67"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "JUMPDEST"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "MUL"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "ADD"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "ADD"
										},
										{
											"begin": 3469,
											"end": 3479,
											"name": "MLOAD"
										},
										{
											"begin": 3452,
											"end": 3466,
											"name": "DUP5"
										},
										{
											"begin": 3452,
											"end": 3479,
											"name": "ADD"
										},
										{
											"begin": 3415,
											"end": 3431,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 3415,
											"end": 3480,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3415,
											"end": 3480,
											"name": "tag",
											"value": "66"
										},
										{
											"begin": 3415,
											"end": 3480,
											"name": "JUMPDEST"
										},
										{
											"begin": 3495,
											"end": 3563,
											"name": "PUSH [tag]",
											"value": "69"
										},
										{
											"begin": 3512,
											"end": 3520,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3521,
											"end": 3526,
											"name": "DUP9"
										},
										{
											"begin": 3527,
											"end": 3528,
											"name": "DUP7"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "DUP2"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "MLOAD"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "DUP2"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "LT"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "PUSH [tag]",
											"value": "70"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "JUMPI"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "INVALID"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "tag",
											"value": "70"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "JUMPDEST"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "MUL"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "ADD"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "ADD"
										},
										{
											"begin": 3521,
											"end": 3529,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "AND"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "DUP2"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "MSTORE"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "ADD"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "SWAP1"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "DUP2"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "MSTORE"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "ADD"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 3512,
											"end": 3530,
											"name": "KECCAK256"
										},
										{
											"begin": 3552,
											"end": 3559,
											"name": "DUP7"
										},
										{
											"begin": 3560,
											"end": 3561,
											"name": "DUP6"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "DUP2"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "MLOAD"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "DUP2"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "LT"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "PUSH [tag]",
											"value": "71"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "JUMPI"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "INVALID"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "tag",
											"value": "71"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "JUMPDEST"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "MUL"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "ADD"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "ADD"
										},
										{
											"begin": 3552,
											"end": 3562,
											"name": "MLOAD"
										},
										{
											"begin": 3532,
											"end": 3549,
											"name": "DUP4"
										},
										{
											"begin": 3532,
											"end": 3562,
											"name": "ADD"
										},
										{
											"begin": 3495,
											"end": 3511,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 3495,
											"end": 3563,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 3495,
											"end": 3563,
											"name": "tag",
											"value": "69"
										},
										{
											"begin": 3495,
											"end": 3563,
											"name": "JUMPDEST"
										},
										{
											"begin": 3588,
											"end": 3593,
											"name": "DUP6"
										},
										{
											"begin": 3594,
											"end": 3595,
											"name": "DUP4"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "DUP2"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "MLOAD"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "DUP2"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "LT"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "PUSH [tag]",
											"value": "72"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "JUMPI"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "INVALID"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "tag",
											"value": "72"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "JUMPDEST"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "MUL"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "ADD"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "ADD"
										},
										{
											"begin": 3588,
											"end": 3596,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"value": "FAEF6C4EB5D567B942C0732EB539A574877571781FCFE7E88EBBCACC7E2FA7EF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE"
										},
										{
											"begin": 3598,
											"end": 3605,
											"name": "DUP7"
										},
										{
											"begin": 3606,
											"end": 3607,
											"name": "DUP6"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "DUP2"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "MLOAD"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "DUP2"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "LT"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "PUSH [tag]",
											"value": "73"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "JUMPI"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "INVALID"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "tag",
											"value": "73"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "JUMPDEST"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "MUL"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "ADD"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "ADD"
										},
										{
											"begin": 3598,
											"end": 3608,
											"name": "MLOAD"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "MLOAD"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "DUP1"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "DUP3"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "DUP2"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "MSTORE"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "ADD"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "SWAP2"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "POP"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "POP"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "MLOAD"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "DUP1"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "SWAP2"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "SUB"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "SWAP1"
										},
										{
											"begin": 3583,
											"end": 3609,
											"name": "LOG2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 3092,
											"end": 3095,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3092,
											"end": 3095,
											"name": "ADD"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "PUSH [tag]",
											"value": "56"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "JUMP"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "tag",
											"value": "57"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "JUMPDEST"
										},
										{
											"begin": 3054,
											"end": 3621,
											"name": "POP"
										},
										{
											"begin": 3638,
											"end": 3642,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 3631,
											"end": 3642,
											"name": "SWAP1"
										},
										{
											"begin": 3631,
											"end": 3642,
											"name": "POP"
										},
										{
											"begin": 1117,
											"end": 1118,
											"name": "tag",
											"value": "55"
										},
										{
											"begin": 1117,
											"end": 1118,
											"name": "JUMPDEST"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP3"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "SWAP2"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "POP"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "POP"
										},
										{
											"begin": 2939,
											"end": 3650,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "tag",
											"value": "25"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "JUMPDEST"
										},
										{
											"begin": 4639,
											"end": 4646,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4666,
											"end": 4693,
											"name": "PUSH [tag]",
											"value": "75"
										},
										{
											"begin": 4680,
											"end": 4692,
											"name": "NUMBER"
										},
										{
											"begin": 4666,
											"end": 4679,
											"name": "PUSH [tag]",
											"value": "45"
										},
										{
											"begin": 4666,
											"end": 4693,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4666,
											"end": 4693,
											"name": "tag",
											"value": "75"
										},
										{
											"begin": 4666,
											"end": 4693,
											"name": "JUMPDEST"
										},
										{
											"begin": 4659,
											"end": 4693,
											"name": "SWAP1"
										},
										{
											"begin": 4659,
											"end": 4693,
											"name": "POP"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "tag",
											"value": "74"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "JUMPDEST"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "SWAP1"
										},
										{
											"begin": 4595,
											"end": 4701,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "tag",
											"value": "27"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "JUMPDEST"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "SWAP1"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "DIV"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "PUSH",
											"value": "FF"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "AND"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "DUP2"
										},
										{
											"begin": 716,
											"end": 742,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "tag",
											"value": "30"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "JUMPDEST"
										},
										{
											"begin": 2161,
											"end": 2165,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "PUSH [tag]",
											"value": "77"
										},
										{
											"begin": 1061,
											"end": 1068,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "tag",
											"value": "77"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "JUMPDEST"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH [tag]",
											"value": "78"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "JUMPI"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "44"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MLOAD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SUB"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "64"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "REVERT"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "tag",
											"value": "78"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "JUMPDEST"
										},
										{
											"begin": 2178,
											"end": 2200,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2203,
											"end": 2216,
											"name": "PUSH [tag]",
											"value": "80"
										},
										{
											"begin": 2203,
											"end": 2214,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 2203,
											"end": 2216,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2203,
											"end": 2216,
											"name": "tag",
											"value": "80"
										},
										{
											"begin": 2203,
											"end": 2216,
											"name": "JUMPDEST"
										},
										{
											"begin": 2178,
											"end": 2216,
											"name": "SWAP1"
										},
										{
											"begin": 2178,
											"end": 2216,
											"name": "POP"
										},
										{
											"begin": 2263,
											"end": 2277,
											"name": "DUP1"
										},
										{
											"begin": 2252,
											"end": 2259,
											"name": "DUP4"
										},
										{
											"begin": 2235,
											"end": 2249,
											"name": "DUP3"
										},
										{
											"begin": 2235,
											"end": 2259,
											"name": "ADD"
										},
										{
											"begin": 2235,
											"end": 2277,
											"name": "LT"
										},
										{
											"begin": 2235,
											"end": 2277,
											"name": "ISZERO"
										},
										{
											"begin": 2227,
											"end": 2278,
											"name": "PUSH [tag]",
											"value": "81"
										},
										{
											"begin": 2227,
											"end": 2278,
											"name": "JUMPI"
										},
										{
											"begin": 2227,
											"end": 2278,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2227,
											"end": 2278,
											"name": "DUP1"
										},
										{
											"begin": 2227,
											"end": 2278,
											"name": "REVERT"
										},
										{
											"begin": 2227,
											"end": 2278,
											"name": "tag",
											"value": "81"
										},
										{
											"begin": 2227,
											"end": 2278,
											"name": "JUMPDEST"
										},
										{
											"begin": 2311,
											"end": 2336,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2339,
											"end": 2355,
											"name": "PUSH [tag]",
											"value": "82"
										},
										{
											"begin": 2349,
											"end": 2354,
											"name": "DUP6"
										},
										{
											"begin": 2339,
											"end": 2348,
											"name": "PUSH [tag]",
											"value": "36"
										},
										{
											"begin": 2339,
											"end": 2355,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2339,
											"end": 2355,
											"name": "tag",
											"value": "82"
										},
										{
											"begin": 2339,
											"end": 2355,
											"name": "JUMPDEST"
										},
										{
											"begin": 2311,
											"end": 2355,
											"name": "SWAP1"
										},
										{
											"begin": 2311,
											"end": 2355,
											"name": "POP"
										},
										{
											"begin": 2405,
											"end": 2422,
											"name": "DUP1"
										},
										{
											"begin": 2394,
											"end": 2401,
											"name": "DUP5"
										},
										{
											"begin": 2374,
											"end": 2391,
											"name": "DUP3"
										},
										{
											"begin": 2374,
											"end": 2401,
											"name": "ADD"
										},
										{
											"begin": 2374,
											"end": 2422,
											"name": "LT"
										},
										{
											"begin": 2374,
											"end": 2422,
											"name": "ISZERO"
										},
										{
											"begin": 2366,
											"end": 2423,
											"name": "PUSH [tag]",
											"value": "83"
										},
										{
											"begin": 2366,
											"end": 2423,
											"name": "JUMPI"
										},
										{
											"begin": 2366,
											"end": 2423,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2366,
											"end": 2423,
											"name": "DUP1"
										},
										{
											"begin": 2366,
											"end": 2423,
											"name": "REVERT"
										},
										{
											"begin": 2366,
											"end": 2423,
											"name": "tag",
											"value": "83"
										},
										{
											"begin": 2366,
											"end": 2423,
											"name": "JUMPDEST"
										},
										{
											"begin": 2456,
											"end": 2518,
											"name": "PUSH [tag]",
											"value": "84"
										},
										{
											"begin": 2473,
											"end": 2491,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 2510,
											"end": 2517,
											"name": "DUP6"
										},
										{
											"begin": 2493,
											"end": 2507,
											"name": "DUP5"
										},
										{
											"begin": 2493,
											"end": 2517,
											"name": "ADD"
										},
										{
											"begin": 2456,
											"end": 2472,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 2456,
											"end": 2518,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2456,
											"end": 2518,
											"name": "tag",
											"value": "84"
										},
										{
											"begin": 2456,
											"end": 2518,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 2546,
											"end": 2561,
											"name": "DUP6"
										},
										{
											"begin": 2546,
											"end": 2561,
											"name": "AND"
										},
										{
											"begin": 2546,
											"end": 2561,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2546,
											"end": 2561,
											"name": "SWAP1"
										},
										{
											"begin": 2546,
											"end": 2561,
											"name": "DUP2"
										},
										{
											"begin": 2546,
											"end": 2561,
											"name": "MSTORE"
										},
										{
											"begin": 2546,
											"end": 2554,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 2546,
											"end": 2561,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2546,
											"end": 2561,
											"name": "MSTORE"
										},
										{
											"begin": 2546,
											"end": 2561,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2546,
											"end": 2561,
											"name": "SWAP1"
										},
										{
											"begin": 2546,
											"end": 2561,
											"name": "KECCAK256"
										},
										{
											"begin": 2529,
											"end": 2591,
											"name": "PUSH [tag]",
											"value": "85"
										},
										{
											"begin": 2529,
											"end": 2591,
											"name": "SWAP1"
										},
										{
											"begin": 2563,
											"end": 2590,
											"name": "DUP3"
										},
										{
											"begin": 2563,
											"end": 2590,
											"name": "DUP7"
										},
										{
											"begin": 2563,
											"end": 2590,
											"name": "ADD"
										},
										{
											"begin": 2529,
											"end": 2545,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 2529,
											"end": 2591,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2529,
											"end": 2591,
											"name": "tag",
											"value": "85"
										},
										{
											"begin": 2529,
											"end": 2591,
											"name": "JUMPDEST"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "DUP1"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "MLOAD"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "DUP6"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "DUP2"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "MSTORE"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "SWAP1"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "DUP8"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "AND"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"value": "FAEF6C4EB5D567B942C0732EB539A574877571781FCFE7E88EBBCACC7E2FA7EF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "SWAP2"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "SWAP1"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "DUP2"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "SWAP1"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "SUB"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "ADD"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "SWAP1"
										},
										{
											"begin": 2607,
											"end": 2627,
											"name": "LOG2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 2645,
											"end": 2649,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 2645,
											"end": 2649,
											"name": "SWAP5"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "SWAP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 2089,
											"end": 2657,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "tag",
											"value": "33"
										},
										{
											"begin": 5977,
											"end": 6366,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6082,
											"end": 6098,
											"name": "DUP3"
										},
										{
											"begin": 6082,
											"end": 6098,
											"name": "AND"
										},
										{
											"begin": 6057,
											"end": 6064,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6082,
											"end": 6098,
											"name": "SWAP1"
										},
										{
											"begin": 6082,
											"end": 6098,
											"name": "DUP2"
										},
										{
											"begin": 6082,
											"end": 6098,
											"name": "MSTORE"
										},
										{
											"begin": 6082,
											"end": 6090,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 6082,
											"end": 6098,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6082,
											"end": 6098,
											"name": "MSTORE"
										},
										{
											"begin": 6082,
											"end": 6098,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6082,
											"end": 6098,
											"name": "DUP2"
										},
										{
											"begin": 6082,
											"end": 6098,
											"name": "KECCAK256"
										},
										{
											"begin": 6082,
											"end": 6105,
											"name": "SLOAD"
										},
										{
											"begin": 6082,
											"end": 6110,
											"name": "ISZERO"
										},
										{
											"begin": 6082,
											"end": 6110,
											"name": "DUP1"
										},
										{
											"begin": 6081,
											"end": 6161,
											"name": "PUSH [tag]",
											"value": "87"
										},
										{
											"begin": 6081,
											"end": 6161,
											"name": "JUMPI"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "DUP4"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "AND"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "SWAP1"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "DUP2"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "MSTORE"
										},
										{
											"begin": 6116,
											"end": 6124,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "MSTORE"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "DUP2"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "KECCAK256"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "DUP1"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "SLOAD"
										},
										{
											"begin": 6148,
											"end": 6160,
											"name": "DUP5"
										},
										{
											"begin": 6148,
											"end": 6160,
											"name": "SWAP3"
										},
										{
											"begin": 6116,
											"end": 6132,
											"name": "SWAP1"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "PUSH [tag]",
											"value": "88"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "JUMPI"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "INVALID"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "tag",
											"value": "88"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "JUMPDEST"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "SWAP2"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "DUP3"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "MSTORE"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "SWAP1"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "SWAP2"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "KECCAK256"
										},
										{
											"begin": 6116,
											"end": 6135,
											"name": "ADD"
										},
										{
											"begin": 6116,
											"end": 6145,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6116,
											"end": 6145,
											"name": "AND"
										},
										{
											"begin": 6116,
											"end": 6160,
											"name": "GT"
										},
										{
											"begin": 6081,
											"end": 6161,
											"name": "tag",
											"value": "87"
										},
										{
											"begin": 6081,
											"end": 6161,
											"name": "JUMPDEST"
										},
										{
											"begin": 6077,
											"end": 6359,
											"name": "ISZERO"
										},
										{
											"begin": 6077,
											"end": 6359,
											"name": "PUSH [tag]",
											"value": "90"
										},
										{
											"begin": 6077,
											"end": 6359,
											"name": "JUMPI"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 6185,
											"end": 6186,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6178,
											"end": 6186,
											"name": "PUSH [tag]",
											"value": "55"
										},
										{
											"begin": 6178,
											"end": 6186,
											"name": "JUMP"
										},
										{
											"begin": 6077,
											"end": 6359,
											"name": "tag",
											"value": "90"
										},
										{
											"begin": 6077,
											"end": 6359,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 6316,
											"end": 6332,
											"name": "DUP4"
										},
										{
											"begin": 6316,
											"end": 6332,
											"name": "AND"
										},
										{
											"begin": 6316,
											"end": 6332,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6316,
											"end": 6332,
											"name": "SWAP1"
										},
										{
											"begin": 6316,
											"end": 6332,
											"name": "DUP2"
										},
										{
											"begin": 6316,
											"end": 6332,
											"name": "MSTORE"
										},
										{
											"begin": 6316,
											"end": 6324,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 6316,
											"end": 6332,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 6316,
											"end": 6332,
											"name": "MSTORE"
										},
										{
											"begin": 6316,
											"end": 6332,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 6316,
											"end": 6332,
											"name": "SWAP1"
										},
										{
											"begin": 6316,
											"end": 6332,
											"name": "KECCAK256"
										},
										{
											"begin": 6305,
											"end": 6347,
											"name": "PUSH [tag]",
											"value": "92"
										},
										{
											"begin": 6305,
											"end": 6347,
											"name": "SWAP1"
										},
										{
											"begin": 6334,
											"end": 6346,
											"name": "DUP4"
										},
										{
											"begin": 6305,
											"end": 6315,
											"name": "PUSH [tag]",
											"value": "93"
										},
										{
											"begin": 6305,
											"end": 6347,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 6305,
											"end": 6347,
											"name": "tag",
											"value": "92"
										},
										{
											"begin": 6305,
											"end": 6347,
											"name": "JUMPDEST"
										},
										{
											"begin": 6298,
											"end": 6347,
											"name": "SWAP1"
										},
										{
											"begin": 6298,
											"end": 6347,
											"name": "POP"
										},
										{
											"begin": 6298,
											"end": 6347,
											"name": "PUSH [tag]",
											"value": "55"
										},
										{
											"begin": 6298,
											"end": 6347,
											"name": "JUMP"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "tag",
											"value": "36"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "JUMPDEST"
										},
										{
											"begin": 5017,
											"end": 5032,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5052,
											"end": 5085,
											"name": "PUSH [tag]",
											"value": "95"
										},
										{
											"begin": 5064,
											"end": 5070,
											"name": "DUP3"
										},
										{
											"begin": 5072,
											"end": 5084,
											"name": "NUMBER"
										},
										{
											"begin": 5052,
											"end": 5063,
											"name": "PUSH [tag]",
											"value": "33"
										},
										{
											"begin": 5052,
											"end": 5085,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5052,
											"end": 5085,
											"name": "tag",
											"value": "95"
										},
										{
											"begin": 5052,
											"end": 5085,
											"name": "JUMPDEST"
										},
										{
											"begin": 5045,
											"end": 5085,
											"name": "SWAP1"
										},
										{
											"begin": 5045,
											"end": 5085,
											"name": "POP"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "tag",
											"value": "94"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "JUMPDEST"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "SWAP2"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "SWAP1"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "POP"
										},
										{
											"begin": 4961,
											"end": 5093,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1642,
											"end": 1779,
											"name": "tag",
											"value": "38"
										},
										{
											"begin": 1642,
											"end": 1779,
											"name": "JUMPDEST"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "PUSH [tag]",
											"value": "97"
										},
										{
											"begin": 1061,
											"end": 1068,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "tag",
											"value": "97"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "JUMPDEST"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH [tag]",
											"value": "98"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "JUMPI"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "44"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MLOAD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SUB"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "64"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "REVERT"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "tag",
											"value": "98"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "JUMPDEST"
										},
										{
											"begin": 1740,
											"end": 1741,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1724,
											"end": 1730,
											"name": "DUP1"
										},
										{
											"begin": 1724,
											"end": 1730,
											"name": "SLOAD"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1724,
											"end": 1730,
											"name": "SWAP1"
										},
										{
											"begin": 1724,
											"end": 1730,
											"name": "SWAP2"
										},
										{
											"begin": 1724,
											"end": 1730,
											"name": "AND"
										},
										{
											"begin": 1724,
											"end": 1730,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"value": "9C064737B570A74C2BAC5D21056D93AC53115214216CD14D4A0FC9B60BE81231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "SWAP1"
										},
										{
											"begin": 1740,
											"end": 1741,
											"name": "DUP4"
										},
										{
											"begin": 1740,
											"end": 1741,
											"name": "SWAP1"
										},
										{
											"begin": 1703,
											"end": 1743,
											"name": "LOG3"
										},
										{
											"begin": 1770,
											"end": 1771,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1753,
											"end": 1772,
											"name": "DUP1"
										},
										{
											"begin": 1753,
											"end": 1772,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 1753,
											"end": 1772,
											"name": "AND"
										},
										{
											"begin": 1753,
											"end": 1772,
											"name": "SWAP1"
										},
										{
											"begin": 1753,
											"end": 1772,
											"name": "SSTORE"
										},
										{
											"begin": 1642,
											"end": 1779,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "tag",
											"value": "40"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "JUMPDEST"
										},
										{
											"begin": 895,
											"end": 902,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 921,
											"end": 927,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 921,
											"end": 927,
											"name": "AND"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "SWAP1"
										},
										{
											"begin": 857,
											"end": 934,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1208,
											"end": 1300,
											"name": "tag",
											"value": "42"
										},
										{
											"begin": 1208,
											"end": 1300,
											"name": "JUMPDEST"
										},
										{
											"begin": 1248,
											"end": 1252,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1287,
											"end": 1293,
											"name": "DUP1"
										},
										{
											"begin": 1287,
											"end": 1293,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1287,
											"end": 1293,
											"name": "AND"
										},
										{
											"begin": 1271,
											"end": 1283,
											"name": "PUSH [tag]",
											"value": "102"
										},
										{
											"begin": 1271,
											"end": 1281,
											"name": "PUSH [tag]",
											"value": "103"
										},
										{
											"begin": 1271,
											"end": 1283,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1271,
											"end": 1283,
											"name": "tag",
											"value": "102"
										},
										{
											"begin": 1271,
											"end": 1283,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 1271,
											"end": 1293,
											"name": "AND"
										},
										{
											"begin": 1271,
											"end": 1293,
											"name": "EQ"
										},
										{
											"begin": 1264,
											"end": 1293,
											"name": "SWAP1"
										},
										{
											"begin": 1264,
											"end": 1293,
											"name": "POP"
										},
										{
											"begin": 1208,
											"end": 1300,
											"name": "SWAP1"
										},
										{
											"begin": 1208,
											"end": 1300,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "tag",
											"value": "45"
										},
										{
											"begin": 5316,
											"end": 5701,
											"name": "JUMPDEST"
										},
										{
											"begin": 5407,
											"end": 5425,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 5407,
											"end": 5432,
											"name": "SLOAD"
										},
										{
											"begin": 5382,
											"end": 5389,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5382,
											"end": 5389,
											"name": "SWAP1"
										},
										{
											"begin": 5407,
											"end": 5437,
											"name": "ISZERO"
										},
										{
											"begin": 5407,
											"end": 5437,
											"name": "DUP1"
										},
										{
											"begin": 5406,
											"end": 5490,
											"name": "PUSH [tag]",
											"value": "105"
										},
										{
											"begin": 5406,
											"end": 5490,
											"name": "JUMPI"
										},
										{
											"begin": 5406,
											"end": 5490,
											"name": "POP"
										},
										{
											"begin": 5477,
											"end": 5489,
											"name": "DUP2"
										},
										{
											"begin": 5443,
											"end": 5461,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 5462,
											"end": 5463,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "DUP2"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "SLOAD"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "DUP2"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "LT"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "PUSH [tag]",
											"value": "106"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "JUMPI"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "INVALID"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "tag",
											"value": "106"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "JUMPDEST"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "SWAP2"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "DUP3"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "MSTORE"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "SWAP1"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "SWAP2"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "KECCAK256"
										},
										{
											"begin": 5443,
											"end": 5464,
											"name": "ADD"
										},
										{
											"begin": 5443,
											"end": 5474,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 5443,
											"end": 5474,
											"name": "AND"
										},
										{
											"begin": 5443,
											"end": 5489,
											"name": "GT"
										},
										{
											"begin": 5406,
											"end": 5490,
											"name": "tag",
											"value": "105"
										},
										{
											"begin": 5406,
											"end": 5490,
											"name": "JUMPDEST"
										},
										{
											"begin": 5402,
											"end": 5694,
											"name": "ISZERO"
										},
										{
											"begin": 5402,
											"end": 5694,
											"name": "PUSH [tag]",
											"value": "108"
										},
										{
											"begin": 5402,
											"end": 5694,
											"name": "JUMPI"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 5514,
											"end": 5515,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 5507,
											"end": 5515,
											"name": "PUSH [tag]",
											"value": "94"
										},
										{
											"begin": 5507,
											"end": 5515,
											"name": "JUMP"
										},
										{
											"begin": 5402,
											"end": 5694,
											"name": "tag",
											"value": "108"
										},
										{
											"begin": 5402,
											"end": 5694,
											"name": "JUMPDEST"
										},
										{
											"begin": 5638,
											"end": 5682,
											"name": "PUSH [tag]",
											"value": "110"
										},
										{
											"begin": 5649,
											"end": 5667,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 5669,
											"end": 5681,
											"name": "DUP4"
										},
										{
											"begin": 5638,
											"end": 5648,
											"name": "PUSH [tag]",
											"value": "93"
										},
										{
											"begin": 5638,
											"end": 5682,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 5638,
											"end": 5682,
											"name": "tag",
											"value": "110"
										},
										{
											"begin": 5638,
											"end": 5682,
											"name": "JUMPDEST"
										},
										{
											"begin": 5631,
											"end": 5682,
											"name": "SWAP1"
										},
										{
											"begin": 5631,
											"end": 5682,
											"name": "POP"
										},
										{
											"begin": 5631,
											"end": 5682,
											"name": "PUSH [tag]",
											"value": "94"
										},
										{
											"begin": 5631,
											"end": 5682,
											"name": "JUMP"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "tag",
											"value": "48"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "JUMPDEST"
										},
										{
											"begin": 3968,
											"end": 3972,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "PUSH [tag]",
											"value": "112"
										},
										{
											"begin": 1061,
											"end": 1068,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "tag",
											"value": "112"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "JUMPDEST"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH [tag]",
											"value": "113"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "JUMPI"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "44"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MLOAD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SUB"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "64"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "REVERT"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "tag",
											"value": "113"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "JUMPDEST"
										},
										{
											"begin": 3985,
											"end": 4007,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4010,
											"end": 4023,
											"name": "PUSH [tag]",
											"value": "115"
										},
										{
											"begin": 4010,
											"end": 4021,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 4010,
											"end": 4023,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4010,
											"end": 4023,
											"name": "tag",
											"value": "115"
										},
										{
											"begin": 4010,
											"end": 4023,
											"name": "JUMPDEST"
										},
										{
											"begin": 3985,
											"end": 4023,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 4057,
											"end": 4064,
											"name": "DUP3"
										},
										{
											"begin": 4034,
											"end": 4054,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4105,
											"end": 4121,
											"name": "PUSH [tag]",
											"value": "116"
										},
										{
											"begin": 4115,
											"end": 4120,
											"name": "DUP7"
										},
										{
											"begin": 4105,
											"end": 4114,
											"name": "PUSH [tag]",
											"value": "36"
										},
										{
											"begin": 4105,
											"end": 4121,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4105,
											"end": 4121,
											"name": "tag",
											"value": "116"
										},
										{
											"begin": 4105,
											"end": 4121,
											"name": "JUMPDEST"
										},
										{
											"begin": 4075,
											"end": 4121,
											"name": "SWAP1"
										},
										{
											"begin": 4075,
											"end": 4121,
											"name": "POP"
										},
										{
											"begin": 4158,
											"end": 4170,
											"name": "DUP2"
										},
										{
											"begin": 4136,
											"end": 4155,
											"name": "DUP2"
										},
										{
											"begin": 4136,
											"end": 4170,
											"name": "LT"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "ISZERO"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "PUSH [tag]",
											"value": "117"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "JUMPI"
										},
										{
											"begin": 4202,
											"end": 4221,
											"name": "DUP1"
										},
										{
											"begin": 4187,
											"end": 4221,
											"name": "SWAP2"
										},
										{
											"begin": 4187,
											"end": 4221,
											"name": "POP"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "tag",
											"value": "117"
										},
										{
											"begin": 4132,
											"end": 4233,
											"name": "JUMPDEST"
										},
										{
											"begin": 4243,
											"end": 4310,
											"name": "PUSH [tag]",
											"value": "118"
										},
										{
											"begin": 4260,
											"end": 4278,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 4297,
											"end": 4309,
											"name": "DUP4"
										},
										{
											"begin": 4280,
											"end": 4294,
											"name": "DUP6"
										},
										{
											"begin": 4280,
											"end": 4309,
											"name": "SUB"
										},
										{
											"begin": 4243,
											"end": 4259,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 4243,
											"end": 4310,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4243,
											"end": 4310,
											"name": "tag",
											"value": "118"
										},
										{
											"begin": 4243,
											"end": 4310,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 4338,
											"end": 4353,
											"name": "DUP7"
										},
										{
											"begin": 4338,
											"end": 4353,
											"name": "AND"
										},
										{
											"begin": 4338,
											"end": 4353,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 4338,
											"end": 4353,
											"name": "SWAP1"
										},
										{
											"begin": 4338,
											"end": 4353,
											"name": "DUP2"
										},
										{
											"begin": 4338,
											"end": 4353,
											"name": "MSTORE"
										},
										{
											"begin": 4338,
											"end": 4346,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 4338,
											"end": 4353,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4338,
											"end": 4353,
											"name": "MSTORE"
										},
										{
											"begin": 4338,
											"end": 4353,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4338,
											"end": 4353,
											"name": "SWAP1"
										},
										{
											"begin": 4338,
											"end": 4353,
											"name": "KECCAK256"
										},
										{
											"begin": 4321,
											"end": 4390,
											"name": "PUSH [tag]",
											"value": "119"
										},
										{
											"begin": 4321,
											"end": 4390,
											"name": "SWAP1"
										},
										{
											"begin": 4355,
											"end": 4389,
											"name": "DUP4"
										},
										{
											"begin": 4355,
											"end": 4389,
											"name": "DUP4"
										},
										{
											"begin": 4355,
											"end": 4389,
											"name": "SUB"
										},
										{
											"begin": 4321,
											"end": 4337,
											"name": "PUSH [tag]",
											"value": "68"
										},
										{
											"begin": 4321,
											"end": 4390,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 4321,
											"end": 4390,
											"name": "tag",
											"value": "119"
										},
										{
											"begin": 4321,
											"end": 4390,
											"name": "JUMPDEST"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "DUP1"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "MLOAD"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "DUP4"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "DUP2"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "MSTORE"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "SWAP1"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "DUP9"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "AND"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "SWAP2"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "PUSH",
											"value": "CC16F5DBB4873280815C1EE09DBD06736CFFCC184412CF7A71A0FDB75D397CA5"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "SWAP2"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "SWAP1"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "DUP2"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "SWAP1"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "SUB"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "ADD"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "SWAP1"
										},
										{
											"begin": 4406,
											"end": 4431,
											"name": "LOG2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 4449,
											"end": 4453,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 4449,
											"end": 4453,
											"name": "SWAP6"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "SWAP5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 3896,
											"end": 4461,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "tag",
											"value": "51"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "JUMPDEST"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "PUSH [tag]",
											"value": "121"
										},
										{
											"begin": 1061,
											"end": 1068,
											"name": "PUSH [tag]",
											"value": "42"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "tag",
											"value": "121"
										},
										{
											"begin": 1061,
											"end": 1070,
											"name": "JUMPDEST"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH [tag]",
											"value": "122"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "JUMPI"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "24"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "44"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP3"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MSTORE"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "MLOAD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "DUP2"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SUB"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "PUSH",
											"value": "64"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "ADD"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "SWAP1"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "REVERT"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "tag",
											"value": "122"
										},
										{
											"begin": 1053,
											"end": 1107,
											"name": "JUMPDEST"
										},
										{
											"begin": 2000,
											"end": 2028,
											"name": "PUSH [tag]",
											"value": "124"
										},
										{
											"begin": 2019,
											"end": 2027,
											"name": "DUP2"
										},
										{
											"begin": 2000,
											"end": 2018,
											"name": "PUSH [tag]",
											"value": "125"
										},
										{
											"begin": 2000,
											"end": 2028,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 2000,
											"end": 2028,
											"name": "tag",
											"value": "124"
										},
										{
											"begin": 2000,
											"end": 2028,
											"name": "JUMPDEST"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "POP"
										},
										{
											"begin": 1928,
											"end": 2035,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 7857,
											"end": 8510,
											"name": "tag",
											"value": "68"
										},
										{
											"begin": 7857,
											"end": 8510,
											"name": "JUMPDEST"
										},
										{
											"begin": 7980,
											"end": 7986,
											"name": "DUP1"
										},
										{
											"begin": 7969,
											"end": 7975,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 7961,
											"end": 7986,
											"name": "AND"
										},
										{
											"begin": 7961,
											"end": 7986,
											"name": "EQ"
										},
										{
											"begin": 7953,
											"end": 7987,
											"name": "PUSH [tag]",
											"value": "127"
										},
										{
											"begin": 7953,
											"end": 7987,
											"name": "JUMPI"
										},
										{
											"begin": 7953,
											"end": 7987,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7953,
											"end": 7987,
											"name": "DUP1"
										},
										{
											"begin": 7953,
											"end": 7987,
											"name": "REVERT"
										},
										{
											"begin": 7953,
											"end": 7987,
											"name": "tag",
											"value": "127"
										},
										{
											"begin": 7953,
											"end": 7987,
											"name": "JUMPDEST"
										},
										{
											"begin": 8047,
											"end": 8065,
											"name": "DUP2"
										},
										{
											"begin": 8047,
											"end": 8065,
											"name": "SLOAD"
										},
										{
											"begin": 8047,
											"end": 8070,
											"name": "ISZERO"
										},
										{
											"begin": 8047,
											"end": 8070,
											"name": "DUP1"
										},
										{
											"begin": 8046,
											"end": 8137,
											"name": "PUSH [tag]",
											"value": "128"
										},
										{
											"begin": 8046,
											"end": 8137,
											"name": "JUMPI"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 8088,
											"end": 8106,
											"name": "DUP2"
										},
										{
											"begin": 8088,
											"end": 8106,
											"name": "SLOAD"
										},
										{
											"begin": 8124,
											"end": 8136,
											"name": "NUMBER"
										},
										{
											"begin": 8124,
											"end": 8136,
											"name": "SWAP1"
										},
										{
											"begin": 8076,
											"end": 8087,
											"name": "DUP4"
										},
										{
											"begin": 8076,
											"end": 8087,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 8088,
											"end": 8110,
											"name": "DUP2"
										},
										{
											"begin": 8088,
											"end": 8110,
											"name": "ADD"
										},
										{
											"begin": 8088,
											"end": 8110,
											"name": "SWAP1"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "DUP2"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "LT"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "PUSH [tag]",
											"value": "129"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "JUMPI"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "INVALID"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "tag",
											"value": "129"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "JUMPDEST"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "SWAP2"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "DUP3"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "MSTORE"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "SWAP1"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "SWAP2"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "KECCAK256"
										},
										{
											"begin": 8076,
											"end": 8111,
											"name": "ADD"
										},
										{
											"begin": 8076,
											"end": 8121,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 8076,
											"end": 8121,
											"name": "AND"
										},
										{
											"begin": 8076,
											"end": 8136,
											"name": "LT"
										},
										{
											"begin": 8046,
											"end": 8137,
											"name": "tag",
											"value": "128"
										},
										{
											"begin": 8046,
											"end": 8137,
											"name": "JUMPDEST"
										},
										{
											"begin": 8042,
											"end": 8503,
											"name": "ISZERO"
										},
										{
											"begin": 8042,
											"end": 8503,
											"name": "PUSH [tag]",
											"value": "131"
										},
										{
											"begin": 8042,
											"end": 8503,
											"name": "JUMPI"
										},
										{
											"begin": 8201,
											"end": 8221,
											"name": "DUP2"
										},
										{
											"begin": 8201,
											"end": 8221,
											"name": "SLOAD"
										},
										{
											"begin": 8154,
											"end": 8186,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8154,
											"end": 8186,
											"name": "SWAP1"
										},
										{
											"begin": 8189,
											"end": 8200,
											"name": "DUP4"
										},
										{
											"begin": 8189,
											"end": 8200,
											"name": "SWAP1"
										},
										{
											"begin": 8201,
											"end": 8221,
											"name": "PUSH [tag]",
											"value": "132"
										},
										{
											"begin": 8189,
											"end": 8200,
											"name": "DUP3"
										},
										{
											"begin": 8201,
											"end": 8221,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 8201,
											"end": 8221,
											"name": "DUP4"
										},
										{
											"begin": 8201,
											"end": 8221,
											"name": "ADD"
										},
										{
											"begin": 8201,
											"end": 8221,
											"name": "PUSH [tag]",
											"value": "133"
										},
										{
											"begin": 8201,
											"end": 8221,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 8201,
											"end": 8221,
											"name": "tag",
											"value": "132"
										},
										{
											"begin": 8201,
											"end": 8221,
											"name": "JUMPDEST"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "DUP2"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "SLOAD"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "DUP2"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "LT"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "PUSH [tag]",
											"value": "134"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "JUMPI"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "INVALID"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "tag",
											"value": "134"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "JUMPDEST"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "SWAP2"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "DUP3"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "MSTORE"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "SWAP1"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "SWAP2"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "KECCAK256"
										},
										{
											"begin": 8189,
											"end": 8222,
											"name": "ADD"
										},
										{
											"begin": 8237,
											"end": 8284,
											"name": "DUP1"
										},
										{
											"begin": 8237,
											"end": 8284,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 8299,
											"end": 8336,
											"name": "DUP5"
										},
										{
											"begin": 8299,
											"end": 8336,
											"name": "DUP2"
										},
										{
											"begin": 8299,
											"end": 8336,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 8299,
											"end": 8336,
											"name": "MUL"
										},
										{
											"begin": 8271,
											"end": 8283,
											"name": "NUMBER"
										},
										{
											"begin": 8237,
											"end": 8284,
											"name": "DUP3"
										},
										{
											"begin": 8237,
											"end": 8284,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 8237,
											"end": 8284,
											"name": "SWAP1"
										},
										{
											"begin": 8237,
											"end": 8284,
											"name": "SWAP4"
										},
										{
											"begin": 8237,
											"end": 8284,
											"name": "AND"
										},
										{
											"begin": 8237,
											"end": 8284,
											"name": "SWAP3"
										},
										{
											"begin": 8237,
											"end": 8284,
											"name": "SWAP1"
										},
										{
											"begin": 8237,
											"end": 8284,
											"name": "SWAP3"
										},
										{
											"begin": 8237,
											"end": 8284,
											"name": "OR"
										},
										{
											"begin": 8299,
											"end": 8336,
											"name": "AND"
										},
										{
											"begin": 8299,
											"end": 8336,
											"name": "OR"
										},
										{
											"begin": 8299,
											"end": 8336,
											"name": "SWAP1"
										},
										{
											"begin": 8299,
											"end": 8336,
											"name": "SSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 8042,
											"end": 8503,
											"name": "PUSH [tag]",
											"value": "136"
										},
										{
											"begin": 8042,
											"end": 8503,
											"name": "JUMP"
										},
										{
											"begin": 8042,
											"end": 8503,
											"name": "tag",
											"value": "131"
										},
										{
											"begin": 8042,
											"end": 8503,
											"name": "JUMPDEST"
										},
										{
											"begin": 8416,
											"end": 8434,
											"name": "DUP2"
										},
										{
											"begin": 8416,
											"end": 8434,
											"name": "SLOAD"
										},
										{
											"begin": 8369,
											"end": 8401,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8369,
											"end": 8401,
											"name": "SWAP1"
										},
										{
											"begin": 8404,
											"end": 8415,
											"name": "DUP4"
										},
										{
											"begin": 8404,
											"end": 8415,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 8416,
											"end": 8438,
											"name": "DUP2"
										},
										{
											"begin": 8416,
											"end": 8438,
											"name": "ADD"
										},
										{
											"begin": 8416,
											"end": 8438,
											"name": "SWAP1"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "DUP2"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "LT"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "PUSH [tag]",
											"value": "137"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "JUMPI"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "INVALID"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "tag",
											"value": "137"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "JUMPDEST"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "SWAP2"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "DUP3"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "MSTORE"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "SWAP1"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "SWAP2"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "KECCAK256"
										},
										{
											"begin": 8404,
											"end": 8439,
											"name": "ADD"
										},
										{
											"begin": 8454,
											"end": 8491,
											"name": "DUP1"
										},
										{
											"begin": 8454,
											"end": 8491,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 8454,
											"end": 8491,
											"name": "DUP1"
										},
										{
											"begin": 8454,
											"end": 8491,
											"name": "DUP6"
										},
										{
											"begin": 8454,
											"end": 8491,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 8454,
											"end": 8491,
											"name": "MUL"
										},
										{
											"begin": 8454,
											"end": 8491,
											"name": "SWAP2"
										},
										{
											"begin": 8454,
											"end": 8491,
											"name": "AND"
										},
										{
											"begin": 8454,
											"end": 8491,
											"name": "OR"
										},
										{
											"begin": 8454,
											"end": 8491,
											"name": "SWAP1"
										},
										{
											"begin": 8454,
											"end": 8491,
											"name": "SSTORE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 8042,
											"end": 8503,
											"name": "tag",
											"value": "136"
										},
										{
											"begin": 8042,
											"end": 8503,
											"name": "JUMPDEST"
										},
										{
											"begin": 7857,
											"end": 8510,
											"name": "POP"
										},
										{
											"begin": 7857,
											"end": 8510,
											"name": "POP"
										},
										{
											"begin": 7857,
											"end": 8510,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 6766,
											"end": 7633,
											"name": "tag",
											"value": "93"
										},
										{
											"begin": 6766,
											"end": 7633,
											"name": "JUMPDEST"
										},
										{
											"begin": 6883,
											"end": 6901,
											"name": "DUP2"
										},
										{
											"begin": 6883,
											"end": 6901,
											"name": "SLOAD"
										},
										{
											"begin": 6859,
											"end": 6866,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6859,
											"end": 6866,
											"name": "SWAP1"
										},
										{
											"begin": 6879,
											"end": 6943,
											"name": "PUSH [tag]",
											"value": "140"
										},
										{
											"begin": 6879,
											"end": 6943,
											"name": "JUMPI"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 6930,
											"end": 6931,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 6923,
											"end": 6931,
											"name": "PUSH [tag]",
											"value": "55"
										},
										{
											"begin": 6923,
											"end": 6931,
											"name": "JUMP"
										},
										{
											"begin": 6879,
											"end": 6943,
											"name": "tag",
											"value": "140"
										},
										{
											"begin": 6879,
											"end": 6943,
											"name": "JUMPDEST"
										},
										{
											"begin": 7023,
											"end": 7041,
											"name": "DUP3"
										},
										{
											"begin": 7023,
											"end": 7041,
											"name": "SLOAD"
										},
										{
											"begin": 7011,
											"end": 7022,
											"name": "DUP4"
										},
										{
											"begin": 7011,
											"end": 7022,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 7023,
											"end": 7045,
											"name": "DUP2"
										},
										{
											"begin": 7023,
											"end": 7045,
											"name": "ADD"
										},
										{
											"begin": 7023,
											"end": 7045,
											"name": "SWAP1"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "DUP2"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "LT"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "PUSH [tag]",
											"value": "141"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "JUMPI"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "INVALID"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "tag",
											"value": "141"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "JUMPDEST"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "SWAP2"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "DUP3"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "MSTORE"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "SWAP1"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "SWAP2"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "KECCAK256"
										},
										{
											"begin": 7011,
											"end": 7046,
											"name": "ADD"
										},
										{
											"begin": 7011,
											"end": 7056,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 7011,
											"end": 7056,
											"name": "AND"
										},
										{
											"begin": 7001,
											"end": 7056,
											"name": "DUP3"
										},
										{
											"begin": 7001,
											"end": 7056,
											"name": "LT"
										},
										{
											"begin": 6997,
											"end": 7133,
											"name": "PUSH [tag]",
											"value": "143"
										},
										{
											"begin": 6997,
											"end": 7133,
											"name": "JUMPI"
										},
										{
											"begin": 7092,
											"end": 7110,
											"name": "DUP3"
										},
										{
											"begin": 7092,
											"end": 7110,
											"name": "SLOAD"
										},
										{
											"begin": 7080,
											"end": 7091,
											"name": "DUP4"
										},
										{
											"begin": 7080,
											"end": 7091,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 7092,
											"end": 7114,
											"name": "DUP2"
										},
										{
											"begin": 7092,
											"end": 7114,
											"name": "ADD"
										},
										{
											"begin": 7092,
											"end": 7114,
											"name": "SWAP1"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "DUP2"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "LT"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "PUSH [tag]",
											"value": "144"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "JUMPI"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "INVALID"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "tag",
											"value": "144"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "JUMPDEST"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "SWAP2"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "DUP3"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "MSTORE"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "SWAP1"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "SWAP2"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "KECCAK256"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "ADD"
										},
										{
											"begin": 7080,
											"end": 7121,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 7080,
											"end": 7121,
											"name": "SWAP1"
										},
										{
											"begin": 7080,
											"end": 7121,
											"name": "DIV"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 7080,
											"end": 7121,
											"name": "AND"
										},
										{
											"begin": 7080,
											"end": 7121,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 7073,
											"end": 7121,
											"name": "PUSH [tag]",
											"value": "55"
										},
										{
											"begin": 7073,
											"end": 7121,
											"name": "JUMP"
										},
										{
											"begin": 6997,
											"end": 7133,
											"name": "tag",
											"value": "143"
										},
										{
											"begin": 6997,
											"end": 7133,
											"name": "JUMPDEST"
										},
										{
											"begin": 7156,
											"end": 7167,
											"name": "DUP3"
										},
										{
											"begin": 7168,
											"end": 7169,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "DUP2"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "SLOAD"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "DUP2"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "LT"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "PUSH [tag]",
											"value": "146"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "JUMPI"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "INVALID"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "tag",
											"value": "146"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "JUMPDEST"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "SWAP2"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "DUP3"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "MSTORE"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "SWAP1"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "SWAP2"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "KECCAK256"
										},
										{
											"begin": 7156,
											"end": 7170,
											"name": "ADD"
										},
										{
											"begin": 7156,
											"end": 7180,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 7156,
											"end": 7180,
											"name": "AND"
										},
										{
											"begin": 7147,
											"end": 7180,
											"name": "DUP3"
										},
										{
											"begin": 7147,
											"end": 7180,
											"name": "LT"
										},
										{
											"begin": 7143,
											"end": 7217,
											"name": "ISZERO"
										},
										{
											"begin": 7143,
											"end": 7217,
											"name": "PUSH [tag]",
											"value": "148"
										},
										{
											"begin": 7143,
											"end": 7217,
											"name": "JUMPI"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 7204,
											"end": 7205,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7197,
											"end": 7205,
											"name": "PUSH [tag]",
											"value": "55"
										},
										{
											"begin": 7197,
											"end": 7205,
											"name": "JUMP"
										},
										{
											"begin": 7143,
											"end": 7217,
											"name": "tag",
											"value": "148"
										},
										{
											"begin": 7143,
											"end": 7217,
											"name": "JUMPDEST"
										},
										{
											"begin": 7321,
											"end": 7339,
											"name": "DUP3"
										},
										{
											"begin": 7321,
											"end": 7339,
											"name": "SLOAD"
										},
										{
											"begin": 7281,
											"end": 7292,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7281,
											"end": 7292,
											"name": "SWAP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 7321,
											"end": 7343,
											"name": "ADD"
										},
										{
											"begin": 7354,
											"end": 7586,
											"name": "tag",
											"value": "149"
										},
										{
											"begin": 7354,
											"end": 7586,
											"name": "JUMPDEST"
										},
										{
											"begin": 7367,
											"end": 7370,
											"name": "DUP2"
										},
										{
											"begin": 7361,
											"end": 7364,
											"name": "DUP2"
										},
										{
											"begin": 7361,
											"end": 7370,
											"name": "GT"
										},
										{
											"begin": 7354,
											"end": 7586,
											"name": "ISZERO"
										},
										{
											"begin": 7354,
											"end": 7586,
											"name": "PUSH [tag]",
											"value": "150"
										},
										{
											"begin": 7354,
											"end": 7586,
											"name": "JUMPI"
										},
										{
											"begin": 7387,
											"end": 7398,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7419,
											"end": 7420,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 7414,
											"end": 7415,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 7402,
											"end": 7411,
											"name": "DUP4"
										},
										{
											"begin": 7402,
											"end": 7411,
											"name": "DUP6"
										},
										{
											"begin": 7402,
											"end": 7411,
											"name": "ADD"
										},
										{
											"begin": 7402,
											"end": 7415,
											"name": "ADD"
										},
										{
											"begin": 7401,
											"end": 7420,
											"name": "DIV"
										},
										{
											"begin": 7387,
											"end": 7420,
											"name": "SWAP1"
										},
										{
											"begin": 7387,
											"end": 7420,
											"name": "POP"
										},
										{
											"begin": 7469,
											"end": 7475,
											"name": "DUP5"
										},
										{
											"begin": 7439,
											"end": 7450,
											"name": "DUP7"
										},
										{
											"begin": 7451,
											"end": 7454,
											"name": "DUP3"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "DUP2"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "SLOAD"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "DUP2"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "LT"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "PUSH [tag]",
											"value": "152"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "JUMPI"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "INVALID"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "tag",
											"value": "152"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "JUMPDEST"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "SWAP2"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "DUP3"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "MSTORE"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "SWAP1"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "SWAP2"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "KECCAK256"
										},
										{
											"begin": 7439,
											"end": 7455,
											"name": "ADD"
										},
										{
											"begin": 7439,
											"end": 7465,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 7439,
											"end": 7465,
											"name": "AND"
										},
										{
											"begin": 7439,
											"end": 7475,
											"name": "GT"
										},
										{
											"begin": 7435,
											"end": 7575,
											"name": "PUSH [tag]",
											"value": "154"
										},
										{
											"begin": 7435,
											"end": 7575,
											"name": "JUMPI"
										},
										{
											"begin": 7502,
											"end": 7505,
											"name": "DUP1"
										},
										{
											"begin": 7496,
											"end": 7505,
											"name": "SWAP3"
										},
										{
											"begin": 7496,
											"end": 7505,
											"name": "POP"
										},
										{
											"begin": 7435,
											"end": 7575,
											"name": "PUSH [tag]",
											"value": "155"
										},
										{
											"begin": 7435,
											"end": 7575,
											"name": "JUMP"
										},
										{
											"begin": 7435,
											"end": 7575,
											"name": "tag",
											"value": "154"
										},
										{
											"begin": 7435,
											"end": 7575,
											"name": "JUMPDEST"
										},
										{
											"begin": 7558,
											"end": 7559,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 7552,
											"end": 7555,
											"name": "DUP2"
										},
										{
											"begin": 7552,
											"end": 7559,
											"name": "SUB"
										},
										{
											"begin": 7546,
											"end": 7559,
											"name": "SWAP2"
										},
										{
											"begin": 7546,
											"end": 7559,
											"name": "POP"
										},
										{
											"begin": 7435,
											"end": 7575,
											"name": "tag",
											"value": "155"
										},
										{
											"begin": 7435,
											"end": 7575,
											"name": "JUMPDEST"
										},
										{
											"begin": 7354,
											"end": 7586,
											"name": "POP"
										},
										{
											"begin": 7354,
											"end": 7586,
											"name": "PUSH [tag]",
											"value": "149"
										},
										{
											"begin": 7354,
											"end": 7586,
											"name": "JUMP"
										},
										{
											"begin": 7354,
											"end": 7586,
											"name": "tag",
											"value": "150"
										},
										{
											"begin": 7354,
											"end": 7586,
											"name": "JUMPDEST"
										},
										{
											"begin": 7603,
											"end": 7614,
											"name": "DUP5"
										},
										{
											"begin": 7615,
											"end": 7618,
											"name": "DUP3"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "DUP2"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "SLOAD"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "DUP2"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "LT"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "PUSH [tag]",
											"value": "156"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "JUMPI"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "INVALID"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "tag",
											"value": "156"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "JUMPDEST"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "SWAP2"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "DUP3"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "MSTORE"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "SWAP1"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "SWAP2"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "KECCAK256"
										},
										{
											"begin": 7603,
											"end": 7619,
											"name": "ADD"
										},
										{
											"begin": 7603,
											"end": 7625,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 7603,
											"end": 7625,
											"name": "SWAP1"
										},
										{
											"begin": 7603,
											"end": 7625,
											"name": "DIV"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 7603,
											"end": 7625,
											"name": "AND"
										},
										{
											"begin": 7603,
											"end": 7625,
											"name": "SWAP6"
										},
										{
											"begin": 6766,
											"end": 7633,
											"name": "SWAP5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP"
										},
										{
											"begin": 6766,
											"end": 7633,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 788,
											"end": 884,
											"name": "tag",
											"value": "103"
										},
										{
											"begin": 788,
											"end": 884,
											"name": "JUMPDEST"
										},
										{
											"begin": 867,
											"end": 877,
											"name": "CALLER"
										},
										{
											"begin": 788,
											"end": 884,
											"name": "SWAP1"
										},
										{
											"begin": 788,
											"end": 884,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 2136,
											"end": 2361,
											"name": "tag",
											"value": "125"
										},
										{
											"begin": 2136,
											"end": 2361,
											"name": "JUMPDEST"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 2209,
											"end": 2231,
											"name": "DUP2"
										},
										{
											"begin": 2209,
											"end": 2231,
											"name": "AND"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "PUSH [tag]",
											"value": "160"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "JUMPI"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "DUP2"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "MSTORE"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "ADD"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "DUP1"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "DUP1"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "ADD"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "DUP3"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "DUP2"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "SUB"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "DUP3"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "MSTORE"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "PUSH",
											"value": "26"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "DUP2"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "MSTORE"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "ADD"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "DUP1"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "PUSH data",
											"value": "245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "PUSH",
											"value": "26"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "SWAP2"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "CODECOPY"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "ADD"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "SWAP2"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "POP"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "POP"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "MLOAD"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "DUP1"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "SWAP2"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "SUB"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "SWAP1"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "REVERT"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "tag",
											"value": "160"
										},
										{
											"begin": 2201,
											"end": 2274,
											"name": "JUMPDEST"
										},
										{
											"begin": 2310,
											"end": 2316,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2310,
											"end": 2316,
											"name": "DUP1"
										},
										{
											"begin": 2310,
											"end": 2316,
											"name": "SLOAD"
										},
										{
											"begin": 2289,
											"end": 2327,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 2289,
											"end": 2327,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 2289,
											"end": 2327,
											"name": "DUP1"
										},
										{
											"begin": 2289,
											"end": 2327,
											"name": "DUP6"
										},
										{
											"begin": 2289,
											"end": 2327,
											"name": "AND"
										},
										{
											"begin": 2289,
											"end": 2327,
											"name": "SWAP4"
										},
										{
											"begin": 2310,
											"end": 2316,
											"name": "SWAP3"
										},
										{
											"begin": 2310,
											"end": 2316,
											"name": "AND"
										},
										{
											"begin": 2310,
											"end": 2316,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"value": "9C064737B570A74C2BAC5D21056D93AC53115214216CD14D4A0FC9B60BE81231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE"
										},
										{
											"begin": 2289,
											"end": 2327,
											"name": "SWAP2"
										},
										{
											"begin": 2289,
											"end": 2327,
											"name": "LOG3"
										},
										{
											"begin": 2337,
											"end": 2343,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "DUP1"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "SLOAD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "AND"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "SWAP3"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "SWAP1"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "SWAP3"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "AND"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "SWAP2"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "SWAP1"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "SWAP2"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "OR"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "SWAP1"
										},
										{
											"begin": 2337,
											"end": 2354,
											"name": "SSTORE"
										},
										{
											"begin": 2136,
											"end": 2361,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "tag",
											"value": "133"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPDEST"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP2"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "SLOAD"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP2"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP4"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "SSTORE"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP2"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP2"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "GT"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "ISZERO"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "162"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP4"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP2"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "MSTORE"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "SWAP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "KECCAK256"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "162"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "SWAP2"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP2"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "ADD"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "SWAP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP4"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "ADD"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "163"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "tag",
											"value": "162"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPDEST"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "POP"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "POP"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "POP"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "tag",
											"value": "163"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPDEST"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "74"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "SWAP2"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "SWAP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "tag",
											"value": "165"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPDEST"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP3"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "GT"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "ISZERO"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "166"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPI"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "DUP2"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "SSTORE"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "ADD"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "PUSH [tag]",
											"value": "165"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMP"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "tag",
											"value": "166"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMPDEST"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "POP"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "SWAP1"
										},
										{
											"begin": 678,
											"end": 8513,
											"name": "JUMP"
										}
									],
									".data": {
										"245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
										"9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
										"9C064737B570A74C2BAC5D21056D93AC53115214216CD14D4A0FC9B60BE81231": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
										"FAEF6C4EB5D567B942C0732EB539A574877571781FCFE7E88EBBCACC7E2FA7EF": "0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885"
									}
								}
							}
						},
						"methodIdentifiers": {
							"balanceOf(address)": "70a08231",
							"balanceOfAt(address,uint256)": "4ee2cd7e",
							"burn(address,uint256)": "9dc29fac",
							"decimals()": "313ce567",
							"isOwner()": "8f32d59b",
							"mint(address,uint256)": "40c10f19",
							"mintMultiple(address[],uint256[])": "07ea5477",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"totalSupply()": "18160ddd",
							"totalSupplyAt(uint256)": "981b24d0",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"^0.8.0+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"mintMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A DAO has Reputation System which allows peers to rate other peers in order to build trust . A reputation is use to assign influence measure to a DAO'S peers. Reputation is similar to regular tokens but with one crucial difference: It is non-transferable. The Reputation contract maintain a map of address to reputation value. It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\",\"methods\":{\"balanceOf(address)\":{\"details\":\"return the reputation amount of a given owner\",\"params\":{\"_owner\":\"an address of the owner which we want to get his reputation\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Reputation system\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/daostack/controller/Reputation.sol\":\"Reputation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/daostack/controller/Reputation.sol\":{\"keccak256\":\"0x45b64e49aa35daf916ec947e647b431e33a1822a0336022b4d0a0ebfa6f6e399\",\"urls\":[\"bzz-raw://c1a3ec9fa77bcc7988f5558c336985fb202d14126a821571188a85880ebd51cc\",\"dweb:/ipfs/QmcZ6mfZzVgYHqmtHEy26ekg3Tf35BHJcR4QSyv7fL2U1s\"]},\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\",\"urls\":[\"bzz-raw://216ef9d6b614db4eb46970b4e84903f2534a45572dd30a79f0041f1a5830f436\",\"dweb:/ipfs/QmNPrJ4MWKUAWzKXpUqeyKRUfosaoANZAqXgvepdrCwZAG\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0xecd8ab29d9a5771c3964d0cd1788c4a5098a0081b20fb275da850a22b1c59806\",\"urls\":[\"bzz-raw://696a75bc2c55407ce8251ccc7d19ecb1b7b2be1796a160a6524312babcc7e3d4\",\"dweb:/ipfs/QmQViKEp3y99h9uhRssE29TmjBKRnFMaoz3eJZ4eggggg2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 554,
								"contract": "contracts/daostack/controller/Reputation.sol:Reputation",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 7,
								"contract": "contracts/daostack/controller/Reputation.sol:Reputation",
								"label": "decimals",
								"offset": 20,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 29,
								"contract": "contracts/daostack/controller/Reputation.sol:Reputation",
								"label": "balances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_array(t_struct(Checkpoint)24_storage)dyn_storage)"
							},
							{
								"astId": 32,
								"contract": "contracts/daostack/controller/Reputation.sol:Reputation",
								"label": "totalSupplyHistory",
								"offset": 0,
								"slot": "2",
								"type": "t_array(t_struct(Checkpoint)24_storage)dyn_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_struct(Checkpoint)24_storage)dyn_storage": {
								"base": "t_struct(Checkpoint)24_storage",
								"encoding": "dynamic_array",
								"label": "struct Reputation.Checkpoint[]",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_array(t_struct(Checkpoint)24_storage)dyn_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Reputation.Checkpoint[])",
								"numberOfBytes": "32",
								"value": "t_array(t_struct(Checkpoint)24_storage)dyn_storage"
							},
							"t_struct(Checkpoint)24_storage": {
								"encoding": "inplace",
								"label": "struct Reputation.Checkpoint",
								"members": [
									{
										"astId": 21,
										"contract": "contracts/daostack/controller/Reputation.sol:Reputation",
										"label": "fromBlock",
										"offset": 0,
										"slot": "0",
										"type": "t_uint128"
									},
									{
										"astId": 23,
										"contract": "contracts/daostack/controller/Reputation.sol:Reputation",
										"label": "value",
										"offset": 16,
										"slot": "0",
										"type": "t_uint128"
									}
								],
								"numberOfBytes": "32"
							},
							"t_uint128": {
								"encoding": "inplace",
								"label": "uint128",
								"numberOfBytes": "16"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"openzeppelin-solidity/contracts/GSN/Context.sol": {
				"Context": {
					"abi": [
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"^0.8.0+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\",\"urls\":[\"bzz-raw://216ef9d6b614db4eb46970b4e84903f2534a45572dd30a79f0041f1a5830f436\",\"dweb:/ipfs/QmNPrJ4MWKUAWzKXpUqeyKRUfosaoANZAqXgvepdrCwZAG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			},
			"openzeppelin-solidity/contracts/ownership/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "isOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. * This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"isOwner()": {
								"details": "Returns true if the caller is the current owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						}
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"isOwner()": "8f32d59b",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"^0.8.0+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. * This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\",\"urls\":[\"bzz-raw://216ef9d6b614db4eb46970b4e84903f2534a45572dd30a79f0041f1a5830f436\",\"dweb:/ipfs/QmNPrJ4MWKUAWzKXpUqeyKRUfosaoANZAqXgvepdrCwZAG\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0xecd8ab29d9a5771c3964d0cd1788c4a5098a0081b20fb275da850a22b1c59806\",\"urls\":[\"bzz-raw://696a75bc2c55407ce8251ccc7d19ecb1b7b2be1796a160a6524312babcc7e3d4\",\"dweb:/ipfs/QmQViKEp3y99h9uhRssE29TmjBKRnFMaoz3eJZ4eggggg2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 554,
								"contract": "openzeppelin-solidity/contracts/ownership/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"contracts/daostack/controller/Reputation.sol": {
				"ast": {
					"absolutePath": "contracts/daostack/controller/Reputation.sol",
					"exportedSymbols": {
						"Reputation": [
							520
						]
					},
					"id": 521,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.5",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"absolutePath": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
							"file": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 521,
							"sourceUnit": 662,
							"src": "27:63:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 3,
										"name": "Ownable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 661,
										"src": "701:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Ownable_$661",
											"typeString": "contract Ownable"
										}
									},
									"id": 4,
									"nodeType": "InheritanceSpecifier",
									"src": "701:7:0"
								}
							],
							"contractDependencies": [
								547,
								661
							],
							"contractKind": "contract",
							"documentation": "@title Reputation system\n@dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\nA reputation is use to assign influence measure to a DAO'S peers.\nReputation is similar to regular tokens but with one crucial difference: It is non-transferable.\nThe Reputation contract maintain a map of address to reputation value.\nIt provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.",
							"fullyImplemented": true,
							"id": 520,
							"linearizedBaseContracts": [
								520,
								661,
								547
							],
							"name": "Reputation",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"name": "decimals",
									"nodeType": "VariableDeclaration",
									"scope": 520,
									"src": "716:26:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 5,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "716:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"argumentTypes": null,
										"hexValue": "3138",
										"id": 6,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "740:2:0",
										"subdenomination": null,
										"typeDescriptions": {
											"typeIdentifier": "t_rational_18_by_1",
											"typeString": "int_const 18"
										},
										"value": "18"
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 13,
									"name": "Mint",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "864:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "864:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": false,
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "885:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 10,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "863:38:0"
									},
									"src": "853:49:0"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 19,
									"name": "Burn",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 15,
												"indexed": true,
												"name": "_from",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "982:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 14,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 17,
												"indexed": false,
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "1005:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 16,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1005:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "981:40:0"
									},
									"src": "971:51:0"
								},
								{
									"canonicalName": "Reputation.Checkpoint",
									"id": 24,
									"members": [
										{
											"constant": false,
											"id": 21,
											"name": "fromBlock",
											"nodeType": "VariableDeclaration",
											"scope": 24,
											"src": "1310:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 20,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "1310:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"value": null,
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 23,
											"name": "value",
											"nodeType": "VariableDeclaration",
											"scope": 24,
											"src": "1413:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint128",
												"typeString": "uint128"
											},
											"typeName": {
												"id": 22,
												"name": "uint128",
												"nodeType": "ElementaryTypeName",
												"src": "1413:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												}
											},
											"value": null,
											"visibility": "internal"
										}
									],
									"name": "Checkpoint",
									"nodeType": "StructDefinition",
									"scope": 520,
									"src": "1203:231:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 29,
									"name": "balances",
									"nodeType": "VariableDeclaration",
									"scope": 520,
									"src": "1643:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_$",
										"typeString": "mapping(address => struct Reputation.Checkpoint[])"
									},
									"typeName": {
										"id": 28,
										"keyType": {
											"id": 25,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1651:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1643:32:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_$",
											"typeString": "mapping(address => struct Reputation.Checkpoint[])"
										},
										"valueType": {
											"baseType": {
												"contractScope": null,
												"id": 26,
												"name": "Checkpoint",
												"nodeType": "UserDefinedTypeName",
												"referencedDeclaration": 24,
												"src": "1662:10:0",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Checkpoint_$24_storage_ptr",
													"typeString": "struct Reputation.Checkpoint"
												}
											},
											"id": 27,
											"length": null,
											"nodeType": "ArrayTypeName",
											"src": "1662:12:0",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
												"typeString": "struct Reputation.Checkpoint[]"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 32,
									"name": "totalSupplyHistory",
									"nodeType": "VariableDeclaration",
									"scope": 520,
									"src": "1767:39:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
										"typeString": "struct Reputation.Checkpoint[]"
									},
									"typeName": {
										"baseType": {
											"contractScope": null,
											"id": 30,
											"name": "Checkpoint",
											"nodeType": "UserDefinedTypeName",
											"referencedDeclaration": 24,
											"src": "1767:10:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Checkpoint_$24_storage_ptr",
												"typeString": "struct Reputation.Checkpoint"
											}
										},
										"id": 31,
										"length": null,
										"nodeType": "ArrayTypeName",
										"src": "1767:12:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
											"typeString": "struct Reputation.Checkpoint[]"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 93,
										"nodeType": "Block",
										"src": "2167:490:0",
										"statements": [
											{
												"assignments": [
													44
												],
												"declarations": [
													{
														"constant": false,
														"id": 44,
														"name": "curTotalSupply",
														"nodeType": "VariableDeclaration",
														"scope": 93,
														"src": "2178:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 43,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2178:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 47,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 45,
														"name": "totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 257,
														"src": "2203:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2203:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2178:38:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 49,
																	"name": "curTotalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 44,
																	"src": "2235:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 50,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 36,
																	"src": "2252:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2235:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 52,
																"name": "curTotalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 44,
																"src": "2263:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2235:42:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 48,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															679,
															680
														],
														"referencedDeclaration": 679,
														"src": "2227:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2227:51:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "2227:51:0"
											},
											{
												"assignments": [
													57
												],
												"declarations": [
													{
														"constant": false,
														"id": 57,
														"name": "previousBalanceTo",
														"nodeType": "VariableDeclaration",
														"scope": 93,
														"src": "2311:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 56,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2311:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 61,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 59,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 34,
															"src": "2349:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 58,
														"name": "balanceOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 271,
														"src": "2339:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 60,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2339:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2311:44:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 67,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 65,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 63,
																	"name": "previousBalanceTo",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 57,
																	"src": "2374:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 64,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 36,
																	"src": "2394:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2374:27:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 66,
																"name": "previousBalanceTo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 57,
																"src": "2405:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2374:48:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 62,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															679,
															680
														],
														"referencedDeclaration": 679,
														"src": "2366:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 68,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2366:57:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 69,
												"nodeType": "ExpressionStatement",
												"src": "2366:57:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 71,
															"name": "totalSupplyHistory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 32,
															"src": "2473:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
															}
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 72,
																"name": "curTotalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 44,
																"src": "2493:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"argumentTypes": null,
																"id": 73,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 36,
																"src": "2510:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2493:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 70,
														"name": "updateValueAtNow",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "2456:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$",
															"typeString": "function (struct Reputation.Checkpoint storage ref[] storage pointer,uint256)"
														}
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2456:62:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 76,
												"nodeType": "ExpressionStatement",
												"src": "2456:62:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 78,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 29,
																"src": "2546:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_$",
																	"typeString": "mapping(address => struct Reputation.Checkpoint storage ref[] storage ref)"
																}
															},
															"id": 80,
															"indexExpression": {
																"argumentTypes": null,
																"id": 79,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 34,
																"src": "2555:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2546:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
															}
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 81,
																"name": "previousBalanceTo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 57,
																"src": "2563:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"argumentTypes": null,
																"id": 82,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 36,
																"src": "2583:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2563:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 77,
														"name": "updateValueAtNow",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "2529:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$",
															"typeString": "function (struct Reputation.Checkpoint storage ref[] storage pointer,uint256)"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2529:62:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2529:62:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 87,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 34,
															"src": "2612:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 88,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 36,
															"src": "2619:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 86,
														"name": "Mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2607:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 89,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2607:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 90,
												"nodeType": "EmitStatement",
												"src": "2602:25:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 91,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2645:4:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 42,
												"id": 92,
												"nodeType": "Return",
												"src": "2638:11:0"
											}
										]
									},
									"documentation": null,
									"id": 94,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 39,
											"modifierName": {
												"argumentTypes": null,
												"id": 38,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 594,
												"src": "2142:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2142:9:0"
										}
									],
									"name": "mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "2103:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 33,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2103:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 36,
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "2118:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 35,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2118:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2102:32:0"
									},
									"returnParameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "2161:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 40,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2161:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2160:6:0"
									},
									"scope": 520,
									"src": "2089:568:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 186,
										"nodeType": "Block",
										"src": "3043:607:0",
										"statements": [
											{
												"body": {
													"id": 182,
													"nodeType": "Block",
													"src": "3097:524:0",
													"statements": [
														{
															"assignments": [
																119
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 119,
																	"name": "curTotalSupply",
																	"nodeType": "VariableDeclaration",
																	"scope": 182,
																	"src": "3112:22:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 118,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3112:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 122,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 120,
																	"name": "totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 257,
																	"src": "3137:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 121,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3137:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3112:38:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 130,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 128,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"argumentTypes": null,
																				"id": 124,
																				"name": "curTotalSupply",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 119,
																				"src": "3173:14:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"argumentTypes": null,
																				"baseExpression": {
																					"argumentTypes": null,
																					"id": 125,
																					"name": "_amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 100,
																					"src": "3190:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																						"typeString": "uint256[] memory"
																					}
																				},
																				"id": 127,
																				"indexExpression": {
																					"argumentTypes": null,
																					"id": 126,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 108,
																					"src": "3198:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "3190:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3173:27:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"argumentTypes": null,
																			"id": 129,
																			"name": "curTotalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 119,
																			"src": "3204:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3173:45:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 123,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		679,
																		680
																	],
																	"referencedDeclaration": 679,
																	"src": "3165:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 131,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3165:54:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 132,
															"nodeType": "ExpressionStatement",
															"src": "3165:54:0"
														},
														{
															"assignments": [
																134
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 134,
																	"name": "previousBalanceTo",
																	"nodeType": "VariableDeclaration",
																	"scope": 182,
																	"src": "3256:25:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 133,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "3256:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 140,
															"initialValue": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 136,
																			"name": "_user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 97,
																			"src": "3294:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																				"typeString": "address[] memory"
																			}
																		},
																		"id": 138,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 137,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 108,
																			"src": "3300:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3294:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 135,
																	"name": "balanceOf",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 271,
																	"src": "3284:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view returns (uint256)"
																	}
																},
																"id": 139,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3284:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3256:47:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 146,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"argumentTypes": null,
																				"id": 142,
																				"name": "previousBalanceTo",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 134,
																				"src": "3326:17:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"argumentTypes": null,
																				"baseExpression": {
																					"argumentTypes": null,
																					"id": 143,
																					"name": "_amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 100,
																					"src": "3346:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																						"typeString": "uint256[] memory"
																					}
																				},
																				"id": 145,
																				"indexExpression": {
																					"argumentTypes": null,
																					"id": 144,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 108,
																					"src": "3354:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "3346:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3326:30:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"argumentTypes": null,
																			"id": 147,
																			"name": "previousBalanceTo",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 134,
																			"src": "3360:17:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3326:51:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 141,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		679,
																		680
																	],
																	"referencedDeclaration": 679,
																	"src": "3318:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
																		"typeString": "function (bool) pure"
																	}
																},
																"id": 149,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3318:60:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 150,
															"nodeType": "ExpressionStatement",
															"src": "3318:60:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 152,
																		"name": "totalSupplyHistory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 32,
																		"src": "3432:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 157,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"id": 153,
																			"name": "curTotalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 119,
																			"src": "3452:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"argumentTypes": null,
																			"baseExpression": {
																				"argumentTypes": null,
																				"id": 154,
																				"name": "_amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 100,
																				"src": "3469:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																					"typeString": "uint256[] memory"
																				}
																			},
																			"id": 156,
																			"indexExpression": {
																				"argumentTypes": null,
																				"id": 155,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 108,
																				"src": "3477:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3469:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3452:27:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 151,
																	"name": "updateValueAtNow",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 519,
																	"src": "3415:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$",
																		"typeString": "function (struct Reputation.Checkpoint storage ref[] storage pointer,uint256)"
																	}
																},
																"id": 158,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3415:65:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 159,
															"nodeType": "ExpressionStatement",
															"src": "3415:65:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 161,
																			"name": "balances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 29,
																			"src": "3512:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_$",
																				"typeString": "mapping(address => struct Reputation.Checkpoint storage ref[] storage ref)"
																			}
																		},
																		"id": 165,
																		"indexExpression": {
																			"argumentTypes": null,
																			"baseExpression": {
																				"argumentTypes": null,
																				"id": 162,
																				"name": "_user",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 97,
																				"src": "3521:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																					"typeString": "address[] memory"
																				}
																			},
																			"id": 164,
																			"indexExpression": {
																				"argumentTypes": null,
																				"id": 163,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 108,
																				"src": "3527:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3521:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3512:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 170,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"id": 166,
																			"name": "previousBalanceTo",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 134,
																			"src": "3532:17:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"argumentTypes": null,
																			"baseExpression": {
																				"argumentTypes": null,
																				"id": 167,
																				"name": "_amount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 100,
																				"src": "3552:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																					"typeString": "uint256[] memory"
																				}
																			},
																			"id": 169,
																			"indexExpression": {
																				"argumentTypes": null,
																				"id": 168,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 108,
																				"src": "3560:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3552:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3532:30:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 160,
																	"name": "updateValueAtNow",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 519,
																	"src": "3495:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$",
																		"typeString": "function (struct Reputation.Checkpoint storage ref[] storage pointer,uint256)"
																	}
																},
																"id": 171,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3495:68:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 172,
															"nodeType": "ExpressionStatement",
															"src": "3495:68:0"
														},
														{
															"eventCall": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 174,
																			"name": "_user",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 97,
																			"src": "3588:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																				"typeString": "address[] memory"
																			}
																		},
																		"id": 176,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 175,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 108,
																			"src": "3594:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3588:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 177,
																			"name": "_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 100,
																			"src": "3598:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																				"typeString": "uint256[] memory"
																			}
																		},
																		"id": 179,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 178,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 108,
																			"src": "3606:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3598:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 173,
																	"name": "Mint",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "3583:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 180,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3583:26:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 181,
															"nodeType": "EmitStatement",
															"src": "3578:31:0"
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 111,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 108,
														"src": "3074:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 112,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 97,
															"src": "3078:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														"id": 113,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "3078:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3074:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 183,
												"initializationExpression": {
													"assignments": [
														108
													],
													"declarations": [
														{
															"constant": false,
															"id": 108,
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 183,
															"src": "3059:9:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 107,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3059:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"value": null,
															"visibility": "internal"
														}
													],
													"id": 110,
													"initialValue": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 109,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3071:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "3059:13:0"
												},
												"loopExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 116,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "3092:3:0",
														"subExpression": {
															"argumentTypes": null,
															"id": 115,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 108,
															"src": "3092:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 117,
													"nodeType": "ExpressionStatement",
													"src": "3092:3:0"
												},
												"nodeType": "ForStatement",
												"src": "3054:567:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 184,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3638:4:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 106,
												"id": 185,
												"nodeType": "Return",
												"src": "3631:11:0"
											}
										]
									},
									"documentation": null,
									"id": 187,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 103,
											"modifierName": {
												"argumentTypes": null,
												"id": 102,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 594,
												"src": "3018:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3018:9:0"
										}
									],
									"name": "mintMultiple",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "2961:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 95,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "2961:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 96,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "2961:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 100,
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "2985:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 98,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2985:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 99,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "2985:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2960:50:0"
									},
									"returnParameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "3037:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 104,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3037:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3036:6:0"
									},
									"scope": 520,
									"src": "2939:711:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 245,
										"nodeType": "Block",
										"src": "3974:487:0",
										"statements": [
											{
												"assignments": [
													199
												],
												"declarations": [
													{
														"constant": false,
														"id": 199,
														"name": "curTotalSupply",
														"nodeType": "VariableDeclaration",
														"scope": 245,
														"src": "3985:22:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 198,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3985:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 202,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 200,
														"name": "totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 257,
														"src": "4010:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4010:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3985:38:0"
											},
											{
												"assignments": [
													204
												],
												"declarations": [
													{
														"constant": false,
														"id": 204,
														"name": "amountBurned",
														"nodeType": "VariableDeclaration",
														"scope": 245,
														"src": "4034:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 203,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4034:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 206,
												"initialValue": {
													"argumentTypes": null,
													"id": 205,
													"name": "_amount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 191,
													"src": "4057:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4034:30:0"
											},
											{
												"assignments": [
													208
												],
												"declarations": [
													{
														"constant": false,
														"id": 208,
														"name": "previousBalanceFrom",
														"nodeType": "VariableDeclaration",
														"scope": 245,
														"src": "4075:27:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 207,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4075:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 212,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 210,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 189,
															"src": "4115:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 209,
														"name": "balanceOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 271,
														"src": "4105:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4105:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4075:46:0"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 213,
														"name": "previousBalanceFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 208,
														"src": "4136:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"id": 214,
														"name": "amountBurned",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 204,
														"src": "4158:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4136:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 221,
												"nodeType": "IfStatement",
												"src": "4132:101:0",
												"trueBody": {
													"id": 220,
													"nodeType": "Block",
													"src": "4172:61:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 218,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 216,
																	"name": "amountBurned",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 204,
																	"src": "4187:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"id": 217,
																	"name": "previousBalanceFrom",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 208,
																	"src": "4202:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4187:34:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 219,
															"nodeType": "ExpressionStatement",
															"src": "4187:34:0"
														}
													]
												}
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 223,
															"name": "totalSupplyHistory",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 32,
															"src": "4260:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
															}
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 226,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 224,
																"name": "curTotalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 199,
																"src": "4280:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"argumentTypes": null,
																"id": 225,
																"name": "amountBurned",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 204,
																"src": "4297:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4280:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 222,
														"name": "updateValueAtNow",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "4243:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$",
															"typeString": "function (struct Reputation.Checkpoint storage ref[] storage pointer,uint256)"
														}
													},
													"id": 227,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4243:67:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 228,
												"nodeType": "ExpressionStatement",
												"src": "4243:67:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 230,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 29,
																"src": "4338:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_$",
																	"typeString": "mapping(address => struct Reputation.Checkpoint storage ref[] storage ref)"
																}
															},
															"id": 232,
															"indexExpression": {
																"argumentTypes": null,
																"id": 231,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 189,
																"src": "4347:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4338:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
															}
														},
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 235,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 233,
																"name": "previousBalanceFrom",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 208,
																"src": "4355:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"argumentTypes": null,
																"id": 234,
																"name": "amountBurned",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 204,
																"src": "4377:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4355:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 229,
														"name": "updateValueAtNow",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 519,
														"src": "4321:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$",
															"typeString": "function (struct Reputation.Checkpoint storage ref[] storage pointer,uint256)"
														}
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4321:69:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 237,
												"nodeType": "ExpressionStatement",
												"src": "4321:69:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 239,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 189,
															"src": "4411:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 240,
															"name": "amountBurned",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 204,
															"src": "4418:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 238,
														"name": "Burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 19,
														"src": "4406:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4406:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 242,
												"nodeType": "EmitStatement",
												"src": "4401:30:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 243,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4449:4:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 197,
												"id": 244,
												"nodeType": "Return",
												"src": "4442:11:0"
											}
										]
									},
									"documentation": null,
									"id": 246,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 194,
											"modifierName": {
												"argumentTypes": null,
												"id": 193,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 594,
												"src": "3949:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3949:9:0"
										}
									],
									"name": "burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3910:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3910:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 191,
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3925:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3925:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3909:32:0"
									},
									"returnParameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "3968:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 195,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3968:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3967:6:0"
									},
									"scope": 520,
									"src": "3896:565:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 256,
										"nodeType": "Block",
										"src": "4648:53:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 252,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 666,
																"src": "4680:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "number",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "4680:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 251,
														"name": "totalSupplyAt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 302,
														"src": "4666:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4666:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 250,
												"id": 255,
												"nodeType": "Return",
												"src": "4659:34:0"
											}
										]
									},
									"documentation": null,
									"id": 257,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4615:2:0"
									},
									"returnParameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 249,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "4639:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4639:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4638:9:0"
									},
									"scope": 520,
									"src": "4595:106:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 270,
										"nodeType": "Block",
										"src": "5034:59:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 265,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 259,
															"src": "5064:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 266,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 666,
																"src": "5072:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 267,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "number",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "5072:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 264,
														"name": "balanceOfAt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 341,
														"src": "5052:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (address,uint256) view returns (uint256)"
														}
													},
													"id": 268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5052:33:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 263,
												"id": 269,
												"nodeType": "Return",
												"src": "5045:40:0"
											}
										]
									},
									"documentation": "@dev return the reputation amount of a given owner\n@param _owner an address of the owner which we want to get his reputation",
									"id": 271,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4980:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4980:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4979:16:0"
									},
									"returnParameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "5017:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5017:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5016:17:0"
									},
									"scope": 520,
									"src": "4961:132:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 301,
										"nodeType": "Block",
										"src": "5391:310:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 281,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 278,
																		"name": "totalSupplyHistory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 32,
																		"src": "5407:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																		}
																	},
																	"id": 279,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "5407:25:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 280,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5436:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5407:30:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 282,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5406:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 288,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 283,
																			"name": "totalSupplyHistory",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 32,
																			"src": "5443:18:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																				"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																			}
																		},
																		"id": 285,
																		"indexExpression": {
																			"argumentTypes": null,
																			"hexValue": "30",
																			"id": 284,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5462:1:0",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "5443:21:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Checkpoint_$24_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref"
																		}
																	},
																	"id": 286,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "fromBlock",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 21,
																	"src": "5443:31:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 287,
																	"name": "_blockNumber",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 273,
																	"src": "5477:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5443:46:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 289,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5442:48:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5406:84:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 299,
													"nodeType": "Block",
													"src": "5616:78:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 295,
																		"name": "totalSupplyHistory",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 32,
																		"src": "5649:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 296,
																		"name": "_blockNumber",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 273,
																		"src": "5669:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 294,
																	"name": "getValueAt",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 440,
																	"src": "5638:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (struct Reputation.Checkpoint storage ref[] storage pointer,uint256) view returns (uint256)"
																	}
																},
																"id": 297,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5638:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 277,
															"id": 298,
															"nodeType": "Return",
															"src": "5631:51:0"
														}
													]
												},
												"id": 300,
												"nodeType": "IfStatement",
												"src": "5402:292:0",
												"trueBody": {
													"id": 293,
													"nodeType": "Block",
													"src": "5492:118:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 291,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5514:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 277,
															"id": 292,
															"nodeType": "Return",
															"src": "5507:8:0"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 302,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupplyAt",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"name": "_blockNumber",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "5339:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 272,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5339:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5338:22:0"
									},
									"returnParameters": {
										"id": 277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 276,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "5382:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5382:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5381:9:0"
									},
									"scope": 520,
									"src": "5316:385:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 340,
										"nodeType": "Block",
										"src": "6066:300:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 316,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 311,
																			"name": "balances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 29,
																			"src": "6082:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_$",
																				"typeString": "mapping(address => struct Reputation.Checkpoint storage ref[] storage ref)"
																			}
																		},
																		"id": 313,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 312,
																			"name": "_owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 304,
																			"src": "6091:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6082:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																		}
																	},
																	"id": 314,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "6082:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 315,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6109:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6082:28:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 317,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6081:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 325,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"baseExpression": {
																				"argumentTypes": null,
																				"id": 318,
																				"name": "balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 29,
																				"src": "6116:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_$",
																					"typeString": "mapping(address => struct Reputation.Checkpoint storage ref[] storage ref)"
																				}
																			},
																			"id": 320,
																			"indexExpression": {
																				"argumentTypes": null,
																				"id": 319,
																				"name": "_owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 304,
																				"src": "6125:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6116:16:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																				"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																			}
																		},
																		"id": 322,
																		"indexExpression": {
																			"argumentTypes": null,
																			"hexValue": "30",
																			"id": 321,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6133:1:0",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6116:19:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Checkpoint_$24_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref"
																		}
																	},
																	"id": 323,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "fromBlock",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 21,
																	"src": "6116:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 324,
																	"name": "_blockNumber",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "6148:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6116:44:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 326,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6115:46:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6081:80:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 338,
													"nodeType": "Block",
													"src": "6283:76:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 332,
																			"name": "balances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 29,
																			"src": "6316:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_$",
																				"typeString": "mapping(address => struct Reputation.Checkpoint storage ref[] storage ref)"
																			}
																		},
																		"id": 334,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 333,
																			"name": "_owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 304,
																			"src": "6325:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6316:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																		}
																	},
																	{
																		"argumentTypes": null,
																		"id": 335,
																		"name": "_blockNumber",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 306,
																		"src": "6334:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage ref"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 331,
																	"name": "getValueAt",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 440,
																	"src": "6305:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (struct Reputation.Checkpoint storage ref[] storage pointer,uint256) view returns (uint256)"
																	}
																},
																"id": 336,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6305:42:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 310,
															"id": 337,
															"nodeType": "Return",
															"src": "6298:49:0"
														}
													]
												},
												"id": 339,
												"nodeType": "IfStatement",
												"src": "6077:282:0",
												"trueBody": {
													"id": 330,
													"nodeType": "Block",
													"src": "6163:114:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 328,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6185:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 310,
															"id": 329,
															"nodeType": "Return",
															"src": "6178:8:0"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOfAt",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "5998:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 303,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5998:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"name": "_blockNumber",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "6014:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6014:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5997:38:0"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "6057:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6057:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6056:9:0"
									},
									"scope": 520,
									"src": "5977:389:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 439,
										"nodeType": "Block",
										"src": "6868:765:0",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 351,
															"name": "checkpoints",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 344,
															"src": "6883:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
															}
														},
														"id": 352,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "6883:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 353,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6905:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6883:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 358,
												"nodeType": "IfStatement",
												"src": "6879:64:0",
												"trueBody": {
													"id": 357,
													"nodeType": "Block",
													"src": "6908:35:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6930:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 350,
															"id": 356,
															"nodeType": "Return",
															"src": "6923:8:0"
														}
													]
												}
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 359,
														"name": "_block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "7001:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 360,
																"name": "checkpoints",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 344,
																"src": "7011:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																	"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																}
															},
															"id": 365,
															"indexExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 364,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 361,
																		"name": "checkpoints",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 344,
																		"src": "7023:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																		}
																	},
																	"id": 362,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "7023:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "31",
																	"id": 363,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7044:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "7023:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7011:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Checkpoint_$24_storage",
																"typeString": "struct Reputation.Checkpoint storage ref"
															}
														},
														"id": 366,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "fromBlock",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 21,
														"src": "7011:45:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "7001:55:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 377,
												"nodeType": "IfStatement",
												"src": "6997:136:0",
												"trueBody": {
													"id": 376,
													"nodeType": "Block",
													"src": "7058:75:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"baseExpression": {
																		"argumentTypes": null,
																		"id": 368,
																		"name": "checkpoints",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 344,
																		"src": "7080:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																		}
																	},
																	"id": 373,
																	"indexExpression": {
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 372,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 369,
																				"name": "checkpoints",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 344,
																				"src": "7092:11:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																					"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																				}
																			},
																			"id": 370,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "7092:18:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "31",
																			"id": 371,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7113:1:0",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "7092:22:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "7080:35:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Checkpoint_$24_storage",
																		"typeString": "struct Reputation.Checkpoint storage ref"
																	}
																},
																"id": 374,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 23,
																"src": "7080:41:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"functionReturnParameters": 350,
															"id": 375,
															"nodeType": "Return",
															"src": "7073:48:0"
														}
													]
												}
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 378,
														"name": "_block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "7147:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"baseExpression": {
																"argumentTypes": null,
																"id": 379,
																"name": "checkpoints",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 344,
																"src": "7156:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																	"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																}
															},
															"id": 381,
															"indexExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 380,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7168:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7156:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Checkpoint_$24_storage",
																"typeString": "struct Reputation.Checkpoint storage ref"
															}
														},
														"id": 382,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "fromBlock",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 21,
														"src": "7156:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint128",
															"typeString": "uint128"
														}
													},
													"src": "7147:33:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 387,
												"nodeType": "IfStatement",
												"src": "7143:74:0",
												"trueBody": {
													"id": 386,
													"nodeType": "Block",
													"src": "7182:35:0",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 384,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7204:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 350,
															"id": 385,
															"nodeType": "Return",
															"src": "7197:8:0"
														}
													]
												}
											},
											{
												"assignments": [
													389
												],
												"declarations": [
													{
														"constant": false,
														"id": 389,
														"name": "min",
														"nodeType": "VariableDeclaration",
														"scope": 439,
														"src": "7281:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 388,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7281:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 391,
												"initialValue": {
													"argumentTypes": null,
													"hexValue": "30",
													"id": 390,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7295:1:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7281:15:0"
											},
											{
												"assignments": [
													393
												],
												"declarations": [
													{
														"constant": false,
														"id": 393,
														"name": "max",
														"nodeType": "VariableDeclaration",
														"scope": 439,
														"src": "7307:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 392,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7307:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 398,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"expression": {
															"argumentTypes": null,
															"id": 394,
															"name": "checkpoints",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 344,
															"src": "7321:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
															}
														},
														"id": 395,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "7321:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "31",
														"id": 396,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7342:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7321:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7307:36:0"
											},
											{
												"body": {
													"id": 432,
													"nodeType": "Block",
													"src": "7372:214:0",
													"statements": [
														{
															"assignments": [
																403
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 403,
																	"name": "mid",
																	"nodeType": "VariableDeclaration",
																	"scope": 432,
																	"src": "7387:11:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 402,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7387:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 412,
															"initialValue": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"components": [
																		{
																			"argumentTypes": null,
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 408,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"argumentTypes": null,
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 406,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"argumentTypes": null,
																					"id": 404,
																					"name": "max",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 393,
																					"src": "7402:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"argumentTypes": null,
																					"id": 405,
																					"name": "min",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 389,
																					"src": "7408:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7402:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"argumentTypes": null,
																				"hexValue": "31",
																				"id": 407,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7414:1:0",
																				"subdenomination": null,
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "7402:13:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 409,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "7401:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "32",
																	"id": 410,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7419:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "7401:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7387:33:0"
														},
														{
															"condition": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 418,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 413,
																			"name": "checkpoints",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 344,
																			"src": "7439:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																				"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																			}
																		},
																		"id": 415,
																		"indexExpression": {
																			"argumentTypes": null,
																			"id": 414,
																			"name": "mid",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 403,
																			"src": "7451:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7439:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Checkpoint_$24_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref"
																		}
																	},
																	"id": 416,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "fromBlock",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 21,
																	"src": "7439:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 417,
																	"name": "_block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 346,
																	"src": "7469:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7439:36:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 430,
																"nodeType": "Block",
																"src": "7527:48:0",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 428,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"argumentTypes": null,
																				"id": 424,
																				"name": "max",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 393,
																				"src": "7546:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"argumentTypes": null,
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 427,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"argumentTypes": null,
																					"id": 425,
																					"name": "mid",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 403,
																					"src": "7552:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"argumentTypes": null,
																					"hexValue": "31",
																					"id": 426,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7558:1:0",
																					"subdenomination": null,
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1_by_1",
																						"typeString": "int_const 1"
																					},
																					"value": "1"
																				},
																				"src": "7552:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7546:13:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 429,
																		"nodeType": "ExpressionStatement",
																		"src": "7546:13:0"
																	}
																]
															},
															"id": 431,
															"nodeType": "IfStatement",
															"src": "7435:140:0",
															"trueBody": {
																"id": 423,
																"nodeType": "Block",
																"src": "7477:44:0",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 421,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"argumentTypes": null,
																				"id": 419,
																				"name": "min",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 389,
																				"src": "7496:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"argumentTypes": null,
																				"id": 420,
																				"name": "mid",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 403,
																				"src": "7502:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7496:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 422,
																		"nodeType": "ExpressionStatement",
																		"src": "7496:9:0"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 399,
														"name": "max",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 393,
														"src": "7361:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"id": 400,
														"name": "min",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 389,
														"src": "7367:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7361:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 433,
												"nodeType": "WhileStatement",
												"src": "7354:232:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 434,
															"name": "checkpoints",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 344,
															"src": "7603:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
															}
														},
														"id": 436,
														"indexExpression": {
															"argumentTypes": null,
															"id": 435,
															"name": "min",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "7615:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "7603:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Checkpoint_$24_storage",
															"typeString": "struct Reputation.Checkpoint storage ref"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 23,
													"src": "7603:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"functionReturnParameters": 350,
												"id": 438,
												"nodeType": "Return",
												"src": "7596:29:0"
											}
										]
									},
									"documentation": "/////////////",
									"id": 440,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getValueAt",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"name": "checkpoints",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "6786:32:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
													"typeString": "struct Reputation.Checkpoint[]"
												},
												"typeName": {
													"baseType": {
														"contractScope": null,
														"id": 342,
														"name": "Checkpoint",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 24,
														"src": "6786:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Checkpoint_$24_storage_ptr",
															"typeString": "struct Reputation.Checkpoint"
														}
													},
													"id": 343,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "6786:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
														"typeString": "struct Reputation.Checkpoint[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"name": "_block",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "6820:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6785:50:0"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "6859:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 348,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6859:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6858:9:0"
									},
									"scope": 520,
									"src": "6766:867:0",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 518,
										"nodeType": "Block",
										"src": "7942:568:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 453,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 450,
																		"name": "_value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 445,
																		"src": "7969:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 449,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7961:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint128_$",
																		"typeString": "type(uint128)"
																	},
																	"typeName": "uint128"
																},
																"id": 451,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7961:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 452,
																"name": "_value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "7980:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7961:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 448,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															679,
															680
														],
														"referencedDeclaration": 679,
														"src": "7953:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7953:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 455,
												"nodeType": "ExpressionStatement",
												"src": "7953:34:0"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 472,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 459,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 456,
																		"name": "checkpoints",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 443,
																		"src": "8047:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																			"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																		}
																	},
																	"id": 457,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "8047:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 458,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8069:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8047:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 460,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8046:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"argumentTypes": null,
														"components": [
															{
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 470,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"baseExpression": {
																			"argumentTypes": null,
																			"id": 461,
																			"name": "checkpoints",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 443,
																			"src": "8076:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																				"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																			}
																		},
																		"id": 466,
																		"indexExpression": {
																			"argumentTypes": null,
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 465,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"argumentTypes": null,
																				"expression": {
																					"argumentTypes": null,
																					"id": 462,
																					"name": "checkpoints",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 443,
																					"src": "8088:11:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																						"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																					}
																				},
																				"id": 463,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": null,
																				"src": "8088:18:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"argumentTypes": null,
																				"hexValue": "31",
																				"id": 464,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8109:1:0",
																				"subdenomination": null,
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "8088:22:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "8076:35:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Checkpoint_$24_storage",
																			"typeString": "struct Reputation.Checkpoint storage ref"
																		}
																	},
																	"id": 467,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "fromBlock",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 21,
																	"src": "8076:45:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 468,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 666,
																		"src": "8124:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 469,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "number",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "8124:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8076:60:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 471,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8075:62:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8046:91:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 516,
													"nodeType": "Block",
													"src": "8354:149:0",
													"statements": [
														{
															"assignments": [
																500
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 500,
																	"name": "oldCheckPoint",
																	"nodeType": "VariableDeclaration",
																	"scope": 516,
																	"src": "8369:32:0",
																	"stateVariable": false,
																	"storageLocation": "storage",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Checkpoint_$24_storage_ptr",
																		"typeString": "struct Reputation.Checkpoint"
																	},
																	"typeName": {
																		"contractScope": null,
																		"id": 499,
																		"name": "Checkpoint",
																		"nodeType": "UserDefinedTypeName",
																		"referencedDeclaration": 24,
																		"src": "8369:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Checkpoint_$24_storage_ptr",
																			"typeString": "struct Reputation.Checkpoint"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 507,
															"initialValue": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 501,
																	"name": "checkpoints",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 443,
																	"src": "8404:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																		"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																	}
																},
																"id": 506,
																"indexExpression": {
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 505,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 502,
																			"name": "checkpoints",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 443,
																			"src": "8416:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																				"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																			}
																		},
																		"id": 503,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "8416:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"argumentTypes": null,
																		"hexValue": "31",
																		"id": 504,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8437:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "8416:22:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8404:35:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Checkpoint_$24_storage",
																	"typeString": "struct Reputation.Checkpoint storage ref"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8369:70:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 514,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 508,
																		"name": "oldCheckPoint",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 500,
																		"src": "8454:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Checkpoint_$24_storage_ptr",
																			"typeString": "struct Reputation.Checkpoint storage pointer"
																		}
																	},
																	"id": 510,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 23,
																	"src": "8454:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 512,
																			"name": "_value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 445,
																			"src": "8484:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 511,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8476:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": "uint128"
																	},
																	"id": 513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8476:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "8454:37:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 515,
															"nodeType": "ExpressionStatement",
															"src": "8454:37:0"
														}
													]
												},
												"id": 517,
												"nodeType": "IfStatement",
												"src": "8042:461:0",
												"trueBody": {
													"id": 498,
													"nodeType": "Block",
													"src": "8139:209:0",
													"statements": [
														{
															"assignments": [
																474
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 474,
																	"name": "newCheckPoint",
																	"nodeType": "VariableDeclaration",
																	"scope": 498,
																	"src": "8154:32:0",
																	"stateVariable": false,
																	"storageLocation": "storage",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Checkpoint_$24_storage_ptr",
																		"typeString": "struct Reputation.Checkpoint"
																	},
																	"typeName": {
																		"contractScope": null,
																		"id": 473,
																		"name": "Checkpoint",
																		"nodeType": "UserDefinedTypeName",
																		"referencedDeclaration": 24,
																		"src": "8154:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Checkpoint_$24_storage_ptr",
																			"typeString": "struct Reputation.Checkpoint"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 480,
															"initialValue": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 475,
																	"name": "checkpoints",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 443,
																	"src": "8189:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																		"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																	}
																},
																"id": 479,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 478,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "UnaryOperation",
																	"operator": "++",
																	"prefix": false,
																	"src": "8201:20:0",
																	"subExpression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 476,
																			"name": "checkpoints",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 443,
																			"src": "8201:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
																				"typeString": "struct Reputation.Checkpoint storage ref[] storage pointer"
																			}
																		},
																		"id": 477,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": true,
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "8201:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8189:33:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Checkpoint_$24_storage",
																	"typeString": "struct Reputation.Checkpoint storage ref"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8154:68:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 488,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 481,
																		"name": "newCheckPoint",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 474,
																		"src": "8237:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Checkpoint_$24_storage_ptr",
																			"typeString": "struct Reputation.Checkpoint storage pointer"
																		}
																	},
																	"id": 483,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "fromBlock",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 21,
																	"src": "8237:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"expression": {
																				"argumentTypes": null,
																				"id": 485,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 666,
																				"src": "8271:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 486,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "number",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": null,
																			"src": "8271:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 484,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8263:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": "uint128"
																	},
																	"id": 487,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8263:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "8237:47:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 489,
															"nodeType": "ExpressionStatement",
															"src": "8237:47:0"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 496,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 490,
																		"name": "newCheckPoint",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 474,
																		"src": "8299:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Checkpoint_$24_storage_ptr",
																			"typeString": "struct Reputation.Checkpoint storage pointer"
																		}
																	},
																	"id": 492,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 23,
																	"src": "8299:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 494,
																			"name": "_value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 445,
																			"src": "8329:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 493,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8321:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint128_$",
																			"typeString": "type(uint128)"
																		},
																		"typeName": "uint128"
																	},
																	"id": 495,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8321:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint128",
																		"typeString": "uint128"
																	}
																},
																"src": "8299:37:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"id": 497,
															"nodeType": "ExpressionStatement",
															"src": "8299:37:0"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 519,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "updateValueAtNow",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 443,
												"name": "checkpoints",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "7883:32:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
													"typeString": "struct Reputation.Checkpoint[]"
												},
												"typeName": {
													"baseType": {
														"contractScope": null,
														"id": 441,
														"name": "Checkpoint",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 24,
														"src": "7883:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Checkpoint_$24_storage_ptr",
															"typeString": "struct Reputation.Checkpoint"
														}
													},
													"id": 442,
													"length": null,
													"nodeType": "ArrayTypeName",
													"src": "7883:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Checkpoint_$24_storage_$dyn_storage_ptr",
														"typeString": "struct Reputation.Checkpoint[]"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 445,
												"name": "_value",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "7917:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 444,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7917:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "7882:50:0"
									},
									"returnParameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7942:0:0"
									},
									"scope": 520,
									"src": "7857:653:0",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 521,
							"src": "678:7835:0"
						}
					],
					"src": "0:8515:0"
				},
				"id": 0
			},
			"openzeppelin-solidity/contracts/GSN/Context.sol": {
				"ast": {
					"absolutePath": "openzeppelin-solidity/contracts/GSN/Context.sol",
					"exportedSymbols": {
						"Context": [
							547
						]
					},
					"id": 548,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 522,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:1"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 547,
							"linearizedBaseContracts": [
								547
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 525,
										"nodeType": "Block",
										"src": "726:3:1",
										"statements": []
									},
									"documentation": null,
									"id": 526,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "714:2:1"
									},
									"returnParameters": {
										"id": 524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "726:0:1"
									},
									"scope": 547,
									"src": "702:27:1",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 534,
										"nodeType": "Block",
										"src": "850:34:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 531,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 676,
														"src": "867:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "867:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 530,
												"id": 533,
												"nodeType": "Return",
												"src": "860:17:1"
											}
										]
									},
									"documentation": null,
									"id": 535,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "807:2:1"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 529,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "833:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "833:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "832:17:1"
									},
									"scope": 547,
									"src": "788:96:1",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 545,
										"nodeType": "Block",
										"src": "947:165:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 540,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 690,
													"src": "957:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Context_$547",
														"typeString": "contract Context"
													}
												},
												"id": 541,
												"nodeType": "ExpressionStatement",
												"src": "957:4:1"
											},
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 542,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 676,
														"src": "1097:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "1097:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 539,
												"id": 544,
												"nodeType": "Return",
												"src": "1090:15:1"
											}
										]
									},
									"documentation": null,
									"id": 546,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "907:2:1"
									},
									"returnParameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 546,
												"src": "933:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 537,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "933:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "932:14:1"
									},
									"scope": 547,
									"src": "890:222:1",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 548,
							"src": "525:589:1"
						}
					],
					"src": "0:1115:1"
				},
				"id": 1
			},
			"openzeppelin-solidity/contracts/ownership/Ownable.sol": {
				"ast": {
					"absolutePath": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
					"exportedSymbols": {
						"Ownable": [
							661
						]
					},
					"id": 662,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 549,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:2"
						},
						{
							"absolutePath": "openzeppelin-solidity/contracts/GSN/Context.sol",
							"file": "../GSN/Context.sol",
							"id": 550,
							"nodeType": "ImportDirective",
							"scope": 662,
							"sourceUnit": 548,
							"src": "25:28:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 551,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 547,
										"src": "435:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$547",
											"typeString": "contract Context"
										}
									},
									"id": 552,
									"nodeType": "InheritanceSpecifier",
									"src": "435:7:2"
								}
							],
							"contractDependencies": [
								547
							],
							"contractKind": "contract",
							"documentation": "@dev Contract module which provides a basic access control mechanism, where\nthere is an account (an owner) that can be granted exclusive access to\nspecific functions.\n * This module is used through inheritance. It will make available the modifier\n`onlyOwner`, which can be applied to your functions to restrict their use to\nthe owner.",
							"fullyImplemented": true,
							"id": 661,
							"linearizedBaseContracts": [
								661,
								547
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 554,
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 661,
									"src": "449:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 553,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "449:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 560,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 556,
												"indexed": true,
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "505:29:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 555,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"indexed": true,
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "536:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "536:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "504:57:2"
									},
									"src": "478:84:2"
								},
								{
									"body": {
										"id": 575,
										"nodeType": "Block",
										"src": "688:93:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 563,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "698:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 564,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 535,
															"src": "707:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																"typeString": "function () view returns (address payable)"
															}
														},
														"id": 565,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "707:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "698:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 567,
												"nodeType": "ExpressionStatement",
												"src": "698:21:2"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 570,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "763:1:2",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 569,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "755:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 571,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "755:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 572,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "767:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 568,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "734:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "734:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 574,
												"nodeType": "EmitStatement",
												"src": "729:45:2"
											}
										]
									},
									"documentation": "@dev Initializes the contract setting the deployer as the initial owner.",
									"id": 576,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "676:2:2"
									},
									"returnParameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "688:0:2"
									},
									"scope": 661,
									"src": "664:117:2",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 583,
										"nodeType": "Block",
										"src": "904:30:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 581,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 554,
													"src": "921:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 580,
												"id": 582,
												"nodeType": "Return",
												"src": "914:13:2"
											}
										]
									},
									"documentation": "@dev Returns the address of the current owner.",
									"id": 584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "871:2:2"
									},
									"returnParameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 579,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "895:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 578,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "895:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "894:9:2"
									},
									"scope": 661,
									"src": "857:77:2",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 593,
										"nodeType": "Block",
										"src": "1043:82:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 587,
																"name": "isOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 605,
																"src": "1061:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 588,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1061:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 589,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1072:34:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 586,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															679,
															680
														],
														"referencedDeclaration": 680,
														"src": "1053:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1053:54:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 591,
												"nodeType": "ExpressionStatement",
												"src": "1053:54:2"
											},
											{
												"id": 592,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:2"
											}
										]
									},
									"documentation": "@dev Throws if called by any account other than the owner.",
									"id": 594,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:2:2"
									},
									"src": "1022:103:2",
									"visibility": "internal"
								},
								{
									"body": {
										"id": 604,
										"nodeType": "Block",
										"src": "1254:46:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 599,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 535,
															"src": "1271:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																"typeString": "function () view returns (address payable)"
															}
														},
														"id": 600,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1271:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"id": 601,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "1287:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1271:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 598,
												"id": 603,
												"nodeType": "Return",
												"src": "1264:29:2"
											}
										]
									},
									"documentation": "@dev Returns true if the caller is the current owner.",
									"id": 605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1224:2:2"
									},
									"returnParameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 597,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "1248:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 596,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1248:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1247:6:2"
									},
									"scope": 661,
									"src": "1208:92:2",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 623,
										"nodeType": "Block",
										"src": "1688:91:2",
										"statements": [
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 611,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "1724:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 613,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1740:1:2",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 612,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1732:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": "address"
															},
															"id": 614,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1732:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 610,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "1703:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1703:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 616,
												"nodeType": "EmitStatement",
												"src": "1698:45:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 617,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "1753:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 619,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1770:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1762:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": "address"
														},
														"id": 620,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1762:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "1753:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 622,
												"nodeType": "ExpressionStatement",
												"src": "1753:19:2"
											}
										]
									},
									"documentation": "@dev Leaves the contract without owner. It will not be possible to call\n`onlyOwner` functions anymore. Can only be called by the current owner.\n     * NOTE: Renouncing ownership will leave the contract without an owner,\nthereby removing any functionality that is only available to the owner.",
									"id": 624,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 608,
											"modifierName": {
												"argumentTypes": null,
												"id": 607,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 594,
												"src": "1678:9:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1678:9:2"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1668:2:2"
									},
									"returnParameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1688:0:2"
									},
									"scope": 661,
									"src": "1642:137:2",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 635,
										"nodeType": "Block",
										"src": "1990:45:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 632,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 626,
															"src": "2019:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 631,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 660,
														"src": "2000:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2000:28:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 634,
												"nodeType": "ExpressionStatement",
												"src": "2000:28:2"
											}
										]
									},
									"documentation": "@dev Transfers ownership of the contract to a new account (`newOwner`).\nCan only be called by the current owner.",
									"id": 636,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 629,
											"modifierName": {
												"argumentTypes": null,
												"id": 628,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 594,
												"src": "1980:9:2",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1980:9:2"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 626,
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "1955:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 625,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1955:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1954:18:2"
									},
									"returnParameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1990:0:2"
									},
									"scope": 661,
									"src": "1928:107:2",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": {
										"id": 659,
										"nodeType": "Block",
										"src": "2191:170:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 646,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 642,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 638,
																"src": "2209:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 644,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2229:1:2",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 643,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2221:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 645,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2221:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "2209:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 647,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2233:40:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 641,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															679,
															680
														],
														"referencedDeclaration": 680,
														"src": "2201:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2201:73:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 649,
												"nodeType": "ExpressionStatement",
												"src": "2201:73:2"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 651,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 554,
															"src": "2310:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 652,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 638,
															"src": "2318:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 650,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 560,
														"src": "2289:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 653,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2289:38:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 654,
												"nodeType": "EmitStatement",
												"src": "2284:43:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 655,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "2337:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 656,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 638,
														"src": "2346:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2337:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 658,
												"nodeType": "ExpressionStatement",
												"src": "2337:17:2"
											}
										]
									},
									"documentation": "@dev Transfers ownership of the contract to a new account (`newOwner`).",
									"id": 660,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "2164:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 637,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2164:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2163:18:2"
									},
									"returnParameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2191:0:2"
									},
									"scope": 661,
									"src": "2136:225:2",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 662,
							"src": "415:1948:2"
						}
					],
					"src": "0:2364:2"
				},
				"id": 2
			}
		}
	}
}