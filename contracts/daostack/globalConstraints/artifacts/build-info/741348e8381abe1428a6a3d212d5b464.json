{
	"id": "741348e8381abe1428a6a3d212d5b464",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.8",
	"solcLongVersion": "0.8.8+commit.dddeac2f",
	"input": {
		"language": "Solidity",
		"sources": {
			"daostack/globalConstraints/TokenCapGC.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.8;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./GlobalConstraintInterface.sol\";\r\n\r\n/**\r\n * @title Token Cap Global Constraint\r\n * @dev A simple global constraint to cap the number of tokens.\r\n */\r\n\r\ncontract TokenCapGC {\r\n    // A set of parameters, on which the cap will be checked:\r\n    struct Parameters {\r\n        IERC20 token;\r\n        uint256 cap;\r\n    }\r\n\r\n    // Mapping from the hash of the parameters to the parameters themselves:\r\n    mapping(bytes32 => Parameters) public parameters;\r\n\r\n    /**\r\n     * @dev adding a new set of parameters\r\n     * @param  _token the token to add to the params.\r\n     * @param _cap the cap to check the total supply against.\r\n     * @return the calculated parameters hash\r\n     */\r\n    function setParameters(IERC20 _token, uint256 _cap) public returns (bytes32) {\r\n        bytes32 paramsHash = getParametersHash(_token, _cap);\r\n        parameters[paramsHash].token = _token;\r\n        parameters[paramsHash].cap = _cap;\r\n        return paramsHash;\r\n    }\r\n\r\n    /**\r\n     * @dev calculate and returns the hash of the given parameters\r\n     * @param  _token the token to add to the params.\r\n     * @param _cap the cap to check the total supply against.\r\n     * @return the calculated parameters hash\r\n     */\r\n    function getParametersHash(IERC20 _token, uint256 _cap) public pure returns (bytes32) {\r\n        return (keccak256(abi.encodePacked(_token, _cap)));\r\n    }\r\n\r\n    /**\r\n     * @dev check the constraint after the action.\r\n     * This global constraint only checks the state after the action, so here we just return true:\r\n     * @return true\r\n     */\r\n    function pre(\r\n        address,\r\n        bytes32,\r\n        bytes32\r\n    ) public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev check the total supply cap.\r\n     * @param  _paramsHash the parameters hash to check the total supply cap against.\r\n     * @return bool which represents a success\r\n     */\r\n    function post(\r\n        address,\r\n        bytes32 _paramsHash,\r\n        bytes32\r\n    ) public view returns (bool) {\r\n        if (\r\n            (parameters[_paramsHash].token != IERC20(address(0))) &&\r\n            (parameters[_paramsHash].token.totalSupply() > parameters[_paramsHash].cap)\r\n        ) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev when return if this globalConstraints is pre, post or both.\r\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\r\n     */\r\n    function when() public pure returns (GlobalConstraintInterface.CallPhase) {\r\n        return GlobalConstraintInterface.CallPhase.Post;\r\n    }\r\n}\r\n"
			},
			"daostack/globalConstraints/GlobalConstraintInterface.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.8;\r\n\r\ninterface   GlobalConstraintInterface  {\r\n    enum CallPhase {\r\n        Pre,\r\n        Post,\r\n        PreAndPost\r\n    }\r\n\r\n    function pre(\r\n        address _scheme,\r\n        bytes32 _params,\r\n        bytes32 _method\r\n    ) external returns (bool);\r\n\r\n    function post(\r\n        address _scheme,\r\n        bytes32 _params,\r\n        bytes32 _method\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev when return if this globalConstraints is pre, post or both.\r\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\r\n     */\r\n    function when() external returns (CallPhase);\r\n}\r\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"daostack/globalConstraints/GlobalConstraintInterface.sol": {
				"GlobalConstraintInterface": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_scheme",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "_params",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "_method",
									"type": "bytes32"
								}
							],
							"name": "post",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_scheme",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "_params",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "_method",
									"type": "bytes32"
								}
							],
							"name": "pre",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "when",
							"outputs": [
								{
									"internalType": "enum GlobalConstraintInterface.CallPhase",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"when()": {
								"details": "when return if this globalConstraints is pre, post or both.",
								"returns": {
									"_0": "CallPhase enum indication  Pre, Post or PreAndPost."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"post(address,bytes32,bytes32)": "8043154d",
							"pre(address,bytes32,bytes32)": "c1786ab2",
							"when()": "e2b0caef"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scheme\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_params\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_method\",\"type\":\"bytes32\"}],\"name\":\"post\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scheme\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_params\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_method\",\"type\":\"bytes32\"}],\"name\":\"pre\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"when\",\"outputs\":[{\"internalType\":\"enum GlobalConstraintInterface.CallPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"when()\":{\"details\":\"when return if this globalConstraints is pre, post or both.\",\"returns\":{\"_0\":\"CallPhase enum indication  Pre, Post or PreAndPost.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"daostack/globalConstraints/GlobalConstraintInterface.sol\":\"GlobalConstraintInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"daostack/globalConstraints/GlobalConstraintInterface.sol\":{\"keccak256\":\"0xe96e195668b565b19f0bf7d23b848869a1b093264c397a13987edb4002ca0548\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://560ad7ada90ddcf8ffa4ad40784cec572daebaeda7c6a438eb73a152f7d7488e\",\"dweb:/ipfs/QmPwofWqQo2P9YMaDxksXTdzPbAJwagmVbZmXG5BMhGwYK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"daostack/globalConstraints/TokenCapGC.sol": {
				"TokenCapGC": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_cap",
									"type": "uint256"
								}
							],
							"name": "getParametersHash",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"name": "parameters",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "cap",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "_paramsHash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"name": "post",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"name": "pre",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_cap",
									"type": "uint256"
								}
							],
							"name": "setParameters",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "when",
							"outputs": [
								{
									"internalType": "enum GlobalConstraintInterface.CallPhase",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "A simple global constraint to cap the number of tokens.",
						"kind": "dev",
						"methods": {
							"getParametersHash(address,uint256)": {
								"details": "calculate and returns the hash of the given parameters",
								"params": {
									"_cap": "the cap to check the total supply against.",
									"_token": "the token to add to the params."
								},
								"returns": {
									"_0": "the calculated parameters hash"
								}
							},
							"post(address,bytes32,bytes32)": {
								"details": "check the total supply cap.",
								"params": {
									"_paramsHash": "the parameters hash to check the total supply cap against."
								},
								"returns": {
									"_0": "bool which represents a success"
								}
							},
							"pre(address,bytes32,bytes32)": {
								"details": "check the constraint after the action. This global constraint only checks the state after the action, so here we just return true:",
								"returns": {
									"_0": "true"
								}
							},
							"setParameters(address,uint256)": {
								"details": "adding a new set of parameters",
								"params": {
									"_cap": "the cap to check the total supply against.",
									"_token": "the token to add to the params."
								},
								"returns": {
									"_0": "the calculated parameters hash"
								}
							},
							"when()": {
								"details": "when return if this globalConstraints is pre, post or both.",
								"returns": {
									"_0": "CallPhase enum indication  Pre, Post or PreAndPost."
								}
							}
						},
						"title": "Token Cap Global Constraint",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"daostack/globalConstraints/TokenCapGC.sol\":282:2705  contract TokenCapGC {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":282:2705  contract TokenCapGC {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x02506804\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x78fc063c\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8043154d\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xc1786ab2\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xc4198161\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xe2b0caef\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":529:577  mapping(bytes32 => Parameters) public parameters */\n    tag_3:\n      tag_9\n      tag_10\n      calldatasize\n      0x04\n      tag_11\n      jump\t// in\n    tag_10:\n      0x00\n      0x20\n      dup2\n      swap1\n      mstore\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      swap1\n      swap2\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      swap1\n      dup3\n      jump\n    tag_9:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":404:436   */\n      swap1\n      swap4\n      and\n        /* \"#utility.yul\":386:437   */\n      dup4\n      mstore\n        /* \"#utility.yul\":468:470   */\n      0x20\n        /* \"#utility.yul\":453:471   */\n      dup4\n      add\n        /* \"#utility.yul\":446:480   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":359:377   */\n      add\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":529:577  mapping(bytes32 => Parameters) public parameters */\n    tag_13:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1340:1495  function getParametersHash(IERC20 _token, uint256 _cap) public pure returns (bytes32) {... */\n    tag_4:\n      tag_15\n      tag_16\n      calldatasize\n      0x04\n      tag_17\n      jump\t// in\n    tag_16:\n      tag_18\n      jump\t// in\n    tag_15:\n      mload(0x40)\n        /* \"#utility.yul\":1122:1147   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1110:1112   */\n      0x20\n        /* \"#utility.yul\":1095:1113   */\n      add\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1340:1495  function getParametersHash(IERC20 _token, uint256 _cap) public pure returns (bytes32) {... */\n      tag_13\n        /* \"#utility.yul\":976:1153   */\n      jump\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2027:2395  function post(... */\n    tag_5:\n      tag_21\n      tag_22\n      calldatasize\n      0x04\n      tag_23\n      jump\t// in\n    tag_22:\n      tag_24\n      jump\t// in\n    tag_21:\n      mload(0x40)\n        /* \"#utility.yul\":1719:1733   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1712:1734   */\n      iszero\n        /* \"#utility.yul\":1694:1735   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1682:1684   */\n      0x20\n        /* \"#utility.yul\":1667:1685   */\n      add\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2027:2395  function post(... */\n      tag_13\n        /* \"#utility.yul\":1554:1741   */\n      jump\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1694:1825  function pre(... */\n    tag_6:\n      tag_21\n      tag_28\n      calldatasize\n      0x04\n      tag_23\n      jump\t// in\n    tag_28:\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1813:1817  true */\n      0x01\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1694:1825  function pre(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":813:1081  function setParameters(IERC20 _token, uint256 _cap) public returns (bytes32) {... */\n    tag_7:\n      tag_15\n      tag_32\n      calldatasize\n      0x04\n      tag_17\n      jump\t// in\n    tag_32:\n      tag_33\n      jump\t// in\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2562:2702  function when() public pure returns (GlobalConstraintInterface.CallPhase) {... */\n    tag_8:\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2654:2694  GlobalConstraintInterface.CallPhase.Post */\n      0x01\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2562:2702  function when() public pure returns (GlobalConstraintInterface.CallPhase) {... */\n      mload(0x40)\n      tag_13\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1340:1495  function getParametersHash(IERC20 _token, uint256 _cap) public pure returns (bytes32) {... */\n    tag_18:\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1455:1485  abi.encodePacked(_token, _cap) */\n      mload(0x40)\n      not(0xffffffffffffffffffffffff)\n        /* \"#utility.yul\":2281:2283   */\n      0x60\n        /* \"#utility.yul\":2277:2292   */\n      dup5\n      swap1\n      shl\n        /* \"#utility.yul\":2273:2326   */\n      and\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1455:1485  abi.encodePacked(_token, _cap) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":2261:2327   */\n      mstore\n        /* \"#utility.yul\":2343:2355   */\n      0x34\n      dup2\n      add\n        /* \"#utility.yul\":2336:2364   */\n      dup3\n      swap1\n      mstore\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1417:1424  bytes32 */\n      0x00\n      swap1\n        /* \"#utility.yul\":2380:2392   */\n      0x54\n      add\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1455:1485  abi.encodePacked(_token, _cap) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1445:1486  keccak256(abi.encodePacked(_token, _cap)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1437:1487  return (keccak256(abi.encodePacked(_token, _cap))) */\n      swap1\n      pop\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1340:1495  function getParametersHash(IERC20 _token, uint256 _cap) public pure returns (bytes32) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2027:2395  function post(... */\n    tag_24:\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2135:2139  bool */\n      0x00\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2171:2194  parameters[_paramsHash] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2171:2200  parameters[_paramsHash].token */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2171:2222  parameters[_paramsHash].token != IERC20(address(0)) */\n      iszero\n      dup1\n      iszero\n      swap1\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2170:2315  (parameters[_paramsHash].token != IERC20(address(0))) &&... */\n      tag_43\n      jumpi\n      pop\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2287:2297  parameters */\n      0x00\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2287:2310  parameters[_paramsHash] */\n      dup4\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2287:2314  parameters[_paramsHash].cap */\n      0x01\n      dup2\n      add\n      sload\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2241:2270  parameters[_paramsHash].token */\n      swap1\n      sload\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2241:2284  parameters[_paramsHash].token.totalSupply() */\n      dup4\n      mload\n      shl(0xe0, 0x18160ddd)\n      dup2\n      mstore\n      swap4\n      mload\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2287:2314  parameters[_paramsHash].cap */\n      swap2\n      swap4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2241:2270  parameters[_paramsHash].token */\n      swap1\n      swap2\n      and\n      swap3\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2241:2282  parameters[_paramsHash].token.totalSupply */\n      0x18160ddd\n      swap3\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2241:2284  parameters[_paramsHash].token.totalSupply() */\n      0x04\n      dup1\n      dup5\n      add\n      swap4\n      dup3\n      swap1\n      sub\n      add\n      dup2\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2241:2270  parameters[_paramsHash].token */\n      dup7\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2241:2284  parameters[_paramsHash].token.totalSupply() */\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_44\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_44:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_46\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_46:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_47\n      swap2\n      swap1\n      tag_48\n      jump\t// in\n    tag_47:\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2241:2314  parameters[_paramsHash].token.totalSupply() > parameters[_paramsHash].cap */\n      gt\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2170:2315  (parameters[_paramsHash].token != IERC20(address(0))) &&... */\n    tag_43:\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2152:2366  if (... */\n      iszero\n      tag_49\n      jumpi\n      pop\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2349:2354  false */\n      0x00\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2342:2354  return false */\n      jump(tag_42)\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2152:2366  if (... */\n    tag_49:\n      pop\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2383:2387  true */\n      0x01\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":2027:2395  function post(... */\n    tag_42:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":813:1081  function setParameters(IERC20 _token, uint256 _cap) public returns (bytes32) {... */\n    tag_33:\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":881:888  bytes32 */\n      0x00\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":901:919  bytes32 paramsHash */\n      dup1\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":922:953  getParametersHash(_token, _cap) */\n      tag_52\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":940:946  _token */\n      dup5\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":948:952  _cap */\n      dup5\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":922:939  getParametersHash */\n      tag_18\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":922:953  getParametersHash(_token, _cap) */\n      jump\t// in\n    tag_52:\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":964:974  parameters */\n      0x00\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":964:986  parameters[paramsHash] */\n      dup2\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":964:1001  parameters[paramsHash].token = _token */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup8\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap1\n      swap2\n      and\n      or\n      dup2\n      sstore\n      0x01\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1012:1038  parameters[paramsHash].cap */\n      add\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":1012:1045  parameters[paramsHash].cap = _cap */\n      dup5\n      swap1\n      sstore\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":901:953  bytes32 paramsHash = getParametersHash(_token, _cap) */\n      swap2\n      pop\n      pop\n        /* \"daostack/globalConstraints/TokenCapGC.sol\":813:1081  function setParameters(IERC20 _token, uint256 _cap) public returns (bytes32) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:194   */\n    tag_11:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:146   */\n      iszero\n      tag_57\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:146   */\n    tag_57:\n      pop\n        /* \"#utility.yul\":165:188   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":14:194   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":491:630   */\n    tag_54:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":574:605   */\n      dup2\n      and\n        /* \"#utility.yul\":564:606   */\n      dup2\n      eq\n        /* \"#utility.yul\":554:624   */\n      tag_60\n      jumpi\n        /* \"#utility.yul\":620:621   */\n      0x00\n        /* \"#utility.yul\":617:618   */\n      dup1\n        /* \"#utility.yul\":610:622   */\n      revert\n        /* \"#utility.yul\":554:624   */\n    tag_60:\n        /* \"#utility.yul\":491:630   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":635:971   */\n    tag_17:\n        /* \"#utility.yul\":716:722   */\n      0x00\n        /* \"#utility.yul\":724:730   */\n      dup1\n        /* \"#utility.yul\":777:779   */\n      0x40\n        /* \"#utility.yul\":765:774   */\n      dup4\n        /* \"#utility.yul\":756:763   */\n      dup6\n        /* \"#utility.yul\":752:775   */\n      sub\n        /* \"#utility.yul\":748:780   */\n      slt\n        /* \"#utility.yul\":745:797   */\n      iszero\n      tag_62\n      jumpi\n        /* \"#utility.yul\":793:794   */\n      0x00\n        /* \"#utility.yul\":790:791   */\n      dup1\n        /* \"#utility.yul\":783:795   */\n      revert\n        /* \"#utility.yul\":745:797   */\n    tag_62:\n        /* \"#utility.yul\":832:841   */\n      dup3\n        /* \"#utility.yul\":819:842   */\n      calldataload\n        /* \"#utility.yul\":851:890   */\n      tag_63\n        /* \"#utility.yul\":884:889   */\n      dup2\n        /* \"#utility.yul\":851:890   */\n      tag_54\n      jump\t// in\n    tag_63:\n        /* \"#utility.yul\":909:914   */\n      swap5\n        /* \"#utility.yul\":961:963   */\n      0x20\n        /* \"#utility.yul\":946:964   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":933:965   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":635:971   */\n      jump\t// out\n        /* \"#utility.yul\":1158:1549   */\n    tag_23:\n        /* \"#utility.yul\":1235:1241   */\n      0x00\n        /* \"#utility.yul\":1243:1249   */\n      dup1\n        /* \"#utility.yul\":1251:1257   */\n      0x00\n        /* \"#utility.yul\":1304:1306   */\n      0x60\n        /* \"#utility.yul\":1292:1301   */\n      dup5\n        /* \"#utility.yul\":1283:1290   */\n      dup7\n        /* \"#utility.yul\":1279:1302   */\n      sub\n        /* \"#utility.yul\":1275:1307   */\n      slt\n        /* \"#utility.yul\":1272:1324   */\n      iszero\n      tag_66\n      jumpi\n        /* \"#utility.yul\":1320:1321   */\n      0x00\n        /* \"#utility.yul\":1317:1318   */\n      dup1\n        /* \"#utility.yul\":1310:1322   */\n      revert\n        /* \"#utility.yul\":1272:1324   */\n    tag_66:\n        /* \"#utility.yul\":1359:1368   */\n      dup4\n        /* \"#utility.yul\":1346:1369   */\n      calldataload\n        /* \"#utility.yul\":1378:1417   */\n      tag_67\n        /* \"#utility.yul\":1411:1416   */\n      dup2\n        /* \"#utility.yul\":1378:1417   */\n      tag_54\n      jump\t// in\n    tag_67:\n        /* \"#utility.yul\":1436:1441   */\n      swap6\n        /* \"#utility.yul\":1488:1490   */\n      0x20\n        /* \"#utility.yul\":1473:1491   */\n      dup6\n      add\n        /* \"#utility.yul\":1460:1492   */\n      calldataload\n      swap6\n      pop\n        /* \"#utility.yul\":1539:1541   */\n      0x40\n        /* \"#utility.yul\":1524:1542   */\n      swap1\n      swap5\n      add\n        /* \"#utility.yul\":1511:1543   */\n      calldataload\n      swap4\n        /* \"#utility.yul\":1158:1549   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1746:2086   */\n    tag_38:\n        /* \"#utility.yul\":1890:1892   */\n      0x20\n        /* \"#utility.yul\":1875:1893   */\n      dup2\n      add\n        /* \"#utility.yul\":1923:1924   */\n      0x03\n        /* \"#utility.yul\":1912:1925   */\n      dup4\n      lt\n        /* \"#utility.yul\":1902:2046   */\n      tag_70\n      jumpi\n        /* \"#utility.yul\":1968:1978   */\n      0x4e487b71\n        /* \"#utility.yul\":1963:1966   */\n      0xe0\n        /* \"#utility.yul\":1959:1979   */\n      shl\n        /* \"#utility.yul\":1956:1957   */\n      0x00\n        /* \"#utility.yul\":1949:1980   */\n      mstore\n        /* \"#utility.yul\":2003:2007   */\n      0x21\n        /* \"#utility.yul\":2000:2001   */\n      0x04\n        /* \"#utility.yul\":1993:2008   */\n      mstore\n        /* \"#utility.yul\":2031:2035   */\n      0x24\n        /* \"#utility.yul\":2028:2029   */\n      0x00\n        /* \"#utility.yul\":2021:2036   */\n      revert\n        /* \"#utility.yul\":1902:2046   */\n    tag_70:\n        /* \"#utility.yul\":2055:2080   */\n      swap2\n      swap1\n      mstore\n        /* \"#utility.yul\":1746:2086   */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":2403:2587   */\n    tag_48:\n        /* \"#utility.yul\":2473:2479   */\n      0x00\n        /* \"#utility.yul\":2526:2528   */\n      0x20\n        /* \"#utility.yul\":2514:2523   */\n      dup3\n        /* \"#utility.yul\":2505:2512   */\n      dup5\n        /* \"#utility.yul\":2501:2524   */\n      sub\n        /* \"#utility.yul\":2497:2529   */\n      slt\n        /* \"#utility.yul\":2494:2546   */\n      iszero\n      tag_73\n      jumpi\n        /* \"#utility.yul\":2542:2543   */\n      0x00\n        /* \"#utility.yul\":2539:2540   */\n      dup1\n        /* \"#utility.yul\":2532:2544   */\n      revert\n        /* \"#utility.yul\":2494:2546   */\n    tag_73:\n      pop\n        /* \"#utility.yul\":2565:2581   */\n      mload\n      swap2\n        /* \"#utility.yul\":2403:2587   */\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122031d53cbe6eac0364ce7733f4a3d739f1c5d9bd0b64f9eacb9cc5160bc1cb4d8864736f6c63430008080033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610396806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063025068041461006757806378fc063c146100be5780638043154d146100df578063c1786ab214610102578063c419816114610119578063e2b0caef1461012c575b600080fd5b61009a61007536600461028d565b600060208190529081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b6100d16100cc3660046102be565b61013b565b6040519081526020016100b5565b6100f26100ed3660046102ea565b610182565b60405190151581526020016100b5565b6100f26101103660046102ea565b60019392505050565b6100d16101273660046102be565b610248565b60016040516100b5919061031f565b6040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b6000828152602081905260408120546001600160a01b0316158015906102305750600083815260208181526040918290206001810154905483516318160ddd60e01b8152935191936001600160a01b03909116926318160ddd92600480840193829003018186803b1580156101f657600080fd5b505afa15801561020a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022e9190610347565b115b1561023d57506000610241565b5060015b9392505050565b600080610255848461013b565b600081815260208190526040902080546001600160a01b0387166001600160a01b031990911617815560010184905591505092915050565b60006020828403121561029f57600080fd5b5035919050565b6001600160a01b03811681146102bb57600080fd5b50565b600080604083850312156102d157600080fd5b82356102dc816102a6565b946020939093013593505050565b6000806000606084860312156102ff57600080fd5b833561030a816102a6565b95602085013595506040909401359392505050565b602081016003831061034157634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561035957600080fd5b505191905056fea264697066735822122031d53cbe6eac0364ce7733f4a3d739f1c5d9bd0b64f9eacb9cc5160bc1cb4d8864736f6c63430008080033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x396 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2506804 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x78FC063C EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0x8043154D EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0xC1786AB2 EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0xC4198161 EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0xE2B0CAEF EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x28D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD1 PUSH2 0xCC CALLDATASIZE PUSH1 0x4 PUSH2 0x2BE JUMP JUMPDEST PUSH2 0x13B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB5 JUMP JUMPDEST PUSH2 0xF2 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x2EA JUMP JUMPDEST PUSH2 0x182 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB5 JUMP JUMPDEST PUSH2 0xF2 PUSH2 0x110 CALLDATASIZE PUSH1 0x4 PUSH2 0x2EA JUMP JUMPDEST PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD1 PUSH2 0x127 CALLDATASIZE PUSH1 0x4 PUSH2 0x2BE JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xB5 SWAP2 SWAP1 PUSH2 0x31F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x230 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 SLOAD DUP4 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 MLOAD SWAP2 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0x18160DDD SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22E SWAP2 SWAP1 PUSH2 0x347 JUMP JUMPDEST GT JUMPDEST ISZERO PUSH2 0x23D JUMPI POP PUSH1 0x0 PUSH2 0x241 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x255 DUP5 DUP5 PUSH2 0x13B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0x1 ADD DUP5 SWAP1 SSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2DC DUP2 PUSH2 0x2A6 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x30A DUP2 PUSH2 0x2A6 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0x341 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0xD5 EXTCODECOPY 0xBE PUSH15 0xAC0364CE7733F4A3D739F1C5D9BD0B PUSH5 0xF9EACB9CC5 AND SIGNEXTEND 0xC1 0xCB 0x4D DUP9 PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ",
							"sourceMap": "282:2423:2:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@getParametersHash_185": {
									"entryPoint": 315,
									"id": 185,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@parameters_129": {
									"entryPoint": null,
									"id": 129,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@post_244": {
									"entryPoint": 386,
									"id": 244,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@pre_200": {
									"entryPoint": null,
									"id": 200,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@setParameters_164": {
									"entryPoint": 584,
									"id": 164,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@when_256": {
									"entryPoint": null,
									"id": 256,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_bytes32t_bytes32": {
									"entryPoint": 746,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": 653,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_contract$_IERC20_$77t_uint256": {
									"entryPoint": 702,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 839,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_contract$_IERC20_$77_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$77_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_enum$_CallPhase_$83__to_t_uint8__fromStack_reversed": {
									"entryPoint": 799,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"validator_revert_contract_IERC20": {
									"entryPoint": 678,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2589:3",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:3",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:110:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "142:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:3"
															},
															"nodeType": "YulIf",
															"src": "94:52:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "155:33:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "178:9:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "165:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "165:23:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "155:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:3",
														"type": ""
													}
												],
												"src": "14:180:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "341:145:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "351:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "363:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "374:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "359:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "359:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "351:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "393:9:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "408:6:3"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "424:3:3",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "429:1:3",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "420:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "420:11:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "433:1:3",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "416:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "416:19:3"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "404:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "404:32:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "386:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "386:51:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "386:51:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "457:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "468:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "453:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "453:18:3"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "473:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "446:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:34:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "446:34:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$77_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "302:9:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "313:6:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "321:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "332:4:3",
														"type": ""
													}
												],
												"src": "199:287:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "544:86:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "608:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "617:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "620:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "610:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "610:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "610:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "567:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "578:5:3"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "593:3:3",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "598:1:3",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "589:3:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "589:11:3"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "602:1:3",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "585:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "585:19:3"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "574:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "574:31:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "564:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "564:42:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "557:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "557:50:3"
															},
															"nodeType": "YulIf",
															"src": "554:70:3"
														}
													]
												},
												"name": "validator_revert_contract_IERC20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "533:5:3",
														"type": ""
													}
												],
												"src": "491:139:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "735:236:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "781:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "790:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "793:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "783:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "783:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "783:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "756:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "765:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "752:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "752:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "777:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "748:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "748:32:3"
															},
															"nodeType": "YulIf",
															"src": "745:52:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "806:36:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "832:9:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "819:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "819:23:3"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "810:5:3",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "884:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_contract_IERC20",
																	"nodeType": "YulIdentifier",
																	"src": "851:32:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "851:39:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "851:39:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "899:15:3",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "909:5:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "899:6:3"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "923:42:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "950:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "961:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "946:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "946:18:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "933:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "933:32:3"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "923:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IERC20_$77t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "693:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "704:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "716:6:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "724:6:3",
														"type": ""
													}
												],
												"src": "635:336:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1077:76:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1087:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1099:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1110:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1095:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1095:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1087:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1129:9:3"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1140:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1122:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1122:25:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1122:25:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1046:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1057:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1068:4:3",
														"type": ""
													}
												],
												"src": "976:177:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1262:287:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1308:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1317:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1320:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1310:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1310:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1310:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1283:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1292:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1279:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1279:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1304:2:3",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1275:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1275:32:3"
															},
															"nodeType": "YulIf",
															"src": "1272:52:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1333:36:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1359:9:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1346:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1346:23:3"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1337:5:3",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1411:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_contract_IERC20",
																	"nodeType": "YulIdentifier",
																	"src": "1378:32:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1378:39:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1378:39:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1426:15:3",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1436:5:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1426:6:3"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1450:42:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1477:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1488:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1473:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1473:18:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1460:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1460:32:3"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1450:6:3"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1501:42:3",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1528:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1539:2:3",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1524:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1524:18:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1511:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1511:32:3"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1501:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bytes32t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1212:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1223:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1235:6:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1243:6:3",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1251:6:3",
														"type": ""
													}
												],
												"src": "1158:391:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1649:92:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1659:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1671:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1682:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1667:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1667:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1659:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1701:9:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1726:6:3"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1719:6:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1719:14:3"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1712:6:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1712:22:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1694:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1694:41:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1694:41:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1618:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1629:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1640:4:3",
														"type": ""
													}
												],
												"src": "1554:187:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1857:229:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1867:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1879:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1890:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1875:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1875:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1867:4:3"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1935:111:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1956:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1963:3:3",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1968:10:3",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1959:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1959:20:3"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1949:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1949:31:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1949:31:3"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2000:1:3",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2003:4:3",
																					"type": "",
																					"value": "0x21"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1993:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1993:15:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1993:15:3"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2028:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2031:4:3",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2021:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2021:15:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2021:15:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1915:6:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1923:1:3",
																				"type": "",
																				"value": "3"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1912:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1912:13:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1905:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1905:21:3"
															},
															"nodeType": "YulIf",
															"src": "1902:144:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2062:9:3"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2073:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2055:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2055:25:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2055:25:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_enum$_CallPhase_$83__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1826:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1837:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1848:4:3",
														"type": ""
													}
												],
												"src": "1746:340:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2251:147:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2268:3:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2281:2:3",
																						"type": "",
																						"value": "96"
																					},
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "2285:6:3"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "2277:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2277:15:3"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2298:26:3",
																						"type": "",
																						"value": "0xffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2294:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2294:31:3"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2273:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2273:53:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2261:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2261:66:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2261:66:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "2347:3:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2352:2:3",
																				"type": "",
																				"value": "20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2343:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2343:12:3"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2357:6:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2336:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2336:28:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2336:28:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2373:19:3",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2384:3:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2389:2:3",
																		"type": "",
																		"value": "52"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2380:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2380:12:3"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2373:3:3"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_contract$_IERC20_$77_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2219:3:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2224:6:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2232:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2243:3:3",
														"type": ""
													}
												],
												"src": "2091:307:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2484:103:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2530:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2539:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2542:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2532:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2532:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2532:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2505:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2514:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2501:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2501:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2526:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2497:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2497:32:3"
															},
															"nodeType": "YulIf",
															"src": "2494:52:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2555:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2571:9:3"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2565:5:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2565:16:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2555:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2450:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2461:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2473:6:3",
														"type": ""
													}
												],
												"src": "2403:184:3"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$77_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function validator_revert_contract_IERC20(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$77t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_enum$_CallPhase_$83__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 3))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_packed_t_contract$_IERC20_$77_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n}",
									"id": 3,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100625760003560e01c8063025068041461006757806378fc063c146100be5780638043154d146100df578063c1786ab214610102578063c419816114610119578063e2b0caef1461012c575b600080fd5b61009a61007536600461028d565b600060208190529081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b6100d16100cc3660046102be565b61013b565b6040519081526020016100b5565b6100f26100ed3660046102ea565b610182565b60405190151581526020016100b5565b6100f26101103660046102ea565b60019392505050565b6100d16101273660046102be565b610248565b60016040516100b5919061031f565b6040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b6000828152602081905260408120546001600160a01b0316158015906102305750600083815260208181526040918290206001810154905483516318160ddd60e01b8152935191936001600160a01b03909116926318160ddd92600480840193829003018186803b1580156101f657600080fd5b505afa15801561020a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022e9190610347565b115b1561023d57506000610241565b5060015b9392505050565b600080610255848461013b565b600081815260208190526040902080546001600160a01b0387166001600160a01b031990911617815560010184905591505092915050565b60006020828403121561029f57600080fd5b5035919050565b6001600160a01b03811681146102bb57600080fd5b50565b600080604083850312156102d157600080fd5b82356102dc816102a6565b946020939093013593505050565b6000806000606084860312156102ff57600080fd5b833561030a816102a6565b95602085013595506040909401359392505050565b602081016003831061034157634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561035957600080fd5b505191905056fea264697066735822122031d53cbe6eac0364ce7733f4a3d739f1c5d9bd0b64f9eacb9cc5160bc1cb4d8864736f6c63430008080033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2506804 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x78FC063C EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0x8043154D EQ PUSH2 0xDF JUMPI DUP1 PUSH4 0xC1786AB2 EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0xC4198161 EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0xE2B0CAEF EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x28D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD1 PUSH2 0xCC CALLDATASIZE PUSH1 0x4 PUSH2 0x2BE JUMP JUMPDEST PUSH2 0x13B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB5 JUMP JUMPDEST PUSH2 0xF2 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x2EA JUMP JUMPDEST PUSH2 0x182 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB5 JUMP JUMPDEST PUSH2 0xF2 PUSH2 0x110 CALLDATASIZE PUSH1 0x4 PUSH2 0x2EA JUMP JUMPDEST PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD1 PUSH2 0x127 CALLDATASIZE PUSH1 0x4 PUSH2 0x2BE JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0xB5 SWAP2 SWAP1 PUSH2 0x31F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x230 JUMPI POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 SLOAD DUP4 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP4 MLOAD SWAP2 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP3 PUSH4 0x18160DDD SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22E SWAP2 SWAP1 PUSH2 0x347 JUMP JUMPDEST GT JUMPDEST ISZERO PUSH2 0x23D JUMPI POP PUSH1 0x0 PUSH2 0x241 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x255 DUP5 DUP5 PUSH2 0x13B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 0x1 ADD DUP5 SWAP1 SSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2DC DUP2 PUSH2 0x2A6 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x30A DUP2 PUSH2 0x2A6 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0x341 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0xD5 EXTCODECOPY 0xBE PUSH15 0xAC0364CE7733F4A3D739F1C5D9BD0B PUSH5 0xF9EACB9CC5 AND SIGNEXTEND 0xC1 0xCB 0x4D DUP9 PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ",
							"sourceMap": "282:2423:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;529:48;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;529:48:2;;;;;;;;;;-1:-1:-1;;;;;404:32:3;;;386:51;;468:2;453:18;;446:34;;;;359:18;529:48:2;;;;;;;;1340:155;;;;;;:::i;:::-;;:::i;:::-;;;1122:25:3;;;1110:2;1095:18;1340:155:2;976:177:3;2027:368:2;;;;;;:::i;:::-;;:::i;:::-;;;1719:14:3;;1712:22;1694:41;;1682:2;1667:18;2027:368:2;1554:187:3;1694:131:2;;;;;;:::i;:::-;1813:4;1694:131;;;;;;813:268;;;;;;:::i;:::-;;:::i;2562:140::-;2654:40;2562:140;;;;;;:::i;1340:155::-;1455:30;;-1:-1:-1;;2281:2:3;2277:15;;;2273:53;1455:30:2;;;2261:66:3;2343:12;;;2336:28;;;1417:7:2;;2380:12:3;;1455:30:2;;;;;;;;;;;;1445:41;;;;;;1437:50;;1340:155;;;;:::o;2027:368::-;2135:4;2171:23;;;;;;;;;;:29;-1:-1:-1;;;;;2171:29:2;:51;;;;2170:145;;-1:-1:-1;2287:10:2;:23;;;;;;;;;;;;:27;;;;2241:29;;:43;;-1:-1:-1;;;2241:43:2;;;;2287:27;;-1:-1:-1;;;;;2241:29:2;;;;:41;;:43;;;;;;;;;;:29;:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:73;2170:145;2152:214;;;-1:-1:-1;2349:5:2;2342:12;;2152:214;-1:-1:-1;2383:4:2;2027:368;;;;;;:::o;813:268::-;881:7;901:18;922:31;940:6;948:4;922:17;:31::i;:::-;964:10;:22;;;;;;;;;;:37;;-1:-1:-1;;;;;964:37:2;;-1:-1:-1;;;;;;964:37:2;;;;;;;1012:26;:33;;;901:52;-1:-1:-1;;813:268:2;;;;:::o;14:180:3:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:3;;14:180;-1:-1:-1;14:180:3:o;491:139::-;-1:-1:-1;;;;;574:31:3;;564:42;;554:70;;620:1;617;610:12;554:70;491:139;:::o;635:336::-;716:6;724;777:2;765:9;756:7;752:23;748:32;745:52;;;793:1;790;783:12;745:52;832:9;819:23;851:39;884:5;851:39;:::i;:::-;909:5;961:2;946:18;;;;933:32;;-1:-1:-1;;;635:336:3:o;1158:391::-;1235:6;1243;1251;1304:2;1292:9;1283:7;1279:23;1275:32;1272:52;;;1320:1;1317;1310:12;1272:52;1359:9;1346:23;1378:39;1411:5;1378:39;:::i;:::-;1436:5;1488:2;1473:18;;1460:32;;-1:-1:-1;1539:2:3;1524:18;;;1511:32;;1158:391;-1:-1:-1;;;1158:391:3:o;1746:340::-;1890:2;1875:18;;1923:1;1912:13;;1902:144;;1968:10;1963:3;1959:20;1956:1;1949:31;2003:4;2000:1;1993:15;2031:4;2028:1;2021:15;1902:144;2055:25;;;1746:340;:::o;2403:184::-;2473:6;2526:2;2514:9;2505:7;2501:23;2497:32;2494:52;;;2542:1;2539;2532:12;2494:52;-1:-1:-1;2565:16:3;;2403:184;-1:-1:-1;2403:184:3:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "183600",
								"executionCost": "226",
								"totalCost": "183826"
							},
							"external": {
								"getParametersHash(address,uint256)": "560",
								"parameters(bytes32)": "4595",
								"post(address,bytes32,bytes32)": "infinite",
								"pre(address,bytes32,bytes32)": "447",
								"setParameters(address,uint256)": "47120",
								"when()": "315"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 282,
									"end": 2705,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 282,
									"end": 2705,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122031d53cbe6eac0364ce7733f4a3d739f1c5d9bd0b64f9eacb9cc5160bc1cb4d8864736f6c63430008080033",
									".code": [
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "2506804"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "78FC063C"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "8043154D"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "C1786AB2"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "C4198161"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "E2B0CAEF"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 282,
											"end": 2705,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 404,
											"end": 436,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 404,
											"end": 436,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 404,
											"end": 436,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 386,
											"end": 437,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 386,
											"end": 437,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 468,
											"end": 470,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 453,
											"end": 471,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 453,
											"end": 471,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 446,
											"end": 480,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 446,
											"end": 480,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 446,
											"end": 480,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 446,
											"end": 480,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 359,
											"end": 377,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 529,
											"end": 577,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 529,
											"end": 577,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 529,
											"end": 577,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1122,
											"end": 1147,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1122,
											"end": 1147,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1122,
											"end": 1147,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1110,
											"end": 1112,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1095,
											"end": 1113,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 976,
											"end": 1153,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1719,
											"end": 1733,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1719,
											"end": 1733,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1712,
											"end": 1734,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1694,
											"end": 1735,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1694,
											"end": 1735,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1682,
											"end": 1684,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1667,
											"end": 1685,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1554,
											"end": 1741,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1813,
											"end": 1817,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1694,
											"end": 1825,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2562,
											"end": 2702,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 2562,
											"end": 2702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2654,
											"end": 2694,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2562,
											"end": 2702,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2562,
											"end": 2702,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2562,
											"end": 2702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 2562,
											"end": 2702,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2562,
											"end": 2702,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2562,
											"end": 2702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 2562,
											"end": 2702,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2281,
											"end": 2283,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2277,
											"end": 2292,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2277,
											"end": 2292,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2277,
											"end": 2292,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 2273,
											"end": 2326,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2261,
											"end": 2327,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2343,
											"end": 2355,
											"name": "PUSH",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 2343,
											"end": 2355,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2343,
											"end": 2355,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 2364,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 2364,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 2364,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1417,
											"end": 1424,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1417,
											"end": 1424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2380,
											"end": 2392,
											"name": "PUSH",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 2380,
											"end": 2392,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1455,
											"end": 1485,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1445,
											"end": 1486,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1445,
											"end": 1486,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1445,
											"end": 1486,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1445,
											"end": 1486,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1445,
											"end": 1486,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1445,
											"end": 1486,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1437,
											"end": 1487,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1437,
											"end": 1487,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1340,
											"end": 1495,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2135,
											"end": 2139,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2171,
											"end": 2194,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2194,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2194,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2194,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2171,
											"end": 2194,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2194,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2194,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2194,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2171,
											"end": 2194,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2194,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2200,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2171,
											"end": 2200,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2222,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2222,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2222,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2171,
											"end": 2222,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2170,
											"end": 2315,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 2170,
											"end": 2315,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2287,
											"end": 2297,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2310,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2314,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2287,
											"end": 2314,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2314,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2314,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2270,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2270,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "18160DDD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2314,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2287,
											"end": 2314,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2241,
											"end": 2270,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2270,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2270,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2270,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2282,
											"name": "PUSH",
											"source": 2,
											"value": "18160DDD"
										},
										{
											"begin": 2241,
											"end": 2282,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2270,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "EXTCODESIZE",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 2241,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2241,
											"end": 2314,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2170,
											"end": 2315,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 2170,
											"end": 2315,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2152,
											"end": 2366,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2152,
											"end": 2366,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 2152,
											"end": 2366,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2349,
											"end": 2354,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2342,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 2342,
											"end": 2354,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2152,
											"end": 2366,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 2152,
											"end": 2366,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2383,
											"end": 2387,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "tag",
											"source": 2,
											"value": "42"
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2027,
											"end": 2395,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 881,
											"end": 888,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 901,
											"end": 919,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 922,
											"end": 953,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 940,
											"end": 946,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 948,
											"end": 952,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 922,
											"end": 939,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 922,
											"end": 953,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 922,
											"end": 953,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 922,
											"end": 953,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 964,
											"end": 974,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 964,
											"end": 986,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 964,
											"end": 986,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 964,
											"end": 986,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 964,
											"end": 986,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 964,
											"end": 986,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 964,
											"end": 986,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 964,
											"end": 986,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 964,
											"end": 986,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 964,
											"end": 986,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 964,
											"end": 986,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 964,
											"end": 1001,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 964,
											"end": 1001,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 964,
											"end": 1001,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 964,
											"end": 1001,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 964,
											"end": 1001,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 964,
											"end": 1001,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 964,
											"end": 1001,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 964,
											"end": 1001,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 964,
											"end": 1001,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 964,
											"end": 1001,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 964,
											"end": 1001,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1012,
											"end": 1038,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1012,
											"end": 1045,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1012,
											"end": 1045,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1012,
											"end": 1045,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 901,
											"end": 953,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 813,
											"end": 1081,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 94,
											"end": 146,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 94,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 94,
											"end": 146,
											"name": "tag",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 165,
											"end": 188,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 165,
											"end": 188,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 14,
											"end": 194,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 491,
											"end": 630,
											"name": "tag",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 491,
											"end": 630,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 574,
											"end": 605,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 574,
											"end": 605,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 564,
											"end": 606,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 564,
											"end": 606,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 554,
											"end": 624,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 554,
											"end": 624,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 620,
											"end": 621,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 617,
											"end": 618,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 610,
											"end": 622,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 554,
											"end": 624,
											"name": "tag",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 554,
											"end": 624,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 491,
											"end": 630,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 491,
											"end": 630,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 635,
											"end": 971,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 635,
											"end": 971,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 716,
											"end": 722,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 724,
											"end": 730,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 777,
											"end": 779,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 765,
											"end": 774,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 756,
											"end": 763,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 752,
											"end": 775,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 748,
											"end": 780,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 745,
											"end": 797,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 745,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 745,
											"end": 797,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 793,
											"end": 794,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 790,
											"end": 791,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 783,
											"end": 795,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 745,
											"end": 797,
											"name": "tag",
											"source": 3,
											"value": "62"
										},
										{
											"begin": 745,
											"end": 797,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 832,
											"end": 841,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 819,
											"end": 842,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 851,
											"end": 890,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 884,
											"end": 889,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 851,
											"end": 890,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 851,
											"end": 890,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 851,
											"end": 890,
											"name": "tag",
											"source": 3,
											"value": "63"
										},
										{
											"begin": 851,
											"end": 890,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 909,
											"end": 914,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 961,
											"end": 963,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 946,
											"end": 964,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 946,
											"end": 964,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 946,
											"end": 964,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 946,
											"end": 964,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 933,
											"end": 965,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 933,
											"end": 965,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 635,
											"end": 971,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1158,
											"end": 1549,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 1158,
											"end": 1549,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1235,
											"end": 1241,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1243,
											"end": 1249,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1251,
											"end": 1257,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1304,
											"end": 1306,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1292,
											"end": 1301,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1283,
											"end": 1290,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1279,
											"end": 1302,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1275,
											"end": 1307,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1272,
											"end": 1324,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1272,
											"end": 1324,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 1272,
											"end": 1324,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1320,
											"end": 1321,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1317,
											"end": 1318,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1310,
											"end": 1322,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1272,
											"end": 1324,
											"name": "tag",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 1272,
											"end": 1324,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1359,
											"end": 1368,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1346,
											"end": 1369,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1378,
											"end": 1417,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 1411,
											"end": 1416,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1378,
											"end": 1417,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 1378,
											"end": 1417,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1378,
											"end": 1417,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 1378,
											"end": 1417,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1436,
											"end": 1441,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": 1488,
											"end": 1490,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1473,
											"end": 1491,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1473,
											"end": 1491,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1460,
											"end": 1492,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1460,
											"end": 1492,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1539,
											"end": 1541,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1524,
											"end": 1542,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1524,
											"end": 1542,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 1524,
											"end": 1542,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1511,
											"end": 1543,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1511,
											"end": 1543,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1158,
											"end": 1549,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1158,
											"end": 1549,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1746,
											"end": 2086,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 1746,
											"end": 2086,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1890,
											"end": 1892,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1923,
											"end": 1924,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1912,
											"end": 1925,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1912,
											"end": 1925,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1902,
											"end": 2046,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 1902,
											"end": 2046,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1968,
											"end": 1978,
											"name": "PUSH",
											"source": 3,
											"value": "4E487B71"
										},
										{
											"begin": 1963,
											"end": 1966,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 1959,
											"end": 1979,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1956,
											"end": 1957,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1949,
											"end": 1980,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2003,
											"end": 2007,
											"name": "PUSH",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 2000,
											"end": 2001,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1993,
											"end": 2008,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2031,
											"end": 2035,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2028,
											"end": 2029,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2021,
											"end": 2036,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 1902,
											"end": 2046,
											"name": "tag",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 1902,
											"end": 2046,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2055,
											"end": 2080,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2055,
											"end": 2080,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2055,
											"end": 2080,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1746,
											"end": 2086,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1746,
											"end": 2086,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2403,
											"end": 2587,
											"name": "tag",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 2403,
											"end": 2587,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2473,
											"end": 2479,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2526,
											"end": 2528,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2514,
											"end": 2523,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2505,
											"end": 2512,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2501,
											"end": 2524,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2497,
											"end": 2529,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 2494,
											"end": 2546,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2494,
											"end": 2546,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 2494,
											"end": 2546,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2542,
											"end": 2543,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2539,
											"end": 2540,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2532,
											"end": 2544,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2494,
											"end": 2546,
											"name": "tag",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 2494,
											"end": 2546,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2565,
											"end": 2581,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2565,
											"end": 2581,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2403,
											"end": 2587,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2403,
											"end": 2587,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"getParametersHash(address,uint256)": "78fc063c",
							"parameters(bytes32)": "02506804",
							"post(address,bytes32,bytes32)": "8043154d",
							"pre(address,bytes32,bytes32)": "c1786ab2",
							"setParameters(address,uint256)": "c4198161",
							"when()": "e2b0caef"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"getParametersHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_paramsHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"post\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pre\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"when\",\"outputs\":[{\"internalType\":\"enum GlobalConstraintInterface.CallPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A simple global constraint to cap the number of tokens.\",\"kind\":\"dev\",\"methods\":{\"getParametersHash(address,uint256)\":{\"details\":\"calculate and returns the hash of the given parameters\",\"params\":{\"_cap\":\"the cap to check the total supply against.\",\"_token\":\"the token to add to the params.\"},\"returns\":{\"_0\":\"the calculated parameters hash\"}},\"post(address,bytes32,bytes32)\":{\"details\":\"check the total supply cap.\",\"params\":{\"_paramsHash\":\"the parameters hash to check the total supply cap against.\"},\"returns\":{\"_0\":\"bool which represents a success\"}},\"pre(address,bytes32,bytes32)\":{\"details\":\"check the constraint after the action. This global constraint only checks the state after the action, so here we just return true:\",\"returns\":{\"_0\":\"true\"}},\"setParameters(address,uint256)\":{\"details\":\"adding a new set of parameters\",\"params\":{\"_cap\":\"the cap to check the total supply against.\",\"_token\":\"the token to add to the params.\"},\"returns\":{\"_0\":\"the calculated parameters hash\"}},\"when()\":{\"details\":\"when return if this globalConstraints is pre, post or both.\",\"returns\":{\"_0\":\"CallPhase enum indication  Pre, Post or PreAndPost.\"}}},\"title\":\"Token Cap Global Constraint\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"daostack/globalConstraints/TokenCapGC.sol\":\"TokenCapGC\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"daostack/globalConstraints/GlobalConstraintInterface.sol\":{\"keccak256\":\"0xe96e195668b565b19f0bf7d23b848869a1b093264c397a13987edb4002ca0548\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://560ad7ada90ddcf8ffa4ad40784cec572daebaeda7c6a438eb73a152f7d7488e\",\"dweb:/ipfs/QmPwofWqQo2P9YMaDxksXTdzPbAJwagmVbZmXG5BMhGwYK\"]},\"daostack/globalConstraints/TokenCapGC.sol\":{\"keccak256\":\"0xa09b2cffd1734ee4e5de1dfc5c309f594d0c8e3a513a7a014191a0cd5a923d6a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d1b21db3bfff65dc3218dfe64983f86df6e03e3b54363db60fe6ac58d763312c\",\"dweb:/ipfs/QmcUSZtPczcLGA5Dy8s66hgfTyQZfWCCnH5zaMA4s81yuY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 129,
								"contract": "daostack/globalConstraints/TokenCapGC.sol:TokenCapGC",
								"label": "parameters",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(Parameters)124_storage)"
							}
						],
						"types": {
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(IERC20)77": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_bytes32,t_struct(Parameters)124_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct TokenCapGC.Parameters)",
								"numberOfBytes": "32",
								"value": "t_struct(Parameters)124_storage"
							},
							"t_struct(Parameters)124_storage": {
								"encoding": "inplace",
								"label": "struct TokenCapGC.Parameters",
								"members": [
									{
										"astId": 121,
										"contract": "daostack/globalConstraints/TokenCapGC.sol:TokenCapGC",
										"label": "token",
										"offset": 0,
										"slot": "0",
										"type": "t_contract(IERC20)77"
									},
									{
										"astId": 123,
										"contract": "daostack/globalConstraints/TokenCapGC.sol:TokenCapGC",
										"label": "cap",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "212:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 11,
									"name": "Transfer",
									"nameLocation": "394:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "403:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "425:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:0"
									},
									"src": "388:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 20,
									"name": "Approval",
									"nameLocation": "625:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "657:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "682:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:0"
									},
									"src": "619:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "931:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "971:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:0"
									},
									"scope": 77,
									"src": "912:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1211:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1223:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1257:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:0"
									},
									"scope": 77,
									"src": "1193:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1557:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1572:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1612:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:0"
									},
									"scope": 77,
									"src": "1538:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2308:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:0"
									},
									"scope": 77,
									"src": "2274:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:0",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2677:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2699:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2719:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2758:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:0"
									},
									"scope": 77,
									"src": "2646:118:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "202:2564:0",
							"usedErrors": []
						}
					],
					"src": "106:2661:0"
				},
				"id": 0
			},
			"daostack/globalConstraints/GlobalConstraintInterface.sol": {
				"ast": {
					"absolutePath": "daostack/globalConstraints/GlobalConstraintInterface.sol",
					"exportedSymbols": {
						"GlobalConstraintInterface": [
							113
						]
					},
					"id": 114,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"0.8",
								".8"
							],
							"nodeType": "PragmaDirective",
							"src": "37:22:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 113,
							"linearizedBaseContracts": [
								113
							],
							"name": "GlobalConstraintInterface",
							"nameLocation": "75:25:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "GlobalConstraintInterface.CallPhase",
									"id": 83,
									"members": [
										{
											"id": 80,
											"name": "Pre",
											"nameLocation": "135:3:1",
											"nodeType": "EnumValue",
											"src": "135:3:1"
										},
										{
											"id": 81,
											"name": "Post",
											"nameLocation": "149:4:1",
											"nodeType": "EnumValue",
											"src": "149:4:1"
										},
										{
											"id": 82,
											"name": "PreAndPost",
											"nameLocation": "164:10:1",
											"nodeType": "EnumValue",
											"src": "164:10:1"
										}
									],
									"name": "CallPhase",
									"nameLocation": "114:9:1",
									"nodeType": "EnumDefinition",
									"src": "109:72:1"
								},
								{
									"functionSelector": "c1786ab2",
									"id": 94,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "pre",
									"nameLocation": "198:3:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "_scheme",
												"nameLocation": "220:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "212:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "212:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "_params",
												"nameLocation": "246:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "238:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 86,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "238:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "_method",
												"nameLocation": "272:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "264:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 88,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "264:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "201:85:1"
									},
									"returnParameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "305:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 91,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "305:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "304:6:1"
									},
									"scope": 113,
									"src": "189:122:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "8043154d",
									"id": 105,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "post",
									"nameLocation": "328:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 96,
												"mutability": "mutable",
												"name": "_scheme",
												"nameLocation": "351:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "343:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 95,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "343:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 98,
												"mutability": "mutable",
												"name": "_params",
												"nameLocation": "377:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "369:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 97,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "369:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "_method",
												"nameLocation": "403:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "395:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 99,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "395:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "332:85:1"
									},
									"returnParameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "436:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 102,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "436:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "435:6:1"
									},
									"scope": 113,
									"src": "319:123:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 106,
										"nodeType": "StructuredDocumentation",
										"src": "450:153:1",
										"text": " @dev when return if this globalConstraints is pre, post or both.\n @return CallPhase enum indication  Pre, Post or PreAndPost."
									},
									"functionSelector": "e2b0caef",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "when",
									"nameLocation": "618:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "622:2:1"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "643:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_CallPhase_$83",
													"typeString": "enum GlobalConstraintInterface.CallPhase"
												},
												"typeName": {
													"id": 109,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 108,
														"name": "CallPhase",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 83,
														"src": "643:9:1"
													},
													"referencedDeclaration": 83,
													"src": "643:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_CallPhase_$83",
														"typeString": "enum GlobalConstraintInterface.CallPhase"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "642:11:1"
									},
									"scope": 113,
									"src": "609:45:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 114,
							"src": "63:594:1",
							"usedErrors": []
						}
					],
					"src": "37:622:1"
				},
				"id": 1
			},
			"daostack/globalConstraints/TokenCapGC.sol": {
				"ast": {
					"absolutePath": "daostack/globalConstraints/TokenCapGC.sol",
					"exportedSymbols": {
						"GlobalConstraintInterface": [
							113
						],
						"IERC20": [
							77
						],
						"TokenCapGC": [
							257
						]
					},
					"id": 258,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 115,
							"literals": [
								"solidity",
								"0.8",
								".8"
							],
							"nodeType": "PragmaDirective",
							"src": "37:22:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 116,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 258,
							"sourceUnit": 78,
							"src": "63:56:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "daostack/globalConstraints/GlobalConstraintInterface.sol",
							"file": "./GlobalConstraintInterface.sol",
							"id": 117,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 258,
							"sourceUnit": 114,
							"src": "121:41:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 118,
								"nodeType": "StructuredDocumentation",
								"src": "166:112:2",
								"text": " @title Token Cap Global Constraint\n @dev A simple global constraint to cap the number of tokens."
							},
							"fullyImplemented": true,
							"id": 257,
							"linearizedBaseContracts": [
								257
							],
							"name": "TokenCapGC",
							"nameLocation": "291:10:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "TokenCapGC.Parameters",
									"id": 124,
									"members": [
										{
											"constant": false,
											"id": 121,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "408:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 124,
											"src": "401:12:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IERC20_$77",
												"typeString": "contract IERC20"
											},
											"typeName": {
												"id": 120,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 119,
													"name": "IERC20",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 77,
													"src": "401:6:2"
												},
												"referencedDeclaration": 77,
												"src": "401:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 123,
											"mutability": "mutable",
											"name": "cap",
											"nameLocation": "432:3:2",
											"nodeType": "VariableDeclaration",
											"scope": 124,
											"src": "424:11:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 122,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "424:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Parameters",
									"nameLocation": "379:10:2",
									"nodeType": "StructDefinition",
									"scope": 257,
									"src": "372:71:2",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "02506804",
									"id": 129,
									"mutability": "mutable",
									"name": "parameters",
									"nameLocation": "567:10:2",
									"nodeType": "VariableDeclaration",
									"scope": 257,
									"src": "529:48:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Parameters_$124_storage_$",
										"typeString": "mapping(bytes32 => struct TokenCapGC.Parameters)"
									},
									"typeName": {
										"id": 128,
										"keyType": {
											"id": 125,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "537:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "529:30:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Parameters_$124_storage_$",
											"typeString": "mapping(bytes32 => struct TokenCapGC.Parameters)"
										},
										"valueType": {
											"id": 127,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 126,
												"name": "Parameters",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 124,
												"src": "548:10:2"
											},
											"referencedDeclaration": 124,
											"src": "548:10:2",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Parameters_$124_storage_ptr",
												"typeString": "struct TokenCapGC.Parameters"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 163,
										"nodeType": "Block",
										"src": "890:191:2",
										"statements": [
											{
												"assignments": [
													141
												],
												"declarations": [
													{
														"constant": false,
														"id": 141,
														"mutability": "mutable",
														"name": "paramsHash",
														"nameLocation": "909:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 163,
														"src": "901:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 140,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "901:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 146,
												"initialValue": {
													"arguments": [
														{
															"id": 143,
															"name": "_token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "940:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 144,
															"name": "_cap",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 135,
															"src": "948:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 142,
														"name": "getParametersHash",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 185,
														"src": "922:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_contract$_IERC20_$77_$_t_uint256_$returns$_t_bytes32_$",
															"typeString": "function (contract IERC20,uint256) pure returns (bytes32)"
														}
													},
													"id": 145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "922:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "901:52:2"
											},
											{
												"expression": {
													"id": 152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 147,
																"name": "parameters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 129,
																"src": "964:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Parameters_$124_storage_$",
																	"typeString": "mapping(bytes32 => struct TokenCapGC.Parameters storage ref)"
																}
															},
															"id": 149,
															"indexExpression": {
																"id": 148,
																"name": "paramsHash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 141,
																"src": "975:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "964:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Parameters_$124_storage",
																"typeString": "struct TokenCapGC.Parameters storage ref"
															}
														},
														"id": 150,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "token",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 121,
														"src": "964:28:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 151,
														"name": "_token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "995:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"src": "964:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"id": 153,
												"nodeType": "ExpressionStatement",
												"src": "964:37:2"
											},
											{
												"expression": {
													"id": 159,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 154,
																"name": "parameters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 129,
																"src": "1012:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Parameters_$124_storage_$",
																	"typeString": "mapping(bytes32 => struct TokenCapGC.Parameters storage ref)"
																}
															},
															"id": 156,
															"indexExpression": {
																"id": 155,
																"name": "paramsHash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 141,
																"src": "1023:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1012:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Parameters_$124_storage",
																"typeString": "struct TokenCapGC.Parameters storage ref"
															}
														},
														"id": 157,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "cap",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 123,
														"src": "1012:26:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 158,
														"name": "_cap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 135,
														"src": "1041:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1012:33:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 160,
												"nodeType": "ExpressionStatement",
												"src": "1012:33:2"
											},
											{
												"expression": {
													"id": 161,
													"name": "paramsHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 141,
													"src": "1063:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 139,
												"id": 162,
												"nodeType": "Return",
												"src": "1056:17:2"
											}
										]
									},
									"documentation": {
										"id": 130,
										"nodeType": "StructuredDocumentation",
										"src": "586:221:2",
										"text": " @dev adding a new set of parameters\n @param  _token the token to add to the params.\n @param _cap the cap to check the total supply against.\n @return the calculated parameters hash"
									},
									"functionSelector": "c4198161",
									"id": 164,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setParameters",
									"nameLocation": "822:13:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "843:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "836:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 132,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 131,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "836:6:2"
													},
													"referencedDeclaration": 77,
													"src": "836:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "_cap",
												"nameLocation": "859:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "851:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "851:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "835:29:2"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "881:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 137,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "881:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "880:9:2"
									},
									"scope": 257,
									"src": "813:268:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 184,
										"nodeType": "Block",
										"src": "1426:69:2",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 178,
																			"name": "_token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 168,
																			"src": "1472:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		{
																			"id": 179,
																			"name": "_cap",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 170,
																			"src": "1480:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 176,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "1455:3:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 177,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodePacked",
																		"nodeType": "MemberAccess",
																		"src": "1455:16:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function () pure returns (bytes memory)"
																		}
																	},
																	"id": 180,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1455:30:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 175,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "1445:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 181,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1445:41:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 182,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1444:43:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 174,
												"id": 183,
												"nodeType": "Return",
												"src": "1437:50:2"
											}
										]
									},
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "1089:245:2",
										"text": " @dev calculate and returns the hash of the given parameters\n @param  _token the token to add to the params.\n @param _cap the cap to check the total supply against.\n @return the calculated parameters hash"
									},
									"functionSelector": "78fc063c",
									"id": 185,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getParametersHash",
									"nameLocation": "1349:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "1374:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "1367:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 167,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 166,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "1367:6:2"
													},
													"referencedDeclaration": 77,
													"src": "1367:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "_cap",
												"nameLocation": "1390:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "1382:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1382:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1366:29:2"
									},
									"returnParameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "1417:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 172,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1417:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1416:9:2"
									},
									"scope": 257,
									"src": "1340:155:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 199,
										"nodeType": "Block",
										"src": "1795:30:2",
										"statements": [
											{
												"expression": {
													"hexValue": "74727565",
													"id": 197,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1813:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 196,
												"id": 198,
												"nodeType": "Return",
												"src": "1806:11:2"
											}
										]
									},
									"documentation": {
										"id": 186,
										"nodeType": "StructuredDocumentation",
										"src": "1503:185:2",
										"text": " @dev check the constraint after the action.\n This global constraint only checks the state after the action, so here we just return true:\n @return true"
									},
									"functionSelector": "c1786ab2",
									"id": 200,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "pre",
									"nameLocation": "1703:3:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1717:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1717:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1735:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 189,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1735:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1753:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 191,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1753:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1706:61:2"
									},
									"returnParameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1789:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 194,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1789:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1788:6:2"
									},
									"scope": 257,
									"src": "1694:131:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 243,
										"nodeType": "Block",
										"src": "2141:254:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_contract$_IERC20_$77",
																	"typeString": "contract IERC20"
																},
																"id": 222,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 212,
																			"name": "parameters",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 129,
																			"src": "2171:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Parameters_$124_storage_$",
																				"typeString": "mapping(bytes32 => struct TokenCapGC.Parameters storage ref)"
																			}
																		},
																		"id": 214,
																		"indexExpression": {
																			"id": 213,
																			"name": "_paramsHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 205,
																			"src": "2182:11:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2171:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Parameters_$124_storage",
																			"typeString": "struct TokenCapGC.Parameters storage ref"
																		}
																	},
																	"id": 215,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "token",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 121,
																	"src": "2171:29:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 219,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2219:1:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 218,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "2211:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 217,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "2211:7:2",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 220,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2211:10:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 216,
																		"name": "IERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 77,
																		"src": "2204:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																			"typeString": "type(contract IERC20)"
																		}
																	},
																	"id": 221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2204:18:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																"src": "2171:51:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 223,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2170:53:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 234,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"expression": {
																			"expression": {
																				"baseExpression": {
																					"id": 224,
																					"name": "parameters",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 129,
																					"src": "2241:10:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Parameters_$124_storage_$",
																						"typeString": "mapping(bytes32 => struct TokenCapGC.Parameters storage ref)"
																					}
																				},
																				"id": 226,
																				"indexExpression": {
																					"id": 225,
																					"name": "_paramsHash",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 205,
																					"src": "2252:11:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "2241:23:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Parameters_$124_storage",
																					"typeString": "struct TokenCapGC.Parameters storage ref"
																				}
																			},
																			"id": 227,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "token",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 121,
																			"src": "2241:29:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 228,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "totalSupply",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 26,
																		"src": "2241:41:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																			"typeString": "function () view external returns (uint256)"
																		}
																	},
																	"id": 229,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2241:43:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 230,
																			"name": "parameters",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 129,
																			"src": "2287:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Parameters_$124_storage_$",
																				"typeString": "mapping(bytes32 => struct TokenCapGC.Parameters storage ref)"
																			}
																		},
																		"id": 232,
																		"indexExpression": {
																			"id": 231,
																			"name": "_paramsHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 205,
																			"src": "2298:11:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2287:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Parameters_$124_storage",
																			"typeString": "struct TokenCapGC.Parameters storage ref"
																		}
																	},
																	"id": 233,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "cap",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 123,
																	"src": "2287:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2241:73:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 235,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2240:75:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2170:145:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 240,
												"nodeType": "IfStatement",
												"src": "2152:214:2",
												"trueBody": {
													"id": 239,
													"nodeType": "Block",
													"src": "2327:39:2",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 237,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2349:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 211,
															"id": 238,
															"nodeType": "Return",
															"src": "2342:12:2"
														}
													]
												}
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2383:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 211,
												"id": 242,
												"nodeType": "Return",
												"src": "2376:11:2"
											}
										]
									},
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "1833:188:2",
										"text": " @dev check the total supply cap.\n @param  _paramsHash the parameters hash to check the total supply cap against.\n @return bool which represents a success"
									},
									"functionSelector": "8043154d",
									"id": 244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "post",
									"nameLocation": "2036:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "2051:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2051:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "_paramsHash",
												"nameLocation": "2077:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "2069:19:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 204,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2069:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "2099:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 206,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2099:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2040:73:2"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "2135:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 209,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2135:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2134:6:2"
									},
									"scope": 257,
									"src": "2027:368:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 255,
										"nodeType": "Block",
										"src": "2636:66:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"expression": {
															"id": 251,
															"name": "GlobalConstraintInterface",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 113,
															"src": "2654:25:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_GlobalConstraintInterface_$113_$",
																"typeString": "type(contract GlobalConstraintInterface)"
															}
														},
														"id": 252,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "CallPhase",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 83,
														"src": "2654:35:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_enum$_CallPhase_$83_$",
															"typeString": "type(enum GlobalConstraintInterface.CallPhase)"
														}
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberName": "Post",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 81,
													"src": "2654:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_CallPhase_$83",
														"typeString": "enum GlobalConstraintInterface.CallPhase"
													}
												},
												"functionReturnParameters": 250,
												"id": 254,
												"nodeType": "Return",
												"src": "2647:47:2"
											}
										]
									},
									"documentation": {
										"id": 245,
										"nodeType": "StructuredDocumentation",
										"src": "2403:153:2",
										"text": " @dev when return if this globalConstraints is pre, post or both.\n @return CallPhase enum indication  Pre, Post or PreAndPost."
									},
									"functionSelector": "e2b0caef",
									"id": 256,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "when",
									"nameLocation": "2571:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2575:2:2"
									},
									"returnParameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "2599:35:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_CallPhase_$83",
													"typeString": "enum GlobalConstraintInterface.CallPhase"
												},
												"typeName": {
													"id": 248,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 247,
														"name": "GlobalConstraintInterface.CallPhase",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 83,
														"src": "2599:35:2"
													},
													"referencedDeclaration": 83,
													"src": "2599:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_CallPhase_$83",
														"typeString": "enum GlobalConstraintInterface.CallPhase"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2598:37:2"
									},
									"scope": 257,
									"src": "2562:140:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 258,
							"src": "282:2423:2",
							"usedErrors": []
						}
					],
					"src": "37:2670:2"
				},
				"id": 2
			}
		}
	}
}