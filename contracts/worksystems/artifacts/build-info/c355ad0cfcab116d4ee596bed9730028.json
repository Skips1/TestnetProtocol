{
	"id": "c355ad0cfcab116d4ee596bed9730028",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/worksystems/StakingManager.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// import \"../daostack/controller/Avatar.sol\";\r\n// import \"../daostack/globalConstraints/GlobalConstraintInterface.sol\";\r\n// import \"../daostack/controller/ControllerInterface.sol\";\r\n\r\n\r\ncontract StakingManager is Ownable { //, ReentrancyGuard  {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n    \r\n    constructor(address EXD_token /*Avatar _avatar*/)  {\r\n        token =  IERC20(EXD_token);\r\n    }\r\n\r\n\r\n    address[] internal stakeholders;\r\n\r\n    \r\n    struct Balances {\r\n        uint256 free_balance;\r\n        uint256 staked_balance;\r\n        uint256 allocated_balance;\r\n    }\r\n\r\n    /**\r\n     * Stakeholders account and balances\r\n     */\r\n    mapping ( address => Balances ) public balances;\r\n    \r\n    // ------------------------------------------------------------------------------------------\r\n\r\n    mapping (address => bool) private StakeWhitelistMap; \r\n    // addresses of schemes/contracts allowed to interact with stakes\r\n\r\n\r\n    event StakeWhitelisted(address indexed account, bool isWhitelisted);\r\n    event StakeUnWhitelisted(address indexed account, bool isWhitelisted);\r\n\r\n    function isStakeWhitelisted(address _address)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return StakeWhitelistMap[_address];\r\n    }\r\n    \r\n\r\n\r\n    function addAddress(address _address)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(StakeWhitelistMap[_address] != true, \"Address must not be whitelisted already\");\r\n        StakeWhitelistMap[_address] = true;\r\n        emit StakeWhitelisted(_address, true);\r\n    }\r\n\r\n    function removeAddress(address _address)\r\n        public\r\n        onlyOwner\r\n    {        \r\n        require(StakeWhitelistMap[_address] != false, \"Address must be whitelisted already\");\r\n        StakeWhitelistMap[_address] = false;\r\n        emit StakeUnWhitelisted(_address, false);        \r\n    }\r\n\r\n\r\n\r\n    // ---------- STAKES ----------\r\n\r\n    \r\n    bool internal locked;\r\n\r\n    /**\r\n     * @notice A method for a stakeholder to create a stake.\r\n     * @param _stake The size of the stake to be created.\r\n     */\r\n    function Stake(uint256 _stake)\r\n        public\r\n    {\r\n        require(balances[msg.sender].free_balance >=  _stake);\r\n        if(balances[msg.sender].staked_balance == 0) addStakeholder(msg.sender);\r\n        \r\n        balances[msg.sender].free_balance = balances[msg.sender].free_balance.sub(_stake);\r\n        balances[msg.sender].staked_balance = balances[msg.sender].staked_balance.add(_stake);\r\n    }\r\n\r\n    /**\r\n     * @notice A method for a stakeholder to close all available stakes\r\n     */\r\n    function closeAllStakes()\r\n        public\r\n    {\r\n        uint256 staked_amount = balances[msg.sender].staked_balance;\r\n        balances[msg.sender].free_balance = balances[msg.sender].free_balance.add(staked_amount);\r\n        balances[msg.sender].staked_balance = balances[msg.sender].staked_balance.sub(staked_amount);\r\n    }\r\n    \r\n    \r\n    // ---------- EXTERNAL STAKE ALLOCATIONS ----------\r\n    \r\n    \r\n    /**\r\n     * @notice A method for a verified whitelisted contract to allocate for itself some stake // nonReentrant()\r\n     */\r\n    function ProxyStakeAllocate(uint256 _StakeAllocation, address _stakeholder) \r\n        \r\n        public\r\n        returns(bool)\r\n    {\r\n        require(isStakeWhitelisted(msg.sender), \"isStakeWhitelisted must be true for Sender\");\r\n        require(isStakeholder(_stakeholder), \"isStakeholder must be true for Sender\");\r\n        require(balances[_stakeholder].staked_balance >=  _StakeAllocation, \"_stakeholder has to have enough staked balance\");\r\n        // check if the contract calling this method has rights to allocate from user stake\r\n        \r\n        balances[_stakeholder].staked_balance = balances[_stakeholder].staked_balance.sub(_StakeAllocation);\r\n        balances[_stakeholder].allocated_balance = balances[_stakeholder].allocated_balance.add(_StakeAllocation);\r\n        return(true);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @notice A method for a verified whitelisted contract to allocate for itself some stake\r\n     * _StakeToDeallocate has to be equal to the amount of at least one ALLOCATED allocation\r\n     * else the procedure will fail\r\n     */\r\n    function ProxyStakeDeallocate(uint256 _StakeToDeallocate, address _stakeholder)\r\n        \r\n        public\r\n        returns(bool)\r\n    {\r\n        require(isStakeWhitelisted(msg.sender), \"isStakeWhitelisted must be true for Sender\");\r\n        require(isStakeholder(_stakeholder), \"isStakeholder must be true for Sender\");\r\n        require(balances[_stakeholder].allocated_balance >=  _StakeToDeallocate, \"_stakeholder has to have enough allocated balance\");\r\n        // check if the contract calling this method has rights to allocate from user stake\r\n        \r\n        balances[_stakeholder].allocated_balance = balances[_stakeholder].allocated_balance.sub(_StakeToDeallocate);\r\n        balances[_stakeholder].staked_balance = balances[_stakeholder].staked_balance.add(_StakeToDeallocate);\r\n        return(true);\r\n    }\r\n    \r\n    \r\n    // ---------- STAKE STATS ----------\r\n    \r\n     /**\r\n     * @notice A method to retrieve the stake for a stakeholder.\r\n     * @param _stakeholder The stakeholder to retrieve the stake for.\r\n     * @return uint256 The amount of wei staked.\r\n     */\r\n    function AvailableStakedAmountOf(address _stakeholder)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return balances[_stakeholder].staked_balance;\r\n    }\r\n    \r\n     /**\r\n     * @notice A method to retrieve the stake for a stakeholder.\r\n     * @param _stakeholder The stakeholder to retrieve the stake for.\r\n     * @return uint256 The amount of wei staked.\r\n     */\r\n    function AllocatedStakedAmountOf(address _stakeholder)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return balances[_stakeholder].allocated_balance;\r\n    }\r\n\r\n    /**\r\n     * @notice A method to the aggregated stakes from all stakeholders.\r\n     * @return uint256 The aggregated stakes from all stakeholders.\r\n     */\r\n    function TotalStakes()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _totalStakes = 0;\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            address user_address = stakeholders[s];\r\n            uint256 user_staked_amount = balances[user_address].staked_balance;\r\n            _totalStakes = _totalStakes.add(user_staked_amount);\r\n        }\r\n        return _totalStakes;\r\n    }\r\n    \r\n    /**\r\n     * @notice A method to the aggregated stakes from all stakeholders.\r\n     * @return uint256 The aggregated stakes from all stakeholders.\r\n     */\r\n    function TotalAllocatedStakes()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _totalStakes = 0;\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            address user_address = stakeholders[s];\r\n            uint256 user_alloc_amount = balances[user_address].allocated_balance;\r\n            _totalStakes = _totalStakes.add(user_alloc_amount);\r\n        }\r\n        return _totalStakes;\r\n    }\r\n    \r\n    /**\r\n     * @notice A method to the aggregated stakes from all stakeholders.\r\n     * @return uint256 The aggregated stakes from all stakeholders.\r\n     */\r\n    function TotalAvailableStakes()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _totalStakes = 0;\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            address user_address = stakeholders[s];\r\n            uint256 user_free_amount = balances[user_address].free_balance;\r\n            _totalStakes = _totalStakes.add(user_free_amount);\r\n        }\r\n        return _totalStakes;\r\n    }\r\n\r\n    // ---------- STAKEHOLDERS ----------\r\n\r\n    /**\r\n     * @notice A method to check if an address is a stakeholder.\r\n     * @param _address The address to verify.\r\n     * @return bool, uint256 Whether the address is a stakeholder, \r\n     * and if so its position in the stakeholders array.\r\n     */\r\n    function isStakeholderIndex(address _address)\r\n        public\r\n        view\r\n        returns(bool, uint256)\r\n    {\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            if (_address == stakeholders[s]) return (true, s);\r\n        }\r\n        return (false, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice A method to check if an address is a stakeholder.\r\n     * @param _address The address to verify.\r\n     * @return bool, uint256 Whether the address is a stakeholder, \r\n     * and if so its position in the stakeholders array.\r\n     */\r\n    function isStakeholder(address _address)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        for (uint256 s = 0; s < stakeholders.length; s += 1){\r\n            if (_address == stakeholders[s]) return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @notice A method to add a stakeholder.\r\n     * @param _stakeholder The stakeholder to add.\r\n     */\r\n    function addStakeholder(address _stakeholder)\r\n        private\r\n    {\r\n        (bool _isStakeholder, ) = isStakeholderIndex(_stakeholder);\r\n        if(!_isStakeholder) stakeholders.push(_stakeholder);\r\n    }\r\n\r\n    /**\r\n     * @notice A method to remove a stakeholder.\r\n     * @param _stakeholder The stakeholder to remove.\r\n     */\r\n    function removeStakeholder(address _stakeholder)\r\n        private\r\n    {\r\n        (bool _isStakeholder, uint256 s) = isStakeholderIndex(_stakeholder);\r\n        if(_isStakeholder){\r\n            stakeholders[s] = stakeholders[stakeholders.length - 1];\r\n            stakeholders.pop();\r\n        } \r\n    }\r\n\r\n    // ---------- DEPOSIT AND LOCKUP MECHANISMS ----------\r\n\r\n    \r\n  function deposit(uint tokens) public {\r\n    require(token.balanceOf(msg.sender) >= tokens, \"not enough tokens to deposit\");\r\n    // add the deposited tokens into existing balance \r\n    balances[msg.sender].free_balance += tokens;\r\n\r\n    // transfer the tokens from the sender to this contract\r\n    require(token.transferFrom(msg.sender, address(this), tokens));\r\n  }\r\n  \r\n  \r\n    /**\r\n    @notice Withdraw _numTokens ERC20 tokens from the voting contract, revoking these voting rights\r\n    @param _numTokens The number of ERC20 tokens desired in exchange for voting rights\r\n    */\r\n    function withdraw(uint _numTokens) public \r\n    {\r\n        require(balances[msg.sender].free_balance >= _numTokens, \"not enough tokens in the free staked balance to withdraw\");\r\n        require(token.transfer(msg.sender, _numTokens));\r\n        balances[msg.sender].free_balance -= _numTokens;\r\n    }\r\n    \r\n    \r\n    function withdrawAll() public     \r\n    {\r\n        require(balances[msg.sender].free_balance > 0);\r\n        require(token.transfer(msg.sender, balances[msg.sender].free_balance));\r\n        balances[msg.sender].free_balance = 0;\r\n    }\r\n    \r\n\r\n\r\n}"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity 0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity 0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity 0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity 0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad0fb4425453220f15bdb8c4e009052839804bb725797b6d8c02ee2271bc3c23\",\"dweb:/ipfs/QmPtjdMxzEifPUEUa6cKX1yfTWjaZV6QtdwMdN6bEL9FBM\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4fd625dca17657403af518cc6c8ab5c54c58898cf6e912ca2e1b0f3194ad0405\",\"dweb:/ipfs/QmQVv7YeeKmaS11bg7YDTeeGDk6i7sV8LMMfohaLM4SiRu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cb252ec7657ba7a91be688cbd263090aa5379e504f488a62d06198e0d630322\",\"dweb:/ipfs/QmW56fDiDirhWfWiKrycXE5UY6tTNtFrYx39ipnSs8mkYb\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4fd625dca17657403af518cc6c8ab5c54c58898cf6e912ca2e1b0f3194ad0405\",\"dweb:/ipfs/QmQVv7YeeKmaS11bg7YDTeeGDk6i7sV8LMMfohaLM4SiRu\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d108eea9296b6e6ade7552e86c8276b7b31e101be48a5fec73d74e0a1f9e1ff164736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d108eea9296b6e6ade7552e86c8276b7b31e101be48a5fec73d74e0a1f9e1ff164736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 ADDMOD 0xEE 0xA9 0x29 PUSH12 0x6E6ADE7552E86C8276B7B31E LT SHL 0xE4 DUP11 0x5F 0xEC PUSH20 0xD74E0A1F9E1FF164736F6C634300080000330000 ",
							"sourceMap": "467:6301:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;467:6301:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d108eea9296b6e6ade7552e86c8276b7b31e101be48a5fec73d74e0a1f9e1ff164736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 ADDMOD 0xEE 0xA9 0x29 PUSH12 0x6E6ADE7552E86C8276B7B31E LT SHL 0xE4 DUP11 0x5F 0xEC PUSH20 0xD74E0A1F9E1FF164736F6C634300080000330000 ",
							"sourceMap": "467:6301:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d108eea9296b6e6ade7552e86c8276b7b31e101be48a5fec73d74e0a1f9e1ff164736f6c63430008000033",
									".code": [
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://063db5d664d3d5bae10d0056c9d00339265229532d06b53d5f2e91778b2e428d\",\"dweb:/ipfs/QmWM92rU59t6BcZSj4w6ikoPL32R9hyTMb9Msg5X8vvu1s\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/worksystems/StakingManager.sol": {
				"StakingManager": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "EXD_token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "isWhitelisted",
									"type": "bool"
								}
							],
							"name": "StakeUnWhitelisted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "isWhitelisted",
									"type": "bool"
								}
							],
							"name": "StakeWhitelisted",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_stakeholder",
									"type": "address"
								}
							],
							"name": "AllocatedStakedAmountOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_stakeholder",
									"type": "address"
								}
							],
							"name": "AvailableStakedAmountOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_StakeAllocation",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_stakeholder",
									"type": "address"
								}
							],
							"name": "ProxyStakeAllocate",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_StakeToDeallocate",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_stakeholder",
									"type": "address"
								}
							],
							"name": "ProxyStakeDeallocate",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_stake",
									"type": "uint256"
								}
							],
							"name": "Stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "TotalAllocatedStakes",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "TotalAvailableStakes",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "TotalStakes",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "addAddress",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "balances",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "free_balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "staked_balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "allocated_balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "closeAllStakes",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokens",
									"type": "uint256"
								}
							],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "isStakeWhitelisted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "isStakeholder",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "isStakeholderIndex",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "removeAddress",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_numTokens",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"AllocatedStakedAmountOf(address)": {
								"params": {
									"_stakeholder": "The stakeholder to retrieve the stake for."
								},
								"returns": {
									"_0": "uint256 The amount of wei staked."
								}
							},
							"AvailableStakedAmountOf(address)": {
								"params": {
									"_stakeholder": "The stakeholder to retrieve the stake for."
								},
								"returns": {
									"_0": "uint256 The amount of wei staked."
								}
							},
							"Stake(uint256)": {
								"params": {
									"_stake": "The size of the stake to be created."
								}
							},
							"TotalAllocatedStakes()": {
								"returns": {
									"_0": "uint256 The aggregated stakes from all stakeholders."
								}
							},
							"TotalAvailableStakes()": {
								"returns": {
									"_0": "uint256 The aggregated stakes from all stakeholders."
								}
							},
							"TotalStakes()": {
								"returns": {
									"_0": "uint256 The aggregated stakes from all stakeholders."
								}
							},
							"isStakeholder(address)": {
								"params": {
									"_address": "The address to verify."
								},
								"returns": {
									"_0": "bool, uint256 Whether the address is a stakeholder,  and if so its position in the stakeholders array."
								}
							},
							"isStakeholderIndex(address)": {
								"params": {
									"_address": "The address to verify."
								},
								"returns": {
									"_0": "bool, uint256 Whether the address is a stakeholder,  and if so its position in the stakeholders array."
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"withdraw(uint256)": {
								"params": {
									"_numTokens": "The number of ERC20 tokens desired in exchange for voting rights"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/worksystems/StakingManager.sol\":423:11040  contract StakingManager is Ownable { //, ReentrancyGuard  {\r... */\n  mstore(0x40, 0x80)\n    /* \"contracts/worksystems/StakingManager.sol\":555:651  constructor(address EXD_token /*Avatar _avatar*/)  {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_7\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":940:952  _msgSender() */\n  tag_8\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":940:950  _msgSender */\n  tag_9\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":940:952  _msgSender() */\n  jump\t// in\ntag_8:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_7:\n    /* \"contracts/worksystems/StakingManager.sol\":617:622  token */\n  0x01\n    /* \"contracts/worksystems/StakingManager.sol\":617:643  token =  IERC20(EXD_token) */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"contracts/worksystems/StakingManager.sol\":423:11040  contract StakingManager is Ownable { //, ReentrancyGuard  {\r... */\n  jump(tag_15)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_9:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:324   */\ntag_3:\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:107   */\n  iszero\n  tag_17\n  jumpi\n    /* \"#utility.yul\":158:164   */\n  dup1\n    /* \"#utility.yul\":150:156   */\n  dup2\n    /* \"#utility.yul\":143:165   */\n  revert\n    /* \"#utility.yul\":105:107   */\ntag_17:\n    /* \"#utility.yul\":189:205   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":234:265   */\n  dup2\n  and\n    /* \"#utility.yul\":224:266   */\n  dup2\n  eq\n    /* \"#utility.yul\":214:216   */\n  tag_18\n  jumpi\n    /* \"#utility.yul\":285:291   */\n  dup2\n    /* \"#utility.yul\":277:283   */\n  dup3\n    /* \"#utility.yul\":270:292   */\n  revert\n    /* \"#utility.yul\":214:216   */\ntag_18:\n    /* \"#utility.yul\":313:318   */\n  swap4\n    /* \"#utility.yul\":95:324   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_15:\n    /* \"contracts/worksystems/StakingManager.sol\":423:11040  contract StakingManager is Ownable { //, ReentrancyGuard  {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/worksystems/StakingManager.sol\":423:11040  contract StakingManager is Ownable { //, ReentrancyGuard  {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x853828b6\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xcbdce4e0\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xcbdce4e0\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xe67719bd\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xef037b90\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xf20e8b12\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xfc0c546a\n      eq\n      tag_24\n      jumpi\n      jump(tag_2)\n    tag_26:\n      dup1\n      0x853828b6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x8aed0feb\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xb6b55f25\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xbd0bb4f6\n      eq\n      tag_18\n      jumpi\n      jump(tag_2)\n    tag_25:\n      dup1\n      0x27e235e3\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x27e235e3\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x2e1a7d4d\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x38eada1c\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x4ba79dfe\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x6a40cbb6\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_27:\n      dup1\n      0x112b3266\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x12b6887c\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x14bee5a5\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x227a473b\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x23cc9f37\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/worksystems/StakingManager.sol\":4440:5258  function ProxyStakeDeallocate(uint256 _StakeToDeallocate, address _stakeholder)\r... */\n    tag_3:\n      tag_28\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_32\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/worksystems/StakingManager.sol\":3375:4178  function ProxyStakeAllocate(uint256 _StakeAllocation, address _stakeholder) \r... */\n    tag_4:\n      tag_28\n      tag_35\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_35:\n      tag_36\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":6880:7321  function TotalAllocatedStakes()\r... */\n    tag_5:\n      tag_38\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_32\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":2327:2731  function Stake(uint256 _stake)\r... */\n    tag_6:\n      tag_42\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n    tag_42:\n      stop\n        /* \"contracts/worksystems/StakingManager.sol\":6277:6708  function TotalStakes()\r... */\n    tag_7:\n      tag_38\n      tag_47\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":899:946  mapping ( address => Balances ) public balances */\n    tag_8:\n      tag_49\n      tag_50\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      tag_32\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":10476:10775  function withdraw(uint _numTokens) public \r... */\n    tag_9:\n      tag_42\n      tag_56\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_56:\n      tag_57\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":1520:1797  function addAddress(address _address)\r... */\n    tag_10:\n      tag_42\n      tag_59\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_59:\n      tag_60\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":1805:2102  function removeAddress(address _address)\r... */\n    tag_11:\n      tag_42\n      tag_62\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_62:\n      tag_63\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":2830:3157  function closeAllStakes()\r... */\n    tag_12:\n      tag_42\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_13:\n      tag_42\n      tag_67\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":10793:11027  function withdrawAll() public     \r... */\n    tag_14:\n      tag_42\n      tag_69\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":7493:7927  function TotalAvailableStakes()\r... */\n    tag_15:\n      tag_38\n      tag_71\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_16:\n      tag_73\n      tag_74\n      jump\t// in\n    tag_73:\n      mload(0x40)\n      tag_32\n      swap2\n      swap1\n      tag_76\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":9890:10256  function deposit(uint tokens) public {\r... */\n    tag_17:\n      tag_42\n      tag_78\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_78:\n      tag_79\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":8238:8525  function isStakeholderIndex(address _address)\r... */\n    tag_18:\n      tag_80\n      tag_81\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_81:\n      tag_82\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      tag_32\n      swap3\n      swap2\n      swap1\n      tag_84\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":5530:5709  function AvailableStakedAmountOf(address _stakeholder)\r... */\n    tag_19:\n      tag_38\n      tag_86\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_86:\n      tag_87\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":1346:1504  function isStakeWhitelisted(address _address)\r... */\n    tag_20:\n      tag_28\n      tag_90\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_90:\n      tag_91\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":8791:9054  function isStakeholder(address _address)\r... */\n    tag_21:\n      tag_28\n      tag_94\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_94:\n      tag_95\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":5927:6109  function AllocatedStakedAmountOf(address _stakeholder)\r... */\n    tag_22:\n      tag_38\n      tag_98\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_98:\n      tag_99\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_23:\n      tag_42\n      tag_102\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_102:\n      tag_103\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":523:542  IERC20 public token */\n    tag_24:\n      tag_73\n      tag_105\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":4440:5258  function ProxyStakeDeallocate(uint256 _StakeToDeallocate, address _stakeholder)\r... */\n    tag_31:\n        /* \"contracts/worksystems/StakingManager.sol\":4563:4567  bool */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":4593:4623  isStakeWhitelisted(msg.sender) */\n      tag_109\n        /* \"contracts/worksystems/StakingManager.sol\":4612:4622  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":4593:4611  isStakeWhitelisted */\n      tag_91\n        /* \"contracts/worksystems/StakingManager.sol\":4593:4623  isStakeWhitelisted(msg.sender) */\n      jump\t// in\n    tag_109:\n        /* \"contracts/worksystems/StakingManager.sol\":4585:4670  require(isStakeWhitelisted(msg.sender), \"isStakeWhitelisted must be true for Sender\") */\n      tag_110\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_112\n      jump\t// in\n    tag_111:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_110:\n        /* \"contracts/worksystems/StakingManager.sol\":4689:4716  isStakeholder(_stakeholder) */\n      tag_113\n        /* \"contracts/worksystems/StakingManager.sol\":4703:4715  _stakeholder */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":4689:4702  isStakeholder */\n      tag_95\n        /* \"contracts/worksystems/StakingManager.sol\":4689:4716  isStakeholder(_stakeholder) */\n      jump\t// in\n    tag_113:\n        /* \"contracts/worksystems/StakingManager.sol\":4681:4758  require(isStakeholder(_stakeholder), \"isStakeholder must be true for Sender\") */\n      tag_114\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_116\n      jump\t// in\n    tag_114:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":4777:4799  balances[_stakeholder] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":4777:4785  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":4777:4799  balances[_stakeholder] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":4777:4817  balances[_stakeholder].allocated_balance */\n      0x02\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":4777:4840  balances[_stakeholder].allocated_balance >=  _StakeToDeallocate */\n      dup4\n      gt\n      iszero\n        /* \"contracts/worksystems/StakingManager.sol\":4769:4894  require(balances[_stakeholder].allocated_balance >=  _StakeToDeallocate, \"_stakeholder has to have enough allocated balance\") */\n      tag_117\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_119\n      jump\t// in\n    tag_117:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":5051:5073  balances[_stakeholder] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":5051:5059  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":5051:5073  balances[_stakeholder] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":5051:5091  balances[_stakeholder].allocated_balance */\n      0x02\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":5051:5115  balances[_stakeholder].allocated_balance.sub(_StakeToDeallocate) */\n      tag_120\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":5096:5114  _StakeToDeallocate */\n      dup5\n        /* \"contracts/worksystems/StakingManager.sol\":5051:5095  balances[_stakeholder].allocated_balance.sub */\n      tag_121\n        /* \"contracts/worksystems/StakingManager.sol\":5051:5115  balances[_stakeholder].allocated_balance.sub(_StakeToDeallocate) */\n      jump\t// in\n    tag_120:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":5008:5030  balances[_stakeholder] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":5008:5016  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":5008:5030  balances[_stakeholder] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":5008:5048  balances[_stakeholder].allocated_balance */\n      0x02\n      dup2\n      add\n        /* \"contracts/worksystems/StakingManager.sol\":5008:5115  balances[_stakeholder].allocated_balance = balances[_stakeholder].allocated_balance.sub(_StakeToDeallocate) */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"contracts/worksystems/StakingManager.sol\":5166:5203  balances[_stakeholder].staked_balance */\n      0x01\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":5166:5227  balances[_stakeholder].staked_balance.add(_StakeToDeallocate) */\n      tag_122\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":5208:5226  _StakeToDeallocate */\n      dup5\n        /* \"contracts/worksystems/StakingManager.sol\":5166:5207  balances[_stakeholder].staked_balance.add */\n      tag_123\n        /* \"contracts/worksystems/StakingManager.sol\":5166:5227  balances[_stakeholder].staked_balance.add(_StakeToDeallocate) */\n      jump\t// in\n    tag_122:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":5126:5148  balances[_stakeholder] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":5126:5134  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":5126:5148  balances[_stakeholder] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":5126:5163  balances[_stakeholder].staked_balance */\n      0x01\n      swap1\n      dup2\n      add\n        /* \"contracts/worksystems/StakingManager.sol\":5126:5227  balances[_stakeholder].staked_balance = balances[_stakeholder].staked_balance.add(_StakeToDeallocate) */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"contracts/worksystems/StakingManager.sol\":5126:5163  balances[_stakeholder].staked_balance */\n      swap1\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":4440:5258  function ProxyStakeDeallocate(uint256 _StakeToDeallocate, address _stakeholder)\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":3375:4178  function ProxyStakeAllocate(uint256 _StakeAllocation, address _stakeholder) \r... */\n    tag_36:\n        /* \"contracts/worksystems/StakingManager.sol\":3495:3499  bool */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":3525:3555  isStakeWhitelisted(msg.sender) */\n      tag_125\n        /* \"contracts/worksystems/StakingManager.sol\":3544:3554  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":3525:3543  isStakeWhitelisted */\n      tag_91\n        /* \"contracts/worksystems/StakingManager.sol\":3525:3555  isStakeWhitelisted(msg.sender) */\n      jump\t// in\n    tag_125:\n        /* \"contracts/worksystems/StakingManager.sol\":3517:3602  require(isStakeWhitelisted(msg.sender), \"isStakeWhitelisted must be true for Sender\") */\n      tag_126\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_112\n      jump\t// in\n    tag_126:\n        /* \"contracts/worksystems/StakingManager.sol\":3621:3648  isStakeholder(_stakeholder) */\n      tag_128\n        /* \"contracts/worksystems/StakingManager.sol\":3635:3647  _stakeholder */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":3621:3634  isStakeholder */\n      tag_95\n        /* \"contracts/worksystems/StakingManager.sol\":3621:3648  isStakeholder(_stakeholder) */\n      jump\t// in\n    tag_128:\n        /* \"contracts/worksystems/StakingManager.sol\":3613:3690  require(isStakeholder(_stakeholder), \"isStakeholder must be true for Sender\") */\n      tag_129\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_116\n      jump\t// in\n    tag_129:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":3709:3731  balances[_stakeholder] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":3709:3717  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":3709:3731  balances[_stakeholder] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":3709:3746  balances[_stakeholder].staked_balance */\n      0x01\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":3709:3767  balances[_stakeholder].staked_balance >=  _StakeAllocation */\n      dup4\n      gt\n      iszero\n        /* \"contracts/worksystems/StakingManager.sol\":3701:3818  require(balances[_stakeholder].staked_balance >=  _StakeAllocation, \"_stakeholder has to have enough staked balance\") */\n      tag_131\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_133\n      jump\t// in\n    tag_131:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":3972:3994  balances[_stakeholder] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":3972:3980  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":3972:3994  balances[_stakeholder] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":3972:4009  balances[_stakeholder].staked_balance */\n      0x01\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":3972:4031  balances[_stakeholder].staked_balance.sub(_StakeAllocation) */\n      tag_134\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":4014:4030  _StakeAllocation */\n      dup5\n        /* \"contracts/worksystems/StakingManager.sol\":3972:4013  balances[_stakeholder].staked_balance.sub */\n      tag_121\n        /* \"contracts/worksystems/StakingManager.sol\":3972:4031  balances[_stakeholder].staked_balance.sub(_StakeAllocation) */\n      jump\t// in\n    tag_134:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":3932:3954  balances[_stakeholder] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":3932:3940  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":3932:3954  balances[_stakeholder] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":3932:3969  balances[_stakeholder].staked_balance */\n      0x01\n      dup2\n      add\n        /* \"contracts/worksystems/StakingManager.sol\":3932:4031  balances[_stakeholder].staked_balance = balances[_stakeholder].staked_balance.sub(_StakeAllocation) */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"contracts/worksystems/StakingManager.sol\":4085:4125  balances[_stakeholder].allocated_balance */\n      0x02\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":4085:4147  balances[_stakeholder].allocated_balance.add(_StakeAllocation) */\n      tag_135\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":4130:4146  _StakeAllocation */\n      dup5\n        /* \"contracts/worksystems/StakingManager.sol\":4085:4129  balances[_stakeholder].allocated_balance.add */\n      tag_123\n        /* \"contracts/worksystems/StakingManager.sol\":4085:4147  balances[_stakeholder].allocated_balance.add(_StakeAllocation) */\n      jump\t// in\n    tag_135:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":4042:4064  balances[_stakeholder] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":4042:4050  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":4042:4064  balances[_stakeholder] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":4042:4082  balances[_stakeholder].allocated_balance */\n      0x02\n      add\n        /* \"contracts/worksystems/StakingManager.sol\":4042:4147  balances[_stakeholder].allocated_balance = balances[_stakeholder].allocated_balance.add(_StakeAllocation) */\n      sstore\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":4165:4169  true */\n      0x01\n        /* \"contracts/worksystems/StakingManager.sol\":3375:4178  function ProxyStakeAllocate(uint256 _StakeAllocation, address _stakeholder) \r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":6880:7321  function TotalAllocatedStakes()\r... */\n    tag_39:\n        /* \"contracts/worksystems/StakingManager.sol\":6959:6966  uint256 */\n      0x00\n      dup1\n      dup1\n        /* \"contracts/worksystems/StakingManager.sol\":7019:7284  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n    tag_137:\n        /* \"contracts/worksystems/StakingManager.sol\":7043:7055  stakeholders */\n      0x02\n        /* \"contracts/worksystems/StakingManager.sol\":7043:7062  stakeholders.length */\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":7039:7062  s < stakeholders.length */\n      dup2\n      lt\n        /* \"contracts/worksystems/StakingManager.sol\":7019:7284  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      iszero\n      tag_138\n      jumpi\n        /* \"contracts/worksystems/StakingManager.sol\":7086:7106  address user_address */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":7109:7121  stakeholders */\n      0x02\n        /* \"contracts/worksystems/StakingManager.sol\":7122:7123  s */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":7109:7124  stakeholders[s] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_140\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_140:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      swap1\n      swap2\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":7167:7189  balances[user_address] */\n      dup1\n      dup4\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":7167:7175  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":7167:7189  balances[user_address] */\n      swap1\n      swap2\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":7167:7207  balances[user_address].allocated_balance */\n      0x02\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":7109:7124  stakeholders[s] */\n      swap1\n      swap2\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":7237:7272  _totalStakes.add(user_alloc_amount) */\n      tag_142\n        /* \"contracts/worksystems/StakingManager.sol\":7237:7249  _totalStakes */\n      dup5\n        /* \"contracts/worksystems/StakingManager.sol\":7167:7207  balances[user_address].allocated_balance */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":7237:7253  _totalStakes.add */\n      tag_123\n        /* \"contracts/worksystems/StakingManager.sol\":7237:7272  _totalStakes.add(user_alloc_amount) */\n      jump\t// in\n    tag_142:\n        /* \"contracts/worksystems/StakingManager.sol\":7222:7272  _totalStakes = _totalStakes.add(user_alloc_amount) */\n      swap4\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":7019:7284  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      pop\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":7069:7070  1 */\n      0x01\n        /* \"contracts/worksystems/StakingManager.sol\":7064:7070  s += 1 */\n      dup2\n      tag_143\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_143:\n      swap1\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":7019:7284  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      jump(tag_137)\n    tag_138:\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":7301:7313  _totalStakes */\n      swap1\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":6880:7321  function TotalAllocatedStakes()\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":2327:2731  function Stake(uint256 _stake)\r... */\n    tag_45:\n        /* \"contracts/worksystems/StakingManager.sol\":2407:2417  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":2398:2418  balances[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":2398:2406  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":2398:2418  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":2398:2431  balances[msg.sender].free_balance */\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":2398:2442  balances[msg.sender].free_balance >=  _stake */\n      dup2\n      gt\n      iszero\n        /* \"contracts/worksystems/StakingManager.sol\":2390:2443  require(balances[msg.sender].free_balance >=  _stake) */\n      tag_146\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_146:\n        /* \"contracts/worksystems/StakingManager.sol\":2466:2476  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":2457:2477  balances[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":2457:2465  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":2457:2477  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":2457:2492  balances[msg.sender].staked_balance */\n      0x01\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":2454:2525  if(balances[msg.sender].staked_balance == 0) addStakeholder(msg.sender) */\n      tag_148\n      jumpi\n        /* \"contracts/worksystems/StakingManager.sol\":2499:2525  addStakeholder(msg.sender) */\n      tag_148\n        /* \"contracts/worksystems/StakingManager.sol\":2514:2524  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":2499:2513  addStakeholder */\n      tag_149\n        /* \"contracts/worksystems/StakingManager.sol\":2499:2525  addStakeholder(msg.sender) */\n      jump\t// in\n    tag_148:\n        /* \"contracts/worksystems/StakingManager.sol\":2591:2601  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":2582:2602  balances[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":2582:2590  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":2582:2602  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":2582:2615  balances[msg.sender].free_balance */\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":2582:2627  balances[msg.sender].free_balance.sub(_stake) */\n      tag_150\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":2620:2626  _stake */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":2582:2619  balances[msg.sender].free_balance.sub */\n      tag_121\n        /* \"contracts/worksystems/StakingManager.sol\":2582:2627  balances[msg.sender].free_balance.sub(_stake) */\n      jump\t// in\n    tag_150:\n        /* \"contracts/worksystems/StakingManager.sol\":2555:2565  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":2546:2566  balances[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":2546:2554  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":2546:2566  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":2546:2627  balances[msg.sender].free_balance = balances[msg.sender].free_balance.sub(_stake) */\n      swap1\n      dup2\n      sstore\n        /* \"contracts/worksystems/StakingManager.sol\":2676:2711  balances[msg.sender].staked_balance */\n      0x01\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":2676:2723  balances[msg.sender].staked_balance.add(_stake) */\n      tag_151\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":2716:2722  _stake */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":2676:2715  balances[msg.sender].staked_balance.add */\n      tag_123\n        /* \"contracts/worksystems/StakingManager.sol\":2676:2723  balances[msg.sender].staked_balance.add(_stake) */\n      jump\t// in\n    tag_151:\n        /* \"contracts/worksystems/StakingManager.sol\":2647:2657  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":2638:2658  balances[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":2638:2646  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":2638:2658  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":2638:2673  balances[msg.sender].staked_balance */\n      0x01\n      add\n        /* \"contracts/worksystems/StakingManager.sol\":2638:2723  balances[msg.sender].staked_balance = balances[msg.sender].staked_balance.add(_stake) */\n      sstore\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":2327:2731  function Stake(uint256 _stake)\r... */\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":6277:6708  function TotalStakes()\r... */\n    tag_47:\n        /* \"contracts/worksystems/StakingManager.sol\":6347:6354  uint256 */\n      0x00\n      dup1\n      dup1\n        /* \"contracts/worksystems/StakingManager.sol\":6407:6671  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n    tag_153:\n        /* \"contracts/worksystems/StakingManager.sol\":6431:6443  stakeholders */\n      0x02\n        /* \"contracts/worksystems/StakingManager.sol\":6431:6450  stakeholders.length */\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":6427:6450  s < stakeholders.length */\n      dup2\n      lt\n        /* \"contracts/worksystems/StakingManager.sol\":6407:6671  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      iszero\n      tag_138\n      jumpi\n        /* \"contracts/worksystems/StakingManager.sol\":6474:6494  address user_address */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":6497:6509  stakeholders */\n      0x02\n        /* \"contracts/worksystems/StakingManager.sol\":6510:6511  s */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":6497:6512  stakeholders[s] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_156\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_156:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      swap1\n      swap2\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":6556:6578  balances[user_address] */\n      dup1\n      dup4\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":6556:6564  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":6556:6578  balances[user_address] */\n      swap1\n      swap2\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":6497:6512  stakeholders[s] */\n      0x01\n        /* \"contracts/worksystems/StakingManager.sol\":6556:6593  balances[user_address].staked_balance */\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":6497:6512  stakeholders[s] */\n      swap1\n      swap2\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":6623:6659  _totalStakes.add(user_staked_amount) */\n      tag_158\n        /* \"contracts/worksystems/StakingManager.sol\":6623:6635  _totalStakes */\n      dup5\n        /* \"contracts/worksystems/StakingManager.sol\":6556:6593  balances[user_address].staked_balance */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":6623:6639  _totalStakes.add */\n      tag_123\n        /* \"contracts/worksystems/StakingManager.sol\":6623:6659  _totalStakes.add(user_staked_amount) */\n      jump\t// in\n    tag_158:\n        /* \"contracts/worksystems/StakingManager.sol\":6608:6659  _totalStakes = _totalStakes.add(user_staked_amount) */\n      swap4\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":6407:6671  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      pop\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":6457:6458  1 */\n      0x01\n        /* \"contracts/worksystems/StakingManager.sol\":6452:6458  s += 1 */\n      dup2\n      tag_159\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_159:\n      swap1\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":6407:6671  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      jump(tag_153)\n        /* \"contracts/worksystems/StakingManager.sol\":899:946  mapping ( address => Balances ) public balances */\n    tag_52:\n      mstore(0x20, 0x03)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x02\n      swap1\n      swap3\n      add\n      sload\n      swap1\n      swap2\n      swap1\n      dup4\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":10476:10775  function withdraw(uint _numTokens) public \r... */\n    tag_57:\n        /* \"contracts/worksystems/StakingManager.sol\":10552:10562  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":10543:10563  balances[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":10543:10551  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":10543:10563  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":10543:10576  balances[msg.sender].free_balance */\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":10543:10590  balances[msg.sender].free_balance >= _numTokens */\n      dup2\n      gt\n      iszero\n        /* \"contracts/worksystems/StakingManager.sol\":10535:10651  require(balances[msg.sender].free_balance >= _numTokens, \"not enough tokens in the free staked balance to withdraw\") */\n      tag_161\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_163\n      jump\t// in\n    tag_161:\n        /* \"contracts/worksystems/StakingManager.sol\":10670:10675  token */\n      sload(0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":10670:10708  token.transfer(msg.sender, _numTokens) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":10670:10675  token */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10670:10684  token.transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10670:10708  token.transfer(msg.sender, _numTokens) */\n      tag_164\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10685:10695  msg.sender */\n      caller\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10697:10707  _numTokens */\n      dup6\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10670:10708  token.transfer(msg.sender, _numTokens) */\n      0x04\n      add\n      tag_165\n      jump\t// in\n    tag_164:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_166\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_166:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_168\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_168:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_169\n      swap2\n      swap1\n      tag_170\n      jump\t// in\n    tag_169:\n        /* \"contracts/worksystems/StakingManager.sol\":10662:10709  require(token.transfer(msg.sender, _numTokens)) */\n      tag_171\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_171:\n        /* \"contracts/worksystems/StakingManager.sol\":10729:10739  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":10720:10740  balances[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":10720:10728  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":10720:10740  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":10720:10767  balances[msg.sender].free_balance -= _numTokens */\n      dup1\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":10757:10767  _numTokens */\n      dup4\n      swap3\n        /* \"contracts/worksystems/StakingManager.sol\":10720:10740  balances[msg.sender] */\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10720:10767  balances[msg.sender].free_balance -= _numTokens */\n      tag_172\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10757:10767  _numTokens */\n      dup5\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10720:10767  balances[msg.sender].free_balance -= _numTokens */\n      tag_173\n      jump\t// in\n    tag_172:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":10476:10775  function withdraw(uint _numTokens) public \r... */\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":1520:1797  function addAddress(address _address)\r... */\n    tag_60:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_175\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_176\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_175:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_177\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_74\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_177:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_178\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_180\n      jump\t// in\n    tag_178:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":1617:1644  StakeWhitelistMap[_address] */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":1617:1634  StakeWhitelistMap */\n      0x04\n        /* \"contracts/worksystems/StakingManager.sol\":1617:1644  StakeWhitelistMap[_address] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":1617:1652  StakeWhitelistMap[_address] != true */\n      iszero\n      iszero\n        /* \"contracts/worksystems/StakingManager.sol\":1617:1644  StakeWhitelistMap[_address] */\n      0x01\n        /* \"contracts/worksystems/StakingManager.sol\":1617:1652  StakeWhitelistMap[_address] != true */\n      eq\n      iszero\n        /* \"contracts/worksystems/StakingManager.sol\":1609:1696  require(StakeWhitelistMap[_address] != true, \"Address must not be whitelisted already\") */\n      tag_182\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_184\n      jump\t// in\n    tag_182:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":1707:1734  StakeWhitelistMap[_address] */\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":1707:1724  StakeWhitelistMap */\n      0x04\n        /* \"contracts/worksystems/StakingManager.sol\":1707:1734  StakeWhitelistMap[_address] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":1707:1741  StakeWhitelistMap[_address] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":1737:1741  true */\n      0x01\n        /* \"contracts/worksystems/StakingManager.sol\":1707:1741  StakeWhitelistMap[_address] = true */\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/worksystems/StakingManager.sol\":1757:1789  StakeWhitelisted(_address, true) */\n      swap1\n      mload\n      0x34e57d3e15d2174a31aed19b5a635aad3c7fd6d6ff6b19d43f56819654e990fd\n      swap2\n      tag_185\n      swap2\n      tag_33\n      jump\t// in\n    tag_185:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/worksystems/StakingManager.sol\":1520:1797  function addAddress(address _address)\r... */\n      pop\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":1805:2102  function removeAddress(address _address)\r... */\n    tag_63:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_187\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_176\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_187:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_188\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_74\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_188:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_189\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_180\n      jump\t// in\n    tag_189:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":1913:1940  StakeWhitelistMap[_address] */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":1913:1930  StakeWhitelistMap */\n      0x04\n        /* \"contracts/worksystems/StakingManager.sol\":1913:1940  StakeWhitelistMap[_address] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":1905:1989  require(StakeWhitelistMap[_address] != false, \"Address must be whitelisted already\") */\n      tag_192\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_194\n      jump\t// in\n    tag_192:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":2000:2027  StakeWhitelistMap[_address] */\n      dup2\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":2030:2035  false */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":2000:2027  StakeWhitelistMap[_address] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":2000:2017  StakeWhitelistMap */\n      0x04\n        /* \"contracts/worksystems/StakingManager.sol\":2000:2027  StakeWhitelistMap[_address] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":2000:2035  StakeWhitelistMap[_address] = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/worksystems/StakingManager.sol\":2051:2086  StakeUnWhitelisted(_address, false) */\n      mload\n      0xc87598b69899c8b872e8b5e416808d7332fe62ed4f035f7e72ae6f646e12f73f\n      swap2\n      tag_185\n      swap2\n      tag_33\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":2830:3157  function closeAllStakes()\r... */\n    tag_65:\n        /* \"contracts/worksystems/StakingManager.sol\":2921:2931  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":2888:2909  uint256 staked_amount */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":2912:2932  balances[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":2912:2920  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":2912:2932  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":2912:2947  balances[msg.sender].staked_balance */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":2994:3027  balances[msg.sender].free_balance */\n      swap1\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":2994:3046  balances[msg.sender].free_balance.add(staked_amount) */\n      tag_197\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":2912:2947  balances[msg.sender].staked_balance */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":2994:3031  balances[msg.sender].free_balance.add */\n      tag_123\n        /* \"contracts/worksystems/StakingManager.sol\":2994:3046  balances[msg.sender].free_balance.add(staked_amount) */\n      jump\t// in\n    tag_197:\n        /* \"contracts/worksystems/StakingManager.sol\":2967:2977  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":2958:2978  balances[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":2958:2966  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":2958:2978  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":2958:3046  balances[msg.sender].free_balance = balances[msg.sender].free_balance.add(staked_amount) */\n      swap1\n      dup2\n      sstore\n        /* \"contracts/worksystems/StakingManager.sol\":3095:3130  balances[msg.sender].staked_balance */\n      0x01\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":3095:3149  balances[msg.sender].staked_balance.sub(staked_amount) */\n      tag_151\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":3135:3148  staked_amount */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":3095:3134  balances[msg.sender].staked_balance.sub */\n      tag_121\n        /* \"contracts/worksystems/StakingManager.sol\":3095:3149  balances[msg.sender].staked_balance.sub(staked_amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_67:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_200\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_176\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_200:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_201\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_74\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_201:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_202\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_180\n      jump\t// in\n    tag_202:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_205\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_206\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_205:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":10793:11027  function withdrawAll() public     \r... */\n    tag_69:\n        /* \"contracts/worksystems/StakingManager.sol\":10861:10871  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":10888:10889  0 */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":10852:10872  balances[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":10852:10860  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":10852:10872  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":10852:10885  balances[msg.sender].free_balance */\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":10844:10890  require(balances[msg.sender].free_balance > 0) */\n      tag_208\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_208:\n        /* \"contracts/worksystems/StakingManager.sol\":10909:10914  token */\n      sload(0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":10924:10934  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":10909:10914  token */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":10936:10956  balances[msg.sender] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":10936:10944  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":10936:10956  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":10936:10969  balances[msg.sender].free_balance */\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":10909:10970  token.transfer(msg.sender, balances[msg.sender].free_balance) */\n      swap1\n      mload\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":10909:10914  token */\n      swap1\n      swap4\n      and\n      swap3\n        /* \"contracts/worksystems/StakingManager.sol\":10909:10923  token.transfer */\n      0xa9059cbb\n      swap3\n        /* \"contracts/worksystems/StakingManager.sol\":10909:10970  token.transfer(msg.sender, balances[msg.sender].free_balance) */\n      tag_209\n      swap3\n        /* \"contracts/worksystems/StakingManager.sol\":10924:10934  msg.sender */\n      swap1\n      swap2\n        /* \"contracts/worksystems/StakingManager.sol\":10909:10970  token.transfer(msg.sender, balances[msg.sender].free_balance) */\n      0x04\n      add\n      tag_165\n      jump\t// in\n    tag_209:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_210\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_210:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_212\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_212:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_213\n      swap2\n      swap1\n      tag_170\n      jump\t// in\n    tag_213:\n        /* \"contracts/worksystems/StakingManager.sol\":10901:10971  require(token.transfer(msg.sender, balances[msg.sender].free_balance)) */\n      tag_214\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_214:\n        /* \"contracts/worksystems/StakingManager.sol\":10991:11001  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":11018:11019  0 */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":10982:11002  balances[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":10982:10990  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":10982:11002  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":10982:11019  balances[msg.sender].free_balance = 0 */\n      sstore\n        /* \"contracts/worksystems/StakingManager.sol\":10793:11027  function withdrawAll() public     \r... */\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":7493:7927  function TotalAvailableStakes()\r... */\n    tag_71:\n        /* \"contracts/worksystems/StakingManager.sol\":7572:7579  uint256 */\n      0x00\n      dup1\n      dup1\n        /* \"contracts/worksystems/StakingManager.sol\":7632:7890  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n    tag_216:\n        /* \"contracts/worksystems/StakingManager.sol\":7656:7668  stakeholders */\n      0x02\n        /* \"contracts/worksystems/StakingManager.sol\":7656:7675  stakeholders.length */\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":7652:7675  s < stakeholders.length */\n      dup2\n      lt\n        /* \"contracts/worksystems/StakingManager.sol\":7632:7890  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      iszero\n      tag_138\n      jumpi\n        /* \"contracts/worksystems/StakingManager.sol\":7699:7719  address user_address */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":7722:7734  stakeholders */\n      0x02\n        /* \"contracts/worksystems/StakingManager.sol\":7735:7736  s */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":7722:7737  stakeholders[s] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_219\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_219:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      keccak256\n      swap1\n      swap2\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":7779:7801  balances[user_address] */\n      dup1\n      dup4\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":7779:7787  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":7779:7801  balances[user_address] */\n      swap1\n      swap2\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":7779:7814  balances[user_address].free_balance */\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":7722:7737  stakeholders[s] */\n      swap1\n      swap2\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":7844:7878  _totalStakes.add(user_free_amount) */\n      tag_221\n        /* \"contracts/worksystems/StakingManager.sol\":7844:7856  _totalStakes */\n      dup5\n        /* \"contracts/worksystems/StakingManager.sol\":7779:7814  balances[user_address].free_balance */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":7844:7860  _totalStakes.add */\n      tag_123\n        /* \"contracts/worksystems/StakingManager.sol\":7844:7878  _totalStakes.add(user_free_amount) */\n      jump\t// in\n    tag_221:\n        /* \"contracts/worksystems/StakingManager.sol\":7829:7878  _totalStakes = _totalStakes.add(user_free_amount) */\n      swap4\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":7632:7890  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      pop\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":7682:7683  1 */\n      0x01\n        /* \"contracts/worksystems/StakingManager.sol\":7677:7683  s += 1 */\n      dup2\n      tag_222\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_222:\n      swap1\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":7632:7890  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      jump(tag_216)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_74:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":9890:10256  function deposit(uint tokens) public {\r... */\n    tag_79:\n        /* \"contracts/worksystems/StakingManager.sol\":9942:9947  token */\n      sload(0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":9942:9969  token.balanceOf(msg.sender) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":9973:9979  tokens */\n      dup3\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":9942:9947  token */\n      and\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":9942:9957  token.balanceOf */\n      0x70a08231\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":9942:9969  token.balanceOf(msg.sender) */\n      tag_225\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":9958:9968  msg.sender */\n      caller\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":9942:9969  token.balanceOf(msg.sender) */\n      0x04\n      add\n      tag_76\n      jump\t// in\n    tag_225:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_226\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_226:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_228\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_228:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_229\n      swap2\n      swap1\n      tag_230\n      jump\t// in\n    tag_229:\n        /* \"contracts/worksystems/StakingManager.sol\":9942:9979  token.balanceOf(msg.sender) >= tokens */\n      lt\n      iszero\n        /* \"contracts/worksystems/StakingManager.sol\":9934:10012  require(token.balanceOf(msg.sender) >= tokens, \"not enough tokens to deposit\") */\n      tag_231\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_233\n      jump\t// in\n    tag_231:\n        /* \"contracts/worksystems/StakingManager.sol\":10084:10094  msg.sender */\n      caller\n        /* \"contracts/worksystems/StakingManager.sol\":10075:10095  balances[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":10075:10083  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":10075:10095  balances[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":10075:10118  balances[msg.sender].free_balance += tokens */\n      dup1\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":10112:10118  tokens */\n      dup4\n      swap3\n        /* \"contracts/worksystems/StakingManager.sol\":10075:10095  balances[msg.sender] */\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10075:10118  balances[msg.sender].free_balance += tokens */\n      tag_234\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10112:10118  tokens */\n      dup5\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10075:10118  balances[msg.sender].free_balance += tokens */\n      tag_144\n      jump\t// in\n    tag_234:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":10196:10201  token */\n      sload(0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":10196:10249  token.transferFrom(msg.sender, address(this), tokens) */\n      mload(0x40)\n      shl(0xe0, 0x23b872dd)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":10196:10201  token */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10196:10214  token.transferFrom */\n      0x23b872dd\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10196:10249  token.transferFrom(msg.sender, address(this), tokens) */\n      tag_235\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10215:10225  msg.sender */\n      caller\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10235:10239  this */\n      address\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10242:10248  tokens */\n      dup7\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":10196:10249  token.transferFrom(msg.sender, address(this), tokens) */\n      0x04\n      add\n      tag_236\n      jump\t// in\n    tag_235:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_237\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_237:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_239\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_239:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_240\n      swap2\n      swap1\n      tag_170\n      jump\t// in\n    tag_240:\n        /* \"contracts/worksystems/StakingManager.sol\":10188:10250  require(token.transferFrom(msg.sender, address(this), tokens)) */\n      tag_241\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_241:\n        /* \"contracts/worksystems/StakingManager.sol\":9890:10256  function deposit(uint tokens) public {\r... */\n      pop\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":8238:8525  function isStakeholderIndex(address _address)\r... */\n    tag_82:\n        /* \"contracts/worksystems/StakingManager.sol\":8331:8335  bool */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":8337:8344  uint256 */\n      dup1\n        /* \"contracts/worksystems/StakingManager.sol\":8367:8376  uint256 s */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":8362:8490  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n    tag_243:\n        /* \"contracts/worksystems/StakingManager.sol\":8386:8398  stakeholders */\n      0x02\n        /* \"contracts/worksystems/StakingManager.sol\":8386:8405  stakeholders.length */\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":8382:8405  s < stakeholders.length */\n      dup2\n      lt\n        /* \"contracts/worksystems/StakingManager.sol\":8362:8490  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      iszero\n      tag_244\n      jumpi\n        /* \"contracts/worksystems/StakingManager.sol\":8445:8457  stakeholders */\n      0x02\n        /* \"contracts/worksystems/StakingManager.sol\":8458:8459  s */\n      dup2\n        /* \"contracts/worksystems/StakingManager.sol\":8445:8460  stakeholders[s] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_246\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_246:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":8433:8460  _address == stakeholders[s] */\n      dup6\n      dup2\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":8445:8460  stakeholders[s] */\n      swap2\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":8433:8460  _address == stakeholders[s] */\n      eq\n        /* \"contracts/worksystems/StakingManager.sol\":8429:8478  if (_address == stakeholders[s]) return (true, s) */\n      iszero\n      tag_248\n      jumpi\n        /* \"contracts/worksystems/StakingManager.sol\":8470:8474  true */\n      0x01\n      swap3\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":8476:8477  s */\n      swap1\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":8462:8478  return (true, s) */\n      jump(tag_242)\n        /* \"contracts/worksystems/StakingManager.sol\":8429:8478  if (_address == stakeholders[s]) return (true, s) */\n    tag_248:\n        /* \"contracts/worksystems/StakingManager.sol\":8407:8413  s += 1 */\n      tag_249\n        /* \"contracts/worksystems/StakingManager.sol\":8412:8413  1 */\n      0x01\n        /* \"contracts/worksystems/StakingManager.sol\":8407:8413  s += 1 */\n      dup3\n      tag_144\n      jump\t// in\n    tag_249:\n      swap1\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":8362:8490  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      jump(tag_243)\n    tag_244:\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":8508:8513  false */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":8515:8516  0 */\n      dup1\n        /* \"contracts/worksystems/StakingManager.sol\":8500:8517  return (false, 0) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":8238:8525  function isStakeholderIndex(address _address)\r... */\n    tag_242:\n      swap2\n      pop\n      swap2\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":5530:5709  function AvailableStakedAmountOf(address _stakeholder)\r... */\n    tag_87:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":5664:5686  balances[_stakeholder] */\n      dup2\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":5632:5639  uint256 */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":5664:5686  balances[_stakeholder] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":5664:5672  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":5664:5686  balances[_stakeholder] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":5664:5701  balances[_stakeholder].staked_balance */\n      0x01\n      add\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":5530:5709  function AvailableStakedAmountOf(address _stakeholder)\r... */\n    tag_250:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":1346:1504  function isStakeWhitelisted(address _address)\r... */\n    tag_91:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":1469:1496  StakeWhitelistMap[_address] */\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":1440:1444  bool */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":1469:1496  StakeWhitelistMap[_address] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":1469:1486  StakeWhitelistMap */\n      0x04\n        /* \"contracts/worksystems/StakingManager.sol\":1469:1496  StakeWhitelistMap[_address] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":1346:1504  function isStakeWhitelisted(address _address)\r... */\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":8791:9054  function isStakeholder(address _address)\r... */\n    tag_95:\n        /* \"contracts/worksystems/StakingManager.sol\":8879:8883  bool */\n      0x00\n      dup1\n        /* \"contracts/worksystems/StakingManager.sol\":8901:9024  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n    tag_253:\n        /* \"contracts/worksystems/StakingManager.sol\":8925:8937  stakeholders */\n      0x02\n        /* \"contracts/worksystems/StakingManager.sol\":8925:8944  stakeholders.length */\n      sload\n        /* \"contracts/worksystems/StakingManager.sol\":8921:8944  s < stakeholders.length */\n      dup2\n      lt\n        /* \"contracts/worksystems/StakingManager.sol\":8901:9024  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      iszero\n      tag_254\n      jumpi\n        /* \"contracts/worksystems/StakingManager.sol\":8984:8996  stakeholders */\n      0x02\n        /* \"contracts/worksystems/StakingManager.sol\":8997:8998  s */\n      dup2\n        /* \"contracts/worksystems/StakingManager.sol\":8984:8999  stakeholders[s] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_256\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_256:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":8972:8999  _address == stakeholders[s] */\n      dup5\n      dup2\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":8984:8999  stakeholders[s] */\n      swap2\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":8972:8999  _address == stakeholders[s] */\n      eq\n        /* \"contracts/worksystems/StakingManager.sol\":8968:9012  if (_address == stakeholders[s]) return true */\n      iszero\n      tag_258\n      jumpi\n        /* \"contracts/worksystems/StakingManager.sol\":9008:9012  true */\n      0x01\n        /* \"contracts/worksystems/StakingManager.sol\":9001:9012  return true */\n      swap2\n      pop\n      pop\n      jump(tag_250)\n        /* \"contracts/worksystems/StakingManager.sol\":8968:9012  if (_address == stakeholders[s]) return true */\n    tag_258:\n        /* \"contracts/worksystems/StakingManager.sol\":8946:8952  s += 1 */\n      tag_259\n        /* \"contracts/worksystems/StakingManager.sol\":8951:8952  1 */\n      0x01\n        /* \"contracts/worksystems/StakingManager.sol\":8946:8952  s += 1 */\n      dup3\n      tag_144\n      jump\t// in\n    tag_259:\n      swap1\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":8901:9024  for (uint256 s = 0; s < stakeholders.length; s += 1){\r... */\n      jump(tag_253)\n    tag_254:\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":9041:9046  false */\n      0x00\n      swap3\n        /* \"contracts/worksystems/StakingManager.sol\":8791:9054  function isStakeholder(address _address)\r... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/worksystems/StakingManager.sol\":5927:6109  function AllocatedStakedAmountOf(address _stakeholder)\r... */\n    tag_99:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/worksystems/StakingManager.sol\":6061:6083  balances[_stakeholder] */\n      and\n        /* \"contracts/worksystems/StakingManager.sol\":6029:6036  uint256 */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":6061:6083  balances[_stakeholder] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/worksystems/StakingManager.sol\":6061:6069  balances */\n      0x03\n        /* \"contracts/worksystems/StakingManager.sol\":6061:6083  balances[_stakeholder] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/worksystems/StakingManager.sol\":6061:6101  balances[_stakeholder].allocated_balance */\n      0x02\n      add\n      sload\n      swap1\n        /* \"contracts/worksystems/StakingManager.sol\":5927:6109  function AllocatedStakedAmountOf(address _stakeholder)\r... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_103:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_262\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_176\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_262:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_263\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_74\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_263:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_264\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_180\n      jump\t// in\n    tag_264:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_267\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_111\n      swap1\n      tag_269\n      jump\t// in\n    tag_267:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_241\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2099  _transferOwnership */\n      tag_206\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":523:542  IERC20 public token */\n    tag_105:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3108:3204  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_121:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3166:3173  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3192:3197  a - b */\n      tag_272\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3196:3197  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3192:3193  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3192:3197  a - b */\n      tag_173\n      jump\t// in\n    tag_272:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3185:3197  return a - b */\n      swap4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3108:3204  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2741:2837  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_123:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2799:2806  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2825:2830  a + b */\n      tag_272\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2829:2830  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2825:2826  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2825:2830  a + b */\n      tag_144\n      jump\t// in\n        /* \"contracts/worksystems/StakingManager.sol\":9177:9384  function addStakeholder(address _stakeholder)\r... */\n    tag_149:\n        /* \"contracts/worksystems/StakingManager.sol\":9257:9276  bool _isStakeholder */\n      0x00\n        /* \"contracts/worksystems/StakingManager.sol\":9282:9314  isStakeholderIndex(_stakeholder) */\n      tag_276\n        /* \"contracts/worksystems/StakingManager.sol\":9301:9313  _stakeholder */\n      dup3\n        /* \"contracts/worksystems/StakingManager.sol\":9282:9300  isStakeholderIndex */\n      tag_82\n        /* \"contracts/worksystems/StakingManager.sol\":9282:9314  isStakeholderIndex(_stakeholder) */\n      jump\t// in\n    tag_276:\n        /* \"contracts/worksystems/StakingManager.sol\":9256:9314  (bool _isStakeholder, ) = isStakeholderIndex(_stakeholder) */\n      pop\n      swap1\n      pop\n        /* \"contracts/worksystems/StakingManager.sol\":9329:9343  _isStakeholder */\n      dup1\n        /* \"contracts/worksystems/StakingManager.sol\":9325:9376  if(!_isStakeholder) stakeholders.push(_stakeholder) */\n      tag_277\n      jumpi\n        /* \"contracts/worksystems/StakingManager.sol\":9345:9357  stakeholders */\n      0x02\n        /* \"contracts/worksystems/StakingManager.sol\":9345:9376  stakeholders.push(_stakeholder) */\n      dup1\n      sload\n      0x01\n      dup2\n      add\n      dup3\n      sstore\n      0x00\n      swap2\n      swap1\n      swap2\n      mstore\n      0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace\n      add\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      and\n      or\n      swap1\n      sstore\n        /* \"contracts/worksystems/StakingManager.sol\":9325:9376  if(!_isStakeholder) stakeholders.push(_stakeholder) */\n    tag_277:\n        /* \"contracts/worksystems/StakingManager.sol\":9177:9384  function addStakeholder(address _stakeholder)\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_176:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_206:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:189   */\n    tag_282:\n        /* \"#utility.yul\":84:104   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":133:164   */\n      dup2\n      and\n        /* \"#utility.yul\":123:165   */\n      dup2\n      eq\n        /* \"#utility.yul\":113:115   */\n      tag_250\n      jumpi\n        /* \"#utility.yul\":179:180   */\n      0x00\n        /* \"#utility.yul\":176:177   */\n      dup1\n        /* \"#utility.yul\":169:181   */\n      revert\n        /* \"#utility.yul\":194:392   */\n    tag_51:\n      0x00\n        /* \"#utility.yul\":306:308   */\n      0x20\n        /* \"#utility.yul\":294:303   */\n      dup3\n        /* \"#utility.yul\":285:292   */\n      dup5\n        /* \"#utility.yul\":281:304   */\n      sub\n        /* \"#utility.yul\":277:309   */\n      slt\n        /* \"#utility.yul\":274:276   */\n      iszero\n      tag_286\n      jumpi\n        /* \"#utility.yul\":327:333   */\n      dup1\n        /* \"#utility.yul\":319:325   */\n      dup2\n        /* \"#utility.yul\":312:334   */\n      revert\n        /* \"#utility.yul\":274:276   */\n    tag_286:\n        /* \"#utility.yul\":355:386   */\n      tag_272\n        /* \"#utility.yul\":376:385   */\n      dup3\n        /* \"#utility.yul\":355:386   */\n      tag_282\n      jump\t// in\n        /* \"#utility.yul\":397:694   */\n    tag_170:\n      0x00\n        /* \"#utility.yul\":517:519   */\n      0x20\n        /* \"#utility.yul\":505:514   */\n      dup3\n        /* \"#utility.yul\":496:503   */\n      dup5\n        /* \"#utility.yul\":492:515   */\n      sub\n        /* \"#utility.yul\":488:520   */\n      slt\n        /* \"#utility.yul\":485:487   */\n      iszero\n      tag_289\n      jumpi\n        /* \"#utility.yul\":538:544   */\n      dup1\n        /* \"#utility.yul\":530:536   */\n      dup2\n        /* \"#utility.yul\":523:545   */\n      revert\n        /* \"#utility.yul\":485:487   */\n    tag_289:\n        /* \"#utility.yul\":575:584   */\n      dup2\n        /* \"#utility.yul\":569:585   */\n      mload\n        /* \"#utility.yul\":628:633   */\n      dup1\n        /* \"#utility.yul\":621:634   */\n      iszero\n        /* \"#utility.yul\":614:635   */\n      iszero\n        /* \"#utility.yul\":607:612   */\n      dup2\n        /* \"#utility.yul\":604:636   */\n      eq\n        /* \"#utility.yul\":594:596   */\n      tag_272\n      jumpi\n        /* \"#utility.yul\":655:661   */\n      dup2\n        /* \"#utility.yul\":647:653   */\n      dup3\n        /* \"#utility.yul\":640:662   */\n      revert\n        /* \"#utility.yul\":699:889   */\n    tag_44:\n      0x00\n        /* \"#utility.yul\":811:813   */\n      0x20\n        /* \"#utility.yul\":799:808   */\n      dup3\n        /* \"#utility.yul\":790:797   */\n      dup5\n        /* \"#utility.yul\":786:809   */\n      sub\n        /* \"#utility.yul\":782:814   */\n      slt\n        /* \"#utility.yul\":779:781   */\n      iszero\n      tag_292\n      jumpi\n        /* \"#utility.yul\":832:838   */\n      dup1\n        /* \"#utility.yul\":824:830   */\n      dup2\n        /* \"#utility.yul\":817:839   */\n      revert\n        /* \"#utility.yul\":779:781   */\n    tag_292:\n      pop\n        /* \"#utility.yul\":860:883   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":769:889   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":894:1088   */\n    tag_230:\n      0x00\n        /* \"#utility.yul\":1017:1019   */\n      0x20\n        /* \"#utility.yul\":1005:1014   */\n      dup3\n        /* \"#utility.yul\":996:1003   */\n      dup5\n        /* \"#utility.yul\":992:1015   */\n      sub\n        /* \"#utility.yul\":988:1020   */\n      slt\n        /* \"#utility.yul\":985:987   */\n      iszero\n      tag_294\n      jumpi\n        /* \"#utility.yul\":1038:1044   */\n      dup1\n        /* \"#utility.yul\":1030:1036   */\n      dup2\n        /* \"#utility.yul\":1023:1045   */\n      revert\n        /* \"#utility.yul\":985:987   */\n    tag_294:\n      pop\n        /* \"#utility.yul\":1066:1082   */\n      mload\n      swap2\n        /* \"#utility.yul\":975:1088   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1093:1359   */\n    tag_30:\n      0x00\n      dup1\n        /* \"#utility.yul\":1222:1224   */\n      0x40\n        /* \"#utility.yul\":1210:1219   */\n      dup4\n        /* \"#utility.yul\":1201:1208   */\n      dup6\n        /* \"#utility.yul\":1197:1220   */\n      sub\n        /* \"#utility.yul\":1193:1225   */\n      slt\n        /* \"#utility.yul\":1190:1192   */\n      iszero\n      tag_296\n      jumpi\n        /* \"#utility.yul\":1243:1249   */\n      dup1\n        /* \"#utility.yul\":1235:1241   */\n      dup2\n        /* \"#utility.yul\":1228:1250   */\n      revert\n        /* \"#utility.yul\":1190:1192   */\n    tag_296:\n        /* \"#utility.yul\":1284:1293   */\n      dup3\n        /* \"#utility.yul\":1271:1294   */\n      calldataload\n        /* \"#utility.yul\":1261:1294   */\n      swap2\n      pop\n        /* \"#utility.yul\":1313:1353   */\n      tag_297\n        /* \"#utility.yul\":1349:1351   */\n      0x20\n        /* \"#utility.yul\":1338:1347   */\n      dup5\n        /* \"#utility.yul\":1334:1352   */\n      add\n        /* \"#utility.yul\":1313:1353   */\n      tag_282\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":1303:1353   */\n      swap1\n      pop\n        /* \"#utility.yul\":1180:1359   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1364:1567   */\n    tag_76:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1528:1560   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1510:1561   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1498:1500   */\n      0x20\n        /* \"#utility.yul\":1483:1501   */\n      add\n      swap1\n        /* \"#utility.yul\":1465:1567   */\n      jump\t// out\n        /* \"#utility.yul\":1572:1947   */\n    tag_236:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1830:1845   */\n      swap4\n      dup5\n      and\n        /* \"#utility.yul\":1812:1846   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1882:1897   */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":1877:1879   */\n      0x20\n        /* \"#utility.yul\":1862:1880   */\n      dup3\n      add\n        /* \"#utility.yul\":1855:1898   */\n      mstore\n        /* \"#utility.yul\":1929:1931   */\n      0x40\n        /* \"#utility.yul\":1914:1932   */\n      dup2\n      add\n        /* \"#utility.yul\":1907:1941   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":1762:1764   */\n      0x60\n        /* \"#utility.yul\":1747:1765   */\n      add\n      swap1\n        /* \"#utility.yul\":1729:1947   */\n      jump\t// out\n        /* \"#utility.yul\":1952:2226   */\n    tag_165:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2144:2176   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":2126:2177   */\n      dup3\n      mstore\n        /* \"#utility.yul\":2208:2210   */\n      0x20\n        /* \"#utility.yul\":2193:2211   */\n      dup3\n      add\n        /* \"#utility.yul\":2186:2220   */\n      mstore\n        /* \"#utility.yul\":2114:2116   */\n      0x40\n        /* \"#utility.yul\":2099:2117   */\n      add\n      swap1\n        /* \"#utility.yul\":2081:2226   */\n      jump\t// out\n        /* \"#utility.yul\":2231:2418   */\n    tag_33:\n        /* \"#utility.yul\":2396:2410   */\n      swap1\n      iszero\n        /* \"#utility.yul\":2389:2411   */\n      iszero\n        /* \"#utility.yul\":2371:2412   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2359:2361   */\n      0x20\n        /* \"#utility.yul\":2344:2362   */\n      add\n      swap1\n        /* \"#utility.yul\":2326:2418   */\n      jump\t// out\n        /* \"#utility.yul\":2423:2681   */\n    tag_84:\n        /* \"#utility.yul\":2616:2630   */\n      swap2\n      iszero\n        /* \"#utility.yul\":2609:2631   */\n      iszero\n        /* \"#utility.yul\":2591:2632   */\n      dup3\n      mstore\n        /* \"#utility.yul\":2663:2665   */\n      0x20\n        /* \"#utility.yul\":2648:2666   */\n      dup3\n      add\n        /* \"#utility.yul\":2641:2675   */\n      mstore\n        /* \"#utility.yul\":2579:2581   */\n      0x40\n        /* \"#utility.yul\":2564:2582   */\n      add\n      swap1\n        /* \"#utility.yul\":2546:2681   */\n      jump\t// out\n        /* \"#utility.yul\":2908:3318   */\n    tag_133:\n        /* \"#utility.yul\":3110:3112   */\n      0x20\n        /* \"#utility.yul\":3092:3113   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3149:3151   */\n      0x2e\n        /* \"#utility.yul\":3129:3147   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3122:3152   */\n      mstore\n        /* \"#utility.yul\":3188:3222   */\n      0x5f7374616b65686f6c6465722068617320746f206861766520656e6f75676820\n        /* \"#utility.yul\":3183:3185   */\n      0x40\n        /* \"#utility.yul\":3168:3186   */\n      dup3\n      add\n        /* \"#utility.yul\":3161:3223   */\n      mstore\n      shl(0x90, 0x7374616b65642062616c616e6365)\n        /* \"#utility.yul\":3254:3256   */\n      0x60\n        /* \"#utility.yul\":3239:3257   */\n      dup3\n      add\n        /* \"#utility.yul\":3232:3276   */\n      mstore\n        /* \"#utility.yul\":3308:3311   */\n      0x80\n        /* \"#utility.yul\":3293:3312   */\n      add\n      swap1\n        /* \"#utility.yul\":3082:3318   */\n      jump\t// out\n        /* \"#utility.yul\":3323:3725   */\n    tag_269:\n        /* \"#utility.yul\":3525:3527   */\n      0x20\n        /* \"#utility.yul\":3507:3528   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3564:3566   */\n      0x26\n        /* \"#utility.yul\":3544:3562   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3537:3567   */\n      mstore\n        /* \"#utility.yul\":3603:3637   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":3598:3600   */\n      0x40\n        /* \"#utility.yul\":3583:3601   */\n      dup3\n      add\n        /* \"#utility.yul\":3576:3638   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":3669:3671   */\n      0x60\n        /* \"#utility.yul\":3654:3672   */\n      dup3\n      add\n        /* \"#utility.yul\":3647:3683   */\n      mstore\n        /* \"#utility.yul\":3715:3718   */\n      0x80\n        /* \"#utility.yul\":3700:3719   */\n      add\n      swap1\n        /* \"#utility.yul\":3497:3725   */\n      jump\t// out\n        /* \"#utility.yul\":3730:4136   */\n    tag_112:\n        /* \"#utility.yul\":3932:3934   */\n      0x20\n        /* \"#utility.yul\":3914:3935   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3971:3973   */\n      0x2a\n        /* \"#utility.yul\":3951:3969   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3944:3974   */\n      mstore\n        /* \"#utility.yul\":4010:4044   */\n      0x69735374616b6557686974656c6973746564206d757374206265207472756520\n        /* \"#utility.yul\":4005:4007   */\n      0x40\n        /* \"#utility.yul\":3990:4008   */\n      dup3\n      add\n        /* \"#utility.yul\":3983:4045   */\n      mstore\n      shl(0xb1, 0x3337b91029b2b73232b9)\n        /* \"#utility.yul\":4076:4078   */\n      0x60\n        /* \"#utility.yul\":4061:4079   */\n      dup3\n      add\n        /* \"#utility.yul\":4054:4094   */\n      mstore\n        /* \"#utility.yul\":4126:4129   */\n      0x80\n        /* \"#utility.yul\":4111:4130   */\n      add\n      swap1\n        /* \"#utility.yul\":3904:4136   */\n      jump\t// out\n        /* \"#utility.yul\":4141:4554   */\n    tag_119:\n        /* \"#utility.yul\":4343:4345   */\n      0x20\n        /* \"#utility.yul\":4325:4346   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4382:4384   */\n      0x31\n        /* \"#utility.yul\":4362:4380   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4355:4385   */\n      mstore\n        /* \"#utility.yul\":4421:4455   */\n      0x5f7374616b65686f6c6465722068617320746f206861766520656e6f75676820\n        /* \"#utility.yul\":4416:4418   */\n      0x40\n        /* \"#utility.yul\":4401:4419   */\n      dup3\n      add\n        /* \"#utility.yul\":4394:4456   */\n      mstore\n      shl(0x78, 0x616c6c6f63617465642062616c616e6365)\n        /* \"#utility.yul\":4487:4489   */\n      0x60\n        /* \"#utility.yul\":4472:4490   */\n      dup3\n      add\n        /* \"#utility.yul\":4465:4512   */\n      mstore\n        /* \"#utility.yul\":4544:4547   */\n      0x80\n        /* \"#utility.yul\":4529:4548   */\n      add\n      swap1\n        /* \"#utility.yul\":4315:4554   */\n      jump\t// out\n        /* \"#utility.yul\":4559:4958   */\n    tag_194:\n        /* \"#utility.yul\":4761:4763   */\n      0x20\n        /* \"#utility.yul\":4743:4764   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4800:4802   */\n      0x23\n        /* \"#utility.yul\":4780:4798   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4773:4803   */\n      mstore\n        /* \"#utility.yul\":4839:4873   */\n      0x41646472657373206d7573742062652077686974656c697374656420616c7265\n        /* \"#utility.yul\":4834:4836   */\n      0x40\n        /* \"#utility.yul\":4819:4837   */\n      dup3\n      add\n        /* \"#utility.yul\":4812:4874   */\n      mstore\n      shl(0xe8, 0x616479)\n        /* \"#utility.yul\":4905:4907   */\n      0x60\n        /* \"#utility.yul\":4890:4908   */\n      dup3\n      add\n        /* \"#utility.yul\":4883:4916   */\n      mstore\n        /* \"#utility.yul\":4948:4951   */\n      0x80\n        /* \"#utility.yul\":4933:4952   */\n      add\n      swap1\n        /* \"#utility.yul\":4733:4958   */\n      jump\t// out\n        /* \"#utility.yul\":4963:5319   */\n    tag_180:\n        /* \"#utility.yul\":5165:5167   */\n      0x20\n        /* \"#utility.yul\":5147:5168   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5184:5202   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":5177:5207   */\n      mstore\n        /* \"#utility.yul\":5243:5277   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":5238:5240   */\n      0x40\n        /* \"#utility.yul\":5223:5241   */\n      dup3\n      add\n        /* \"#utility.yul\":5216:5278   */\n      mstore\n        /* \"#utility.yul\":5310:5312   */\n      0x60\n        /* \"#utility.yul\":5295:5313   */\n      add\n      swap1\n        /* \"#utility.yul\":5137:5319   */\n      jump\t// out\n        /* \"#utility.yul\":5324:5725   */\n    tag_116:\n        /* \"#utility.yul\":5526:5528   */\n      0x20\n        /* \"#utility.yul\":5508:5529   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5565:5567   */\n      0x25\n        /* \"#utility.yul\":5545:5563   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5538:5568   */\n      mstore\n        /* \"#utility.yul\":5604:5638   */\n      0x69735374616b65686f6c646572206d757374206265207472756520666f722053\n        /* \"#utility.yul\":5599:5601   */\n      0x40\n        /* \"#utility.yul\":5584:5602   */\n      dup3\n      add\n        /* \"#utility.yul\":5577:5639   */\n      mstore\n      shl(0xd9, 0x32b73232b9)\n        /* \"#utility.yul\":5670:5672   */\n      0x60\n        /* \"#utility.yul\":5655:5673   */\n      dup3\n      add\n        /* \"#utility.yul\":5648:5683   */\n      mstore\n        /* \"#utility.yul\":5715:5718   */\n      0x80\n        /* \"#utility.yul\":5700:5719   */\n      add\n      swap1\n        /* \"#utility.yul\":5498:5725   */\n      jump\t// out\n        /* \"#utility.yul\":5730:6133   */\n    tag_184:\n        /* \"#utility.yul\":5932:5934   */\n      0x20\n        /* \"#utility.yul\":5914:5935   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5971:5973   */\n      0x27\n        /* \"#utility.yul\":5951:5969   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5944:5974   */\n      mstore\n        /* \"#utility.yul\":6010:6044   */\n      0x41646472657373206d757374206e6f742062652077686974656c697374656420\n        /* \"#utility.yul\":6005:6007   */\n      0x40\n        /* \"#utility.yul\":5990:6008   */\n      dup3\n      add\n        /* \"#utility.yul\":5983:6045   */\n      mstore\n      shl(0xc8, 0x616c7265616479)\n        /* \"#utility.yul\":6076:6078   */\n      0x60\n        /* \"#utility.yul\":6061:6079   */\n      dup3\n      add\n        /* \"#utility.yul\":6054:6091   */\n      mstore\n        /* \"#utility.yul\":6123:6126   */\n      0x80\n        /* \"#utility.yul\":6108:6127   */\n      add\n      swap1\n        /* \"#utility.yul\":5904:6133   */\n      jump\t// out\n        /* \"#utility.yul\":6138:6490   */\n    tag_233:\n        /* \"#utility.yul\":6340:6342   */\n      0x20\n        /* \"#utility.yul\":6322:6343   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6379:6381   */\n      0x1c\n        /* \"#utility.yul\":6359:6377   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6352:6382   */\n      mstore\n        /* \"#utility.yul\":6418:6448   */\n      0x6e6f7420656e6f75676820746f6b656e7320746f206465706f73697400000000\n        /* \"#utility.yul\":6413:6415   */\n      0x40\n        /* \"#utility.yul\":6398:6416   */\n      dup3\n      add\n        /* \"#utility.yul\":6391:6449   */\n      mstore\n        /* \"#utility.yul\":6481:6483   */\n      0x60\n        /* \"#utility.yul\":6466:6484   */\n      add\n      swap1\n        /* \"#utility.yul\":6312:6490   */\n      jump\t// out\n        /* \"#utility.yul\":6495:6915   */\n    tag_163:\n        /* \"#utility.yul\":6697:6699   */\n      0x20\n        /* \"#utility.yul\":6679:6700   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6736:6738   */\n      0x38\n        /* \"#utility.yul\":6716:6734   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6709:6739   */\n      mstore\n        /* \"#utility.yul\":6775:6809   */\n      0x6e6f7420656e6f75676820746f6b656e7320696e207468652066726565207374\n        /* \"#utility.yul\":6770:6772   */\n      0x40\n        /* \"#utility.yul\":6755:6773   */\n      dup3\n      add\n        /* \"#utility.yul\":6748:6810   */\n      mstore\n        /* \"#utility.yul\":6846:6872   */\n      0x616b65642062616c616e636520746f2077697468647261770000000000000000\n        /* \"#utility.yul\":6841:6843   */\n      0x60\n        /* \"#utility.yul\":6826:6844   */\n      dup3\n      add\n        /* \"#utility.yul\":6819:6873   */\n      mstore\n        /* \"#utility.yul\":6905:6908   */\n      0x80\n        /* \"#utility.yul\":6890:6909   */\n      add\n      swap1\n        /* \"#utility.yul\":6669:6915   */\n      jump\t// out\n        /* \"#utility.yul\":6920:7097   */\n    tag_41:\n        /* \"#utility.yul\":7066:7091   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":7054:7056   */\n      0x20\n        /* \"#utility.yul\":7039:7057   */\n      add\n      swap1\n        /* \"#utility.yul\":7021:7097   */\n      jump\t// out\n        /* \"#utility.yul\":7102:7421   */\n    tag_54:\n        /* \"#utility.yul\":7304:7329   */\n      swap3\n      dup4\n      mstore\n        /* \"#utility.yul\":7360:7362   */\n      0x20\n        /* \"#utility.yul\":7345:7363   */\n      dup4\n      add\n        /* \"#utility.yul\":7338:7372   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":7403:7405   */\n      0x40\n        /* \"#utility.yul\":7388:7406   */\n      dup3\n      add\n        /* \"#utility.yul\":7381:7415   */\n      mstore\n        /* \"#utility.yul\":7292:7294   */\n      0x60\n        /* \"#utility.yul\":7277:7295   */\n      add\n      swap1\n        /* \"#utility.yul\":7259:7421   */\n      jump\t// out\n        /* \"#utility.yul\":7426:7554   */\n    tag_144:\n      0x00\n        /* \"#utility.yul\":7497:7498   */\n      dup3\n        /* \"#utility.yul\":7493:7499   */\n      not\n        /* \"#utility.yul\":7490:7491   */\n      dup3\n        /* \"#utility.yul\":7487:7500   */\n      gt\n        /* \"#utility.yul\":7484:7486   */\n      iszero\n      tag_318\n      jumpi\n        /* \"#utility.yul\":7503:7521   */\n      tag_318\n      tag_319\n      jump\t// in\n    tag_318:\n      pop\n        /* \"#utility.yul\":7539:7548   */\n      add\n      swap1\n        /* \"#utility.yul\":7474:7554   */\n      jump\t// out\n        /* \"#utility.yul\":7559:7684   */\n    tag_173:\n      0x00\n        /* \"#utility.yul\":7627:7628   */\n      dup3\n        /* \"#utility.yul\":7624:7625   */\n      dup3\n        /* \"#utility.yul\":7621:7629   */\n      lt\n        /* \"#utility.yul\":7618:7620   */\n      iszero\n      tag_322\n      jumpi\n        /* \"#utility.yul\":7632:7650   */\n      tag_322\n      tag_319\n      jump\t// in\n    tag_322:\n      pop\n        /* \"#utility.yul\":7669:7678   */\n      sub\n      swap1\n        /* \"#utility.yul\":7608:7684   */\n      jump\t// out\n        /* \"#utility.yul\":7689:7816   */\n    tag_319:\n        /* \"#utility.yul\":7750:7760   */\n      0x4e487b71\n        /* \"#utility.yul\":7745:7748   */\n      0xe0\n        /* \"#utility.yul\":7741:7761   */\n      shl\n        /* \"#utility.yul\":7738:7739   */\n      0x00\n        /* \"#utility.yul\":7731:7762   */\n      mstore\n        /* \"#utility.yul\":7781:7785   */\n      0x11\n        /* \"#utility.yul\":7778:7779   */\n      0x04\n        /* \"#utility.yul\":7771:7786   */\n      mstore\n        /* \"#utility.yul\":7805:7809   */\n      0x24\n        /* \"#utility.yul\":7802:7803   */\n      0x00\n        /* \"#utility.yul\":7795:7810   */\n      revert\n\n    auxdata: 0xa2646970667358221220e150a3989e6754ce22286b43b8aebd1f4b52d30a11ba85e6a71d5a9321c7151464736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:326:5",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:5",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:229:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:26:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "150:6:5"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "158:6:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:22:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:22:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:5"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:5"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:5"
															},
															"nodeType": "YulIf",
															"src": "105:2:5"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "176:29:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "195:9:5"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "189:5:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "189:16:5"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "180:5:5",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "268:26:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "277:6:5"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "285:6:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "270:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "270:22:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "270:22:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "227:5:5"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "238:5:5"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "253:3:5",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "258:1:5",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "249:3:5"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "249:11:5"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "262:1:5",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "245:3:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "245:19:5"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:31:5"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "224:2:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "224:42:5"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "217:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "217:50:5"
															},
															"nodeType": "YulIf",
															"src": "214:2:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "303:15:5",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "313:5:5"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "303:6:5"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:5",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:5",
														"type": ""
													}
												],
												"src": "14:310:5"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n}",
									"id": 5,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1460 CODESIZE SUB DUP1 PUSH2 0x1460 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0xB8 JUMP JUMPDEST PUSH2 0x3F PUSH2 0x3A PUSH2 0x64 JUMP JUMPDEST PUSH2 0x68 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xE6 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDF JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x136B DUP1 PUSH2 0xF5 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x853828B6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xCBDCE4E0 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xCBDCE4E0 EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xE67719BD EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0xEF037B90 EQ PUSH2 0x29F JUMPI DUP1 PUSH4 0xF20E8B12 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x2D8 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x853828B6 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x8AED0FEB EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0xBD0BB4F6 EQ PUSH2 0x258 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x27E235E3 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x38EADA1C EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x4BA79DFE EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x6A40CBB6 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x218 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x112B3266 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x12B6887C EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x14BEE5A5 EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x227A473B EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x23CC9F37 EQ PUSH2 0x1AD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0xF73 JUMP JUMPDEST PUSH2 0x2E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP2 SWAP1 PUSH2 0xFEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0xF73 JUMP JUMPDEST PUSH2 0x3ED JUMP JUMPDEST PUSH2 0x18B PUSH2 0x4ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x12D1 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1A6 CALLDATASIZE PUSH1 0x4 PUSH2 0xF43 JUMP JUMPDEST PUSH2 0x572 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18B PUSH2 0x5FE JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x67D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12DA JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0xF43 JUMP JUMPDEST PUSH2 0x69E JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1F8 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x781 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x20B CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x85E JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x922 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x962 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x18B PUSH2 0xA74 JUMP JUMPDEST PUSH2 0x238 PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP2 SWAP1 PUSH2 0xF9E JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0xF43 JUMP JUMPDEST PUSH2 0xAFF JUMP JUMPDEST PUSH2 0x26B PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xC53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP3 SWAP2 SWAP1 PUSH2 0xFFA JUMP JUMPDEST PUSH2 0x18B PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xCCE JUMP JUMPDEST PUSH2 0x15A PUSH2 0x29A CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xCF0 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2AD CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xD0E JUMP JUMPDEST PUSH2 0x18B PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xD81 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xD9F JUMP JUMPDEST PUSH2 0x238 PUSH2 0xE0D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EB CALLER PUSH2 0xCF0 JUMP JUMPDEST PUSH2 0x310 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x109E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x319 DUP3 PUSH2 0xD0E JUMP JUMPDEST PUSH2 0x335 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x11B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP4 GT ISZERO PUSH2 0x370 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x10E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x396 SWAP1 DUP5 PUSH2 0xE1C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 ADD SLOAD PUSH2 0x3C4 SWAP1 DUP5 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F8 CALLER PUSH2 0xCF0 JUMP JUMPDEST PUSH2 0x414 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x109E JUMP JUMPDEST PUSH2 0x41D DUP3 PUSH2 0xD0E JUMP JUMPDEST PUSH2 0x439 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x11B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP4 GT ISZERO PUSH2 0x474 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x100A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x49A SWAP1 DUP5 PUSH2 0xE1C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD SLOAD PUSH2 0x4C8 SWAP1 DUP5 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SSTORE POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x51F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x554 DUP5 DUP3 PUSH2 0xE2F JUMP JUMPDEST SWAP4 POP POP POP PUSH1 0x1 DUP2 PUSH2 0x565 SWAP2 SWAP1 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 POP PUSH2 0x4F2 JUMP JUMPDEST POP SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x58E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x5AE JUMPI PUSH2 0x5AE CALLER PUSH2 0xE3B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x5C8 SWAP1 DUP3 PUSH2 0xE1C JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP2 SSTORE PUSH1 0x1 ADD SLOAD PUSH2 0x5E8 SWAP1 DUP3 PUSH2 0xE2F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x630 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x665 DUP5 DUP3 PUSH2 0xE2F JUMP JUMPDEST SWAP4 POP POP POP PUSH1 0x1 DUP2 PUSH2 0x676 SWAP2 SWAP1 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 POP PUSH2 0x603 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x6CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x1274 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x6FF SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xFD6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x719 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x72D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x751 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0x75A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x779 SWAP1 DUP5 SWAP1 PUSH2 0x1308 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x789 PUSH2 0xE9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x79A PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x117C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0x7FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x34E57D3E15D2174A31AED19B5A635AAD3C7FD6D6FF6B19D43F56819654E990FD SWAP2 PUSH2 0x853 SWAP2 PUSH2 0xFEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x866 PUSH2 0xE9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x877 PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x89D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x117C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x8D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x1139 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0xC87598B69899C8B872E8B5E416808D7332FE62ED4F035F7E72AE6F646E12F73F SWAP2 PUSH2 0x853 SWAP2 PUSH2 0xFEF JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0x942 SWAP1 DUP3 PUSH2 0xE2F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP2 SSTORE PUSH1 0x1 ADD SLOAD PUSH2 0x5E8 SWAP1 DUP3 PUSH2 0xE1C JUMP JUMPDEST PUSH2 0x96A PUSH2 0xE9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x97B PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x117C JUMP JUMPDEST PUSH2 0x9AB PUSH1 0x0 PUSH2 0xEA2 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x9C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xA07 SWAP3 SWAP1 SWAP2 PUSH1 0x4 ADD PUSH2 0xFD6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA35 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0xA62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xAA6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0xAD8 DUP5 DUP3 PUSH2 0xE2F JUMP JUMPDEST SWAP4 POP POP POP PUSH1 0x1 DUP2 PUSH2 0xAE9 SWAP2 SWAP1 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 POP PUSH2 0xA79 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xB2F SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0xF9E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB5B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB7F SWAP2 SWAP1 PUSH2 0xF5B JUMP JUMPDEST LT ISZERO PUSH2 0xB9D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x123D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xBBC SWAP1 DUP5 SWAP1 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0xBF5 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xFB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC23 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC47 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0xC50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0xCC0 JUMPI PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xC84 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xCAE JUMPI PUSH1 0x1 SWAP3 POP SWAP1 POP PUSH2 0xCC9 JUMP JUMPDEST PUSH2 0xCB9 PUSH1 0x1 DUP3 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 POP PUSH2 0xC59 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0xD78 JUMPI PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xD3D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xD66 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0xCEB JUMP JUMPDEST PUSH2 0xD71 PUSH1 0x1 DUP3 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 POP PUSH2 0xD12 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xDA7 PUSH2 0xE9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDB8 PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDDE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x117C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x1058 JUMP JUMPDEST PUSH2 0xC50 DUP2 PUSH2 0xEA2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE28 DUP3 DUP5 PUSH2 0x1308 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE28 DUP3 DUP5 PUSH2 0x12F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE46 DUP3 PUSH2 0xC53 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0xE9A JUMPI PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xCEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xE28 DUP3 PUSH2 0xEF2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF34 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE28 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF54 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF6C JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF85 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xF95 PUSH1 0x20 DUP5 ADD PUSH2 0xEF2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x5F7374616B65686F6C6465722068617320746F206861766520656E6F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x7374616B65642062616C616E6365 PUSH1 0x90 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x69735374616B6557686974656C6973746564206D757374206265207472756520 PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x3337B91029B2B73232B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F7374616B65686F6C6465722068617320746F206861766520656E6F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x616C6C6F63617465642062616C616E6365 PUSH1 0x78 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x41646472657373206D7573742062652077686974656C697374656420616C7265 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x616479 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x69735374616B65686F6C646572206D757374206265207472756520666F722053 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x32B73232B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x41646472657373206D757374206E6F742062652077686974656C697374656420 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x616C7265616479 PUSH1 0xC8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x6E6F7420656E6F75676820746F6B656E7320746F206465706F73697400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x6E6F7420656E6F75676820746F6B656E7320696E207468652066726565207374 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616B65642062616C616E636520746F2077697468647261770000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1303 JUMPI PUSH2 0x1303 PUSH2 0x131F JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x131A JUMPI PUSH2 0x131A PUSH2 0x131F JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 POP LOG3 SWAP9 SWAP15 PUSH8 0x54CE22286B43B8AE 0xBD 0x1F 0x4B MSTORE 0xD3 EXP GT 0xBA DUP6 0xE6 0xA7 SAR GAS SWAP4 0x21 0xC7 ISZERO EQ PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "423:10617:4:-:0;;;555:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;921:32:0;940:12;:10;:12::i;:::-;921:18;:32::i;:::-;617:5:4;:26;;-1:-1:-1;;;;;;617:26:4;-1:-1:-1;;;;;617:26:4;;;;;;;;;;423:10617;;640:96:2;719:10;640:96;:::o;2270:187:0:-;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2270:187;;:::o;14:310:5:-;;137:2;125:9;116:7;112:23;108:32;105:2;;;158:6;150;143:22;105:2;189:16;;-1:-1:-1;;;;;234:31:5;;224:42;;214:2;;285:6;277;270:22;214:2;313:5;95:229;-1:-1:-1;;;95:229:5:o;:::-;423:10617:4;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:7818:5",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:5",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "65:124:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75:29:5",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "97:6:5"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "84:12:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "84:20:5"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "75:5:5"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "167:16:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "176:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "179:1:5",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "169:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "169:12:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "169:12:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "126:5:5"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "137:5:5"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "152:3:5",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "157:1:5",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "148:3:5"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "148:11:5"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "161:1:5",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "144:3:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "144:19:5"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "133:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "133:31:5"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "123:2:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "123:42:5"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "116:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "116:50:5"
															},
															"nodeType": "YulIf",
															"src": "113:2:5"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "44:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "55:5:5",
														"type": ""
													}
												],
												"src": "14:175:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "264:128:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "310:26:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "319:6:5"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "327:6:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "312:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "312:22:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "312:22:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "285:7:5"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "294:9:5"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "281:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "281:23:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "306:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "277:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "277:32:5"
															},
															"nodeType": "YulIf",
															"src": "274:2:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "345:41:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "376:9:5"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "355:20:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "355:31:5"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:5"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "230:9:5",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "241:7:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "253:6:5",
														"type": ""
													}
												],
												"src": "194:198:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "475:219:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "521:26:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "530:6:5"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "538:6:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "523:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "523:22:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "523:22:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "496:7:5"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "505:9:5"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "492:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "492:23:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "517:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "488:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "488:32:5"
															},
															"nodeType": "YulIf",
															"src": "485:2:5"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "556:29:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "575:9:5"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "569:5:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "569:16:5"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "560:5:5",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "638:26:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "647:6:5"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "655:6:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "640:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "640:22:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "640:22:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "607:5:5"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "628:5:5"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "621:6:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "621:13:5"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "614:6:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "614:21:5"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "604:2:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "604:32:5"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "597:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "597:40:5"
															},
															"nodeType": "YulIf",
															"src": "594:2:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "673:15:5",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "683:5:5"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "673:6:5"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "441:9:5",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "452:7:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "464:6:5",
														"type": ""
													}
												],
												"src": "397:297:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "769:120:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "815:26:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "824:6:5"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "832:6:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "817:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "817:22:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "817:22:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "790:7:5"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "799:9:5"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "786:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "786:23:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "811:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "782:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "782:32:5"
															},
															"nodeType": "YulIf",
															"src": "779:2:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "850:33:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "873:9:5"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "860:12:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "860:23:5"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "850:6:5"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "735:9:5",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "746:7:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "758:6:5",
														"type": ""
													}
												],
												"src": "699:190:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "975:113:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1021:26:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1030:6:5"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1038:6:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1023:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1023:22:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1023:22:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "996:7:5"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1005:9:5"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "992:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "992:23:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1017:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "988:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "988:32:5"
															},
															"nodeType": "YulIf",
															"src": "985:2:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1056:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1072:9:5"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1066:5:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1066:16:5"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1056:6:5"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "941:9:5",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "952:7:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "964:6:5",
														"type": ""
													}
												],
												"src": "894:194:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1180:179:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1226:26:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1235:6:5"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1243:6:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1228:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1228:22:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1228:22:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1201:7:5"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1210:9:5"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1197:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1197:23:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1222:2:5",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1193:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1193:32:5"
															},
															"nodeType": "YulIf",
															"src": "1190:2:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1261:33:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1284:9:5"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1271:12:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1271:23:5"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1261:6:5"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1303:50:5",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1338:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1349:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1334:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1334:18:5"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1313:20:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1313:40:5"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1303:6:5"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1138:9:5",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1149:7:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1161:6:5",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1169:6:5",
														"type": ""
													}
												],
												"src": "1093:266:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1465:102:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1475:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1487:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1498:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1483:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1483:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1475:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1517:9:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1532:6:5"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1548:3:5",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1553:1:5",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1544:3:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1544:11:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1557:1:5",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1540:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1540:19:5"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1528:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1528:32:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1510:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1510:51:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1510:51:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1434:9:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1445:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1456:4:5",
														"type": ""
													}
												],
												"src": "1364:203:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1729:218:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1739:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1751:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1762:2:5",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1747:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1747:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1739:4:5"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1774:29:5",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1792:3:5",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1797:1:5",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1788:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1788:11:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1801:1:5",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1784:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1784:19:5"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1778:2:5",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1819:9:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1834:6:5"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1842:2:5"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1830:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1830:15:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1812:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1812:34:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1812:34:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1866:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1877:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1862:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1862:18:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "1886:6:5"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1894:2:5"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1882:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1882:15:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1855:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1855:43:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1855:43:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1918:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1929:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1914:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1914:18:5"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "1934:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1907:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1907:34:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1907:34:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1682:9:5",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1693:6:5",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1701:6:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1709:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1720:4:5",
														"type": ""
													}
												],
												"src": "1572:375:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2081:145:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2091:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2103:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2114:2:5",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2099:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2099:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2091:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2133:9:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2148:6:5"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2164:3:5",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2169:1:5",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2160:3:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2160:11:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2173:1:5",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2156:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2156:19:5"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2144:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2144:32:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2126:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2126:51:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2126:51:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2197:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2208:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2193:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2193:18:5"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2213:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2186:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2186:34:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2186:34:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2042:9:5",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2053:6:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2061:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2072:4:5",
														"type": ""
													}
												],
												"src": "1952:274:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2326:92:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2336:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2348:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2359:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2344:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2344:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2336:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2378:9:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "2403:6:5"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2396:6:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2396:14:5"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2389:6:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2389:22:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2371:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2371:41:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2371:41:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2295:9:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2306:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2317:4:5",
														"type": ""
													}
												],
												"src": "2231:187:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2546:135:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2556:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2568:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2579:2:5",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2564:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2564:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2556:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2598:9:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "2623:6:5"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2616:6:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2616:14:5"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2609:6:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2609:22:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2591:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2591:41:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2591:41:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2652:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2663:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2648:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2648:18:5"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2668:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2641:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2641:34:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2641:34:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool_t_uint256__to_t_bool_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2507:9:5",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2518:6:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2526:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2537:4:5",
														"type": ""
													}
												],
												"src": "2423:258:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2801:102:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2811:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2823:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2834:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2819:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2819:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2811:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2853:9:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2868:6:5"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2884:3:5",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2889:1:5",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2880:3:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2880:11:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2893:1:5",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2876:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2876:19:5"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2864:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2864:32:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2846:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2846:51:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2846:51:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$182__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2770:9:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2781:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2792:4:5",
														"type": ""
													}
												],
												"src": "2686:217:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3082:236:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3099:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3110:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3092:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3092:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3092:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3133:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3144:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3129:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3129:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3149:2:5",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3122:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3122:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3122:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3172:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3183:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3168:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3168:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3188:34:5",
																		"type": "",
																		"value": "_stakeholder has to have enough "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3161:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3161:62:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3161:62:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3243:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3254:2:5",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3239:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3239:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3259:16:5",
																		"type": "",
																		"value": "staked balance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3232:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3232:44:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3232:44:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3285:27:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3297:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3308:3:5",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3293:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3293:19:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3285:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0950f71c3eaf4fbdc3694257bebef9e2dbaf3001649f3ae165931407e5f014d3__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3059:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3073:4:5",
														"type": ""
													}
												],
												"src": "2908:410:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3497:228:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3514:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3525:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3507:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3507:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3507:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3548:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3559:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3544:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3544:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3564:2:5",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3537:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3537:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3537:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3587:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3598:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3583:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3583:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3603:34:5",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3576:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3576:62:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3576:62:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3658:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3669:2:5",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3654:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3654:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3674:8:5",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3647:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3647:36:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3647:36:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3692:27:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3704:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3715:3:5",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3700:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3700:19:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3692:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3474:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3488:4:5",
														"type": ""
													}
												],
												"src": "3323:402:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3904:232:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3921:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3932:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3914:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3914:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3914:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3955:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3966:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3951:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3951:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3971:2:5",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3944:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3944:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3944:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3994:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4005:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3990:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3990:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4010:34:5",
																		"type": "",
																		"value": "isStakeWhitelisted must be true "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3983:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3983:62:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3983:62:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4065:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4076:2:5",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4061:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4061:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4081:12:5",
																		"type": "",
																		"value": "for Sender"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4054:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4054:40:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4054:40:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4103:27:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4115:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4126:3:5",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4111:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4111:19:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4103:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_298edb33324b45dc0502b4d47d478872011ba64baac4d1f13dc64fbeb86db43d__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3881:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3895:4:5",
														"type": ""
													}
												],
												"src": "3730:406:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4315:239:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4332:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4343:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4325:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4325:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4325:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4366:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4377:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4362:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4362:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4382:2:5",
																		"type": "",
																		"value": "49"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4355:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4355:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4355:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4405:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4416:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4401:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4401:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4421:34:5",
																		"type": "",
																		"value": "_stakeholder has to have enough "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4394:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4394:62:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4394:62:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4476:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4487:2:5",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4472:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4472:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4492:19:5",
																		"type": "",
																		"value": "allocated balance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4465:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4465:47:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4465:47:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4521:27:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4533:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4544:3:5",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4529:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4529:19:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4521:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4eb9f915bb66badb390a06b1d2fae578ac26e0277c0ae5a6fe4529526dd4aa59__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4292:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4306:4:5",
														"type": ""
													}
												],
												"src": "4141:413:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4733:225:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4750:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4761:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4743:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4743:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4743:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4784:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4795:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4780:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4780:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4800:2:5",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4773:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4773:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4773:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4823:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4834:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4819:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4819:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4839:34:5",
																		"type": "",
																		"value": "Address must be whitelisted alre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4812:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4812:62:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4812:62:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4894:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4905:2:5",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4890:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4890:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4910:5:5",
																		"type": "",
																		"value": "ady"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4883:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4883:33:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4883:33:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4925:27:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4937:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4948:3:5",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4933:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4933:19:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4925:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_65cf03327a1e90fd0398815409cf9b9679e48701ab3d219f81d1da1b2bfb20b9__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4710:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4724:4:5",
														"type": ""
													}
												],
												"src": "4559:399:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5137:182:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5154:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5165:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5147:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5147:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5147:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5188:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5199:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5184:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5184:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5204:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5177:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5177:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5177:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5227:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5238:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5223:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5223:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5243:34:5",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5216:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5216:62:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5216:62:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5287:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5299:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5310:2:5",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5295:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5295:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5287:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5114:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5128:4:5",
														"type": ""
													}
												],
												"src": "4963:356:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5498:227:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5515:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5526:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5508:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5508:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5508:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5549:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5560:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5545:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5545:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5565:2:5",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5538:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5538:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5538:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5588:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5599:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5584:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5584:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5604:34:5",
																		"type": "",
																		"value": "isStakeholder must be true for S"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5577:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5577:62:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5577:62:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5659:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5670:2:5",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5655:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5655:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5675:7:5",
																		"type": "",
																		"value": "ender"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5648:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5648:35:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5648:35:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5692:27:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5704:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5715:3:5",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5700:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5700:19:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5692:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c302f0beb37a5eeff9f7ac0d485bf4f986219711f2ba83fc8a8a92cac233905a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5475:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5489:4:5",
														"type": ""
													}
												],
												"src": "5324:401:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5904:229:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5921:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5932:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5914:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5914:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5914:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5955:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5966:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5951:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5951:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5971:2:5",
																		"type": "",
																		"value": "39"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5944:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5944:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5944:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5994:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6005:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5990:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5990:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6010:34:5",
																		"type": "",
																		"value": "Address must not be whitelisted "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5983:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5983:62:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5983:62:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6065:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6076:2:5",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6061:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6061:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6081:9:5",
																		"type": "",
																		"value": "already"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6054:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6054:37:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6054:37:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6100:27:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6112:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6123:3:5",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6108:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6108:19:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6100:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e8e9d0a0de6df530cab55500d1d615d5495baa9bbc49fb47a6a7731eb760add1__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5881:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5895:4:5",
														"type": ""
													}
												],
												"src": "5730:403:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6312:178:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6329:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6340:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6322:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6322:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6322:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6363:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6374:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6359:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6359:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6379:2:5",
																		"type": "",
																		"value": "28"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6352:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6352:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6352:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6402:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6413:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6398:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6398:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6418:30:5",
																		"type": "",
																		"value": "not enough tokens to deposit"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6391:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6391:58:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6391:58:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6458:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6470:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6481:2:5",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6466:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6466:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6458:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f2930608c32725964c5f0cdb3630f15515ff6b9f9c3749cabfcd0b6f50001729__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6289:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6303:4:5",
														"type": ""
													}
												],
												"src": "6138:352:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6669:246:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6686:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6697:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6679:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6679:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6679:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6720:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6731:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6716:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6716:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6736:2:5",
																		"type": "",
																		"value": "56"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6709:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6709:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6709:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6759:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6770:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6755:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6755:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6775:34:5",
																		"type": "",
																		"value": "not enough tokens in the free st"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6748:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6748:62:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6748:62:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6830:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6841:2:5",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6826:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6826:18:5"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6846:26:5",
																		"type": "",
																		"value": "aked balance to withdraw"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6819:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6819:54:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6819:54:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6882:27:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6894:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6905:3:5",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6890:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6890:19:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6882:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f9bfa3e6cb26cb6643b09c0104d485e6ee45977fdf77d93b43149d9266c83158__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6646:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6660:4:5",
														"type": ""
													}
												],
												"src": "6495:420:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7021:76:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7031:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7043:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7054:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7039:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7039:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7031:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7073:9:5"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7084:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7066:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7066:25:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7066:25:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6990:9:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7001:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7012:4:5",
														"type": ""
													}
												],
												"src": "6920:177:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7259:162:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7269:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7281:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7292:2:5",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7277:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7277:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7269:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7311:9:5"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7322:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7304:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7304:25:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7304:25:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7349:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7360:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7345:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7345:18:5"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "7365:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7338:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7338:34:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7338:34:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7392:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7403:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7388:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7388:18:5"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7408:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7381:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7381:34:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7381:34:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7212:9:5",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7223:6:5",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7231:6:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7239:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7250:4:5",
														"type": ""
													}
												],
												"src": "7102:319:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7474:80:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7501:22:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7503:16:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7503:18:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7503:18:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7490:1:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "7497:1:5"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "7493:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7493:6:5"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7487:2:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7487:13:5"
															},
															"nodeType": "YulIf",
															"src": "7484:2:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7532:16:5",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7543:1:5"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7546:1:5"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7539:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7539:9:5"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "7532:3:5"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7457:1:5",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7460:1:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "7466:3:5",
														"type": ""
													}
												],
												"src": "7426:128:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7608:76:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7630:22:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7632:16:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7632:18:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7632:18:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7624:1:5"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7627:1:5"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "7621:2:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7621:8:5"
															},
															"nodeType": "YulIf",
															"src": "7618:2:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7661:17:5",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7673:1:5"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7676:1:5"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7669:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7669:9:5"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "7661:4:5"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7590:1:5",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7593:1:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "7599:4:5",
														"type": ""
													}
												],
												"src": "7559:125:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7721:95:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7738:1:5",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7745:3:5",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7750:10:5",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7741:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7741:20:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7731:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7731:31:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7731:31:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7778:1:5",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7781:4:5",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7771:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7771:15:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7771:15:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7802:1:5",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7805:4:5",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7795:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "7795:15:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7795:15:5"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "7689:127:5"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bool_t_uint256__to_t_bool_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$182__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_0950f71c3eaf4fbdc3694257bebef9e2dbaf3001649f3ae165931407e5f014d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"_stakeholder has to have enough \")\n        mstore(add(headStart, 96), \"staked balance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_298edb33324b45dc0502b4d47d478872011ba64baac4d1f13dc64fbeb86db43d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"isStakeWhitelisted must be true \")\n        mstore(add(headStart, 96), \"for Sender\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4eb9f915bb66badb390a06b1d2fae578ac26e0277c0ae5a6fe4529526dd4aa59__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"_stakeholder has to have enough \")\n        mstore(add(headStart, 96), \"allocated balance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_65cf03327a1e90fd0398815409cf9b9679e48701ab3d219f81d1da1b2bfb20b9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Address must be whitelisted alre\")\n        mstore(add(headStart, 96), \"ady\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c302f0beb37a5eeff9f7ac0d485bf4f986219711f2ba83fc8a8a92cac233905a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"isStakeholder must be true for S\")\n        mstore(add(headStart, 96), \"ender\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e8e9d0a0de6df530cab55500d1d615d5495baa9bbc49fb47a6a7731eb760add1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Address must not be whitelisted \")\n        mstore(add(headStart, 96), \"already\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f2930608c32725964c5f0cdb3630f15515ff6b9f9c3749cabfcd0b6f50001729__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"not enough tokens to deposit\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f9bfa3e6cb26cb6643b09c0104d485e6ee45977fdf77d93b43149d9266c83158__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 56)\n        mstore(add(headStart, 64), \"not enough tokens in the free st\")\n        mstore(add(headStart, 96), \"aked balance to withdraw\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
									"id": 5,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x853828B6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xCBDCE4E0 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xCBDCE4E0 EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xE67719BD EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0xEF037B90 EQ PUSH2 0x29F JUMPI DUP1 PUSH4 0xF20E8B12 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH2 0x2D8 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x853828B6 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x8AED0FEB EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0xBD0BB4F6 EQ PUSH2 0x258 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x27E235E3 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x38EADA1C EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x4BA79DFE EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x6A40CBB6 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x218 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x112B3266 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x12B6887C EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x14BEE5A5 EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x227A473B EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x23CC9F37 EQ PUSH2 0x1AD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0xF73 JUMP JUMPDEST PUSH2 0x2E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP2 SWAP1 PUSH2 0xFEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0xF73 JUMP JUMPDEST PUSH2 0x3ED JUMP JUMPDEST PUSH2 0x18B PUSH2 0x4ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x12D1 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1A6 CALLDATASIZE PUSH1 0x4 PUSH2 0xF43 JUMP JUMPDEST PUSH2 0x572 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x18B PUSH2 0x5FE JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x67D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x12DA JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0xF43 JUMP JUMPDEST PUSH2 0x69E JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1F8 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x781 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x20B CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0x85E JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x922 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x962 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x9AD JUMP JUMPDEST PUSH2 0x18B PUSH2 0xA74 JUMP JUMPDEST PUSH2 0x238 PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP2 SWAP1 PUSH2 0xF9E JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0xF43 JUMP JUMPDEST PUSH2 0xAFF JUMP JUMPDEST PUSH2 0x26B PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xC53 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP3 SWAP2 SWAP1 PUSH2 0xFFA JUMP JUMPDEST PUSH2 0x18B PUSH2 0x287 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xCCE JUMP JUMPDEST PUSH2 0x15A PUSH2 0x29A CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xCF0 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2AD CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xD0E JUMP JUMPDEST PUSH2 0x18B PUSH2 0x2C0 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xD81 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0xF09 JUMP JUMPDEST PUSH2 0xD9F JUMP JUMPDEST PUSH2 0x238 PUSH2 0xE0D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EB CALLER PUSH2 0xCF0 JUMP JUMPDEST PUSH2 0x310 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x109E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x319 DUP3 PUSH2 0xD0E JUMP JUMPDEST PUSH2 0x335 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x11B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD DUP4 GT ISZERO PUSH2 0x370 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x10E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH2 0x396 SWAP1 DUP5 PUSH2 0xE1C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 ADD SLOAD PUSH2 0x3C4 SWAP1 DUP5 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F8 CALLER PUSH2 0xCF0 JUMP JUMPDEST PUSH2 0x414 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x109E JUMP JUMPDEST PUSH2 0x41D DUP3 PUSH2 0xD0E JUMP JUMPDEST PUSH2 0x439 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x11B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD DUP4 GT ISZERO PUSH2 0x474 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x100A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x49A SWAP1 DUP5 PUSH2 0xE1C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 ADD SLOAD PUSH2 0x4C8 SWAP1 DUP5 PUSH2 0xE2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SSTORE POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x51F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x554 DUP5 DUP3 PUSH2 0xE2F JUMP JUMPDEST SWAP4 POP POP POP PUSH1 0x1 DUP2 PUSH2 0x565 SWAP2 SWAP1 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 POP PUSH2 0x4F2 JUMP JUMPDEST POP SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x58E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x5AE JUMPI PUSH2 0x5AE CALLER PUSH2 0xE3B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x5C8 SWAP1 DUP3 PUSH2 0xE1C JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP2 SSTORE PUSH1 0x1 ADD SLOAD PUSH2 0x5E8 SWAP1 DUP3 PUSH2 0xE2F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x630 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0x665 DUP5 DUP3 PUSH2 0xE2F JUMP JUMPDEST SWAP4 POP POP POP PUSH1 0x1 DUP2 PUSH2 0x676 SWAP2 SWAP1 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 POP PUSH2 0x603 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP4 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT ISZERO PUSH2 0x6CD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x1274 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x6FF SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xFD6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x719 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x72D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x751 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0x75A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x779 SWAP1 DUP5 SWAP1 PUSH2 0x1308 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x789 PUSH2 0xE9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x79A PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x117C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0x7FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x34E57D3E15D2174A31AED19B5A635AAD3C7FD6D6FF6B19D43F56819654E990FD SWAP2 PUSH2 0x853 SWAP2 PUSH2 0xFEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x866 PUSH2 0xE9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x877 PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x89D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x117C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x8D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x1139 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD PUSH32 0xC87598B69899C8B872E8B5E416808D7332FE62ED4F035F7E72AE6F646E12F73F SWAP2 PUSH2 0x853 SWAP2 PUSH2 0xFEF JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0x942 SWAP1 DUP3 PUSH2 0xE2F JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP2 SSTORE PUSH1 0x1 ADD SLOAD PUSH2 0x5E8 SWAP1 DUP3 PUSH2 0xE1C JUMP JUMPDEST PUSH2 0x96A PUSH2 0xE9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x97B PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x117C JUMP JUMPDEST PUSH2 0x9AB PUSH1 0x0 PUSH2 0xEA2 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x9C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP3 PUSH4 0xA9059CBB SWAP3 PUSH2 0xA07 SWAP3 SWAP1 SWAP2 PUSH1 0x4 ADD PUSH2 0xFD6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA35 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA59 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0xA62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xAA6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 DUP4 MSTORE PUSH1 0x3 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH2 0xAD8 DUP5 DUP3 PUSH2 0xE2F JUMP JUMPDEST SWAP4 POP POP POP PUSH1 0x1 DUP2 PUSH2 0xAE9 SWAP2 SWAP1 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 POP PUSH2 0xA79 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0xB2F SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0xF9E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB5B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB7F SWAP2 SWAP1 PUSH2 0xF5B JUMP JUMPDEST LT ISZERO PUSH2 0xB9D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x123D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xBBC SWAP1 DUP5 SWAP1 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0xBF5 SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xFB2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC23 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC47 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0xC50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0xCC0 JUMPI PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xC84 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xCAE JUMPI PUSH1 0x1 SWAP3 POP SWAP1 POP PUSH2 0xCC9 JUMP JUMPDEST PUSH2 0xCB9 PUSH1 0x1 DUP3 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 POP PUSH2 0xC59 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0xD78 JUMPI PUSH1 0x2 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xD3D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xD66 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0xCEB JUMP JUMPDEST PUSH2 0xD71 PUSH1 0x1 DUP3 PUSH2 0x12F0 JUMP JUMPDEST SWAP1 POP PUSH2 0xD12 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xDA7 PUSH2 0xE9E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xDB8 PUSH2 0xAF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xDDE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x117C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x307 SWAP1 PUSH2 0x1058 JUMP JUMPDEST PUSH2 0xC50 DUP2 PUSH2 0xEA2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE28 DUP3 DUP5 PUSH2 0x1308 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE28 DUP3 DUP5 PUSH2 0x12F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE46 DUP3 PUSH2 0xC53 JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0xE9A JUMPI PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xCEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xE28 DUP3 PUSH2 0xEF2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF34 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE28 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF54 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF6C JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF85 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xF95 PUSH1 0x20 DUP5 ADD PUSH2 0xEF2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 ISZERO ISZERO DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x5F7374616B65686F6C6465722068617320746F206861766520656E6F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x7374616B65642062616C616E6365 PUSH1 0x90 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x69735374616B6557686974656C6973746564206D757374206265207472756520 PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x3337B91029B2B73232B9 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x5F7374616B65686F6C6465722068617320746F206861766520656E6F75676820 PUSH1 0x40 DUP3 ADD MSTORE PUSH17 0x616C6C6F63617465642062616C616E6365 PUSH1 0x78 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x41646472657373206D7573742062652077686974656C697374656420616C7265 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x616479 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x69735374616B65686F6C646572206D757374206265207472756520666F722053 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x32B73232B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x41646472657373206D757374206E6F742062652077686974656C697374656420 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x616C7265616479 PUSH1 0xC8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1C SWAP1 DUP3 ADD MSTORE PUSH32 0x6E6F7420656E6F75676820746F6B656E7320746F206465706F73697400000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x6E6F7420656E6F75676820746F6B656E7320696E207468652066726565207374 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x616B65642062616C616E636520746F2077697468647261770000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1303 JUMPI PUSH2 0x1303 PUSH2 0x131F JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x131A JUMPI PUSH2 0x131A PUSH2 0x131F JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 POP LOG3 SWAP9 SWAP15 PUSH8 0x54CE22286B43B8AE 0xBD 0x1F 0x4B MSTORE 0xD3 EXP GT 0xBA DUP6 0xE6 0xA7 SAR GAS SWAP4 0x21 0xC7 ISZERO EQ PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "423:10617:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4440:818;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3375:803;;;;;;:::i;:::-;;:::i;6880:441::-;;;:::i;:::-;;;;;;;:::i;2327:404::-;;;;;;:::i;:::-;;:::i;:::-;;6277:431;;;:::i;899:47::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;10476:299::-;;;;;;:::i;:::-;;:::i;1520:277::-;;;;;;:::i;:::-;;:::i;1805:297::-;;;;;;:::i;:::-;;:::i;2830:327::-;;;:::i;1668:101:0:-;;;:::i;10793:234:4:-;;;:::i;7493:434::-;;;:::i;1036:85:0:-;;;:::i;:::-;;;;;;;:::i;9890:366:4:-;;;;;;:::i;:::-;;:::i;8238:287::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;5530:179::-;;;;;;:::i;:::-;;:::i;1346:158::-;;;;;;:::i;:::-;;:::i;8791:263::-;;;;;;:::i;:::-;;:::i;5927:182::-;;;;;;:::i;:::-;;:::i;1918:198:0:-;;;;;;:::i;:::-;;:::i;523:19:4:-;;;:::i;4440:818::-;4563:4;4593:30;4612:10;4593:18;:30::i;:::-;4585:85;;;;-1:-1:-1;;;4585:85:4;;;;;;;:::i;:::-;;;;;;;;;4689:27;4703:12;4689:13;:27::i;:::-;4681:77;;;;-1:-1:-1;;;4681:77:4;;;;;;;:::i;:::-;-1:-1:-1;;;;;4777:22:4;;;;;;:8;:22;;;;;:40;;;:63;-1:-1:-1;4777:63:4;4769:125;;;;-1:-1:-1;;;4769:125:4;;;;;;;:::i;:::-;-1:-1:-1;;;;;5051:22:4;;;;;;:8;:22;;;;;:40;;;:64;;5096:18;5051:44;:64::i;:::-;-1:-1:-1;;;;;5008:22:4;;;;;;:8;:22;;;;;:40;;;:107;;;;5166:37;;;:61;;5208:18;5166:41;:61::i;:::-;-1:-1:-1;;;;;5126:22:4;;;;;;:8;:22;;;;;:37;;;;:101;;;;:37;-1:-1:-1;4440:818:4;;;;:::o;3375:803::-;3495:4;3525:30;3544:10;3525:18;:30::i;:::-;3517:85;;;;-1:-1:-1;;;3517:85:4;;;;;;;:::i;:::-;3621:27;3635:12;3621:13;:27::i;:::-;3613:77;;;;-1:-1:-1;;;3613:77:4;;;;;;;:::i;:::-;-1:-1:-1;;;;;3709:22:4;;;;;;:8;:22;;;;;:37;;;:58;-1:-1:-1;3709:58:4;3701:117;;;;-1:-1:-1;;;3701:117:4;;;;;;;:::i;:::-;-1:-1:-1;;;;;3972:22:4;;;;;;:8;:22;;;;;:37;;;:59;;4014:16;3972:41;:59::i;:::-;-1:-1:-1;;;;;3932:22:4;;;;;;:8;:22;;;;;:37;;;:99;;;;4085:40;;;:62;;4130:16;4085:44;:62::i;:::-;-1:-1:-1;;;;;4042:22:4;;;;;;:8;:22;;;;;:40;;:105;-1:-1:-1;4165:4:4;3375:803;;;;:::o;6880:441::-;6959:7;;;7019:265;7043:12;:19;7039:23;;7019:265;;;7086:20;7109:12;7122:1;7109:15;;;;;;-1:-1:-1;;;7109:15:4;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7109:15:4;7167:22;;;:8;:22;;;;;;;:40;;;7109:15;;-1:-1:-1;7237:35:4;:12;7167:40;7237:16;:35::i;:::-;7222:50;;7019:265;;7069:1;7064:6;;;;;:::i;:::-;;;7019:265;;;-1:-1:-1;7301:12:4;-1:-1:-1;6880:441:4;:::o;2327:404::-;2407:10;2398:20;;;;:8;:20;;;;;:33;:44;-1:-1:-1;2398:44:4;2390:53;;;;;;2466:10;2457:20;;;;:8;:20;;;;;:35;;;2454:71;;2499:26;2514:10;2499:14;:26::i;:::-;2591:10;2582:20;;;;:8;:20;;;;;:33;:45;;2620:6;2582:37;:45::i;:::-;2555:10;2546:20;;;;:8;:20;;;;;:81;;;2676:35;;;:47;;2716:6;2676:39;:47::i;:::-;2647:10;2638:20;;;;:8;:20;;;;;:35;;:85;-1:-1:-1;2327:404:4:o;6277:431::-;6347:7;;;6407:264;6431:12;:19;6427:23;;6407:264;;;6474:20;6497:12;6510:1;6497:15;;;;;;-1:-1:-1;;;6497:15:4;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6497:15:4;6556:22;;;:8;:22;;;;;;;6497:15;6556:37;;6497:15;;-1:-1:-1;6623:36:4;:12;6556:37;6623:16;:36::i;:::-;6608:51;;6407:264;;6457:1;6452:6;;;;;:::i;:::-;;;6407:264;;899:47;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;10476:299::-;10552:10;10543:20;;;;:8;:20;;;;;:33;:47;-1:-1:-1;10543:47:4;10535:116;;;;-1:-1:-1;;;10535:116:4;;;;;;;:::i;:::-;10670:5;;:38;;-1:-1:-1;;;10670:38:4;;-1:-1:-1;;;;;10670:5:4;;;;:14;;:38;;10685:10;;10697;;10670:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10662:47;;;;;;10729:10;10720:20;;;;:8;:20;;;;;:47;;10757:10;;10720:20;:47;;10757:10;;10720:47;:::i;:::-;;;;-1:-1:-1;;;10476:299:4:o;1520:277::-;1259:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:0;;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;1617:27:4;::::1;;::::0;;;:17:::1;:27;::::0;;;;;::::1;;:35;;:27:::0;:35:::1;;1609:87;;;;-1:-1:-1::0;;;1609:87:4::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;1707:27:4;::::1;;::::0;;;:17:::1;:27;::::0;;;;;;:34;;-1:-1:-1;;1707:34:4::1;1737:4;1707:34:::0;;::::1;::::0;;;1757:32;;::::1;::::0;::::1;::::0;::::1;:::i;:::-;;;;;;;;1520:277:::0;:::o;1805:297::-;1259:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:0;;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;1913:27:4;::::1;;::::0;;;:17:::1;:27;::::0;;;;;::::1;;1905:84;;;;-1:-1:-1::0;;;1905:84:4::1;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;2000:27:4;::::1;2030:5;2000:27:::0;;;:17:::1;:27;::::0;;;;;:35;;-1:-1:-1;;2000:35:4::1;::::0;;2051;::::1;::::0;::::1;::::0;::::1;:::i;2830:327::-:0;2921:10;2888:21;2912:20;;;:8;:20;;;;;:35;;;;2994:33;;:52;;2912:35;2994:37;:52::i;:::-;2967:10;2958:20;;;;:8;:20;;;;;:88;;;3095:35;;;:54;;3135:13;3095:39;:54::i;1668:101:0:-;1259:12;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:0;;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;10793:234:4:-;10861:10;10888:1;10852:20;;;:8;:20;;;;;:33;10844:46;;;;;;10909:5;;10924:10;10909:5;10936:20;;;:8;:20;;;;;;;:33;10909:61;;-1:-1:-1;;;10909:61:4;;-1:-1:-1;;;;;10909:5:4;;;;:14;;:61;;10924:10;;10909:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10901:70;;;;;;10991:10;11018:1;10982:20;;;:8;:20;;;;;:37;10793:234::o;7493:434::-;7572:7;;;7632:258;7656:12;:19;7652:23;;7632:258;;;7699:20;7722:12;7735:1;7722:15;;;;;;-1:-1:-1;;;7722:15:4;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7722:15:4;7779:22;;;:8;:22;;;;;;;:35;7722:15;;-1:-1:-1;7844:34:4;:12;7779:35;7844:16;:34::i;:::-;7829:49;;7632:258;;7682:1;7677:6;;;;;:::i;:::-;;;7632:258;;1036:85:0;1082:7;1108:6;-1:-1:-1;;;;;1108:6:0;1036:85;:::o;9890:366:4:-;9942:5;;:27;;-1:-1:-1;;;9942:27:4;;9973:6;;-1:-1:-1;;;;;9942:5:4;;:15;;:27;;9958:10;;9942:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:37;;9934:78;;;;-1:-1:-1;;;9934:78:4;;;;;;;:::i;:::-;10084:10;10075:20;;;;:8;:20;;;;;:43;;10112:6;;10075:20;:43;;10112:6;;10075:43;:::i;:::-;;;;-1:-1:-1;;10196:5:4;;:53;;-1:-1:-1;;;10196:53:4;;-1:-1:-1;;;;;10196:5:4;;;;:18;;:53;;10215:10;;10235:4;;10242:6;;10196:53;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10188:62;;;;;;9890:366;:::o;8238:287::-;8331:4;8337:7;8367:9;8362:128;8386:12;:19;8382:23;;8362:128;;;8445:12;8458:1;8445:15;;;;;;-1:-1:-1;;;8445:15:4;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8433:27:4;;;8445:15;;8433:27;8429:49;;;8470:4;;-1:-1:-1;8476:1:4;-1:-1:-1;8462:16:4;;8429:49;8407:6;8412:1;8407:6;;:::i;:::-;;;8362:128;;;;8508:5;8515:1;8500:17;;;;8238:287;;;;:::o;5530:179::-;-1:-1:-1;;;;;5664:22:4;;5632:7;5664:22;;;:8;:22;;;;;:37;;;5530:179;;;;:::o;1346:158::-;-1:-1:-1;;;;;1469:27:4;1440:4;1469:27;;;:17;:27;;;;;;;;;1346:158::o;8791:263::-;8879:4;;8901:123;8925:12;:19;8921:23;;8901:123;;;8984:12;8997:1;8984:15;;;;;;-1:-1:-1;;;8984:15:4;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8972:27:4;;;8984:15;;8972:27;8968:44;;;9008:4;9001:11;;;;;8968:44;8946:6;8951:1;8946:6;;:::i;:::-;;;8901:123;;;-1:-1:-1;9041:5:4;;8791:263;-1:-1:-1;;8791:263:4:o;5927:182::-;-1:-1:-1;;;;;6061:22:4;6029:7;6061:22;;;:8;:22;;;;;:40;;;;5927:182::o;1918:198:0:-;1259:12;:10;:12::i;:::-;-1:-1:-1;;;;;1248:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1248:23:0;;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;;-1:-1:-1::0;;;1998:73:0::1;;;;;;;:::i;:::-;2081:28;2100:8;2081:18;:28::i;523:19:4:-:0;;;-1:-1:-1;;;;;523:19:4;;:::o;3108:96:3:-;3166:7;3192:5;3196:1;3192;:5;:::i;:::-;3185:12;3108:96;-1:-1:-1;;;3108:96:3:o;2741:::-;2799:7;2825:5;2829:1;2825;:5;:::i;9177:207:4:-;9257:19;9282:32;9301:12;9282:18;:32::i;:::-;9256:58;;;9329:14;9325:51;;9345:12;:31;;;;;;;-1:-1:-1;9345:31:4;;;;;;;;-1:-1:-1;;;;;;9345:31:4;-1:-1:-1;;;;;9345:31:4;;;;;9325:51;9177:207;;:::o;640:96:2:-;719:10;640:96;:::o;2270:187:0:-;2343:16;2362:6;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;2410:40;;2362:6;;;;;;;2410:40;;2343:16;2410:40;2270:187;;:::o;14:175:5:-;84:20;;-1:-1:-1;;;;;133:31:5;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;397:297::-;;517:2;505:9;496:7;492:23;488:32;485:2;;;538:6;530;523:22;485:2;575:9;569:16;628:5;621:13;614:21;607:5;604:32;594:2;;655:6;647;640:22;699:190;;811:2;799:9;790:7;786:23;782:32;779:2;;;832:6;824;817:22;779:2;-1:-1:-1;860:23:5;;769:120;-1:-1:-1;769:120:5:o;894:194::-;;1017:2;1005:9;996:7;992:23;988:32;985:2;;;1038:6;1030;1023:22;985:2;-1:-1:-1;1066:16:5;;975:113;-1:-1:-1;975:113:5:o;1093:266::-;;;1222:2;1210:9;1201:7;1197:23;1193:32;1190:2;;;1243:6;1235;1228:22;1190:2;1284:9;1271:23;1261:33;;1313:40;1349:2;1338:9;1334:18;1313:40;:::i;:::-;1303:50;;1180:179;;;;;:::o;1364:203::-;-1:-1:-1;;;;;1528:32:5;;;;1510:51;;1498:2;1483:18;;1465:102::o;1572:375::-;-1:-1:-1;;;;;1830:15:5;;;1812:34;;1882:15;;;;1877:2;1862:18;;1855:43;1929:2;1914:18;;1907:34;;;;1762:2;1747:18;;1729:218::o;1952:274::-;-1:-1:-1;;;;;2144:32:5;;;;2126:51;;2208:2;2193:18;;2186:34;2114:2;2099:18;;2081:145::o;2231:187::-;2396:14;;2389:22;2371:41;;2359:2;2344:18;;2326:92::o;2423:258::-;2616:14;;2609:22;2591:41;;2663:2;2648:18;;2641:34;2579:2;2564:18;;2546:135::o;2908:410::-;3110:2;3092:21;;;3149:2;3129:18;;;3122:30;3188:34;3183:2;3168:18;;3161:62;-1:-1:-1;;;3254:2:5;3239:18;;3232:44;3308:3;3293:19;;3082:236::o;3323:402::-;3525:2;3507:21;;;3564:2;3544:18;;;3537:30;3603:34;3598:2;3583:18;;3576:62;-1:-1:-1;;;3669:2:5;3654:18;;3647:36;3715:3;3700:19;;3497:228::o;3730:406::-;3932:2;3914:21;;;3971:2;3951:18;;;3944:30;4010:34;4005:2;3990:18;;3983:62;-1:-1:-1;;;4076:2:5;4061:18;;4054:40;4126:3;4111:19;;3904:232::o;4141:413::-;4343:2;4325:21;;;4382:2;4362:18;;;4355:30;4421:34;4416:2;4401:18;;4394:62;-1:-1:-1;;;4487:2:5;4472:18;;4465:47;4544:3;4529:19;;4315:239::o;4559:399::-;4761:2;4743:21;;;4800:2;4780:18;;;4773:30;4839:34;4834:2;4819:18;;4812:62;-1:-1:-1;;;4905:2:5;4890:18;;4883:33;4948:3;4933:19;;4733:225::o;4963:356::-;5165:2;5147:21;;;5184:18;;;5177:30;5243:34;5238:2;5223:18;;5216:62;5310:2;5295:18;;5137:182::o;5324:401::-;5526:2;5508:21;;;5565:2;5545:18;;;5538:30;5604:34;5599:2;5584:18;;5577:62;-1:-1:-1;;;5670:2:5;5655:18;;5648:35;5715:3;5700:19;;5498:227::o;5730:403::-;5932:2;5914:21;;;5971:2;5951:18;;;5944:30;6010:34;6005:2;5990:18;;5983:62;-1:-1:-1;;;6076:2:5;6061:18;;6054:37;6123:3;6108:19;;5904:229::o;6138:352::-;6340:2;6322:21;;;6379:2;6359:18;;;6352:30;6418;6413:2;6398:18;;6391:58;6481:2;6466:18;;6312:178::o;6495:420::-;6697:2;6679:21;;;6736:2;6716:18;;;6709:30;6775:34;6770:2;6755:18;;6748:62;6846:26;6841:2;6826:18;;6819:54;6905:3;6890:19;;6669:246::o;6920:177::-;7066:25;;;7054:2;7039:18;;7021:76::o;7102:319::-;7304:25;;;7360:2;7345:18;;7338:34;;;;7403:2;7388:18;;7381:34;7292:2;7277:18;;7259:162::o;7426:128::-;;7497:1;7493:6;7490:1;7487:13;7484:2;;;7503:18;;:::i;:::-;-1:-1:-1;7539:9:5;;7474:80::o;7559:125::-;;7627:1;7624;7621:8;7618:2;;;7632:18;;:::i;:::-;-1:-1:-1;7669:9:5;;7608:76::o;7689:127::-;7750:10;7745:3;7741:20;7738:1;7731:31;7781:4;7778:1;7771:15;7805:4;7802:1;7795:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "994200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"AllocatedStakedAmountOf(address)": "1364",
								"AvailableStakedAmountOf(address)": "infinite",
								"ProxyStakeAllocate(uint256,address)": "infinite",
								"ProxyStakeDeallocate(uint256,address)": "infinite",
								"Stake(uint256)": "infinite",
								"TotalAllocatedStakes()": "infinite",
								"TotalAvailableStakes()": "infinite",
								"TotalStakes()": "infinite",
								"addAddress(address)": "24620",
								"balances(address)": "2953",
								"closeAllStakes()": "infinite",
								"deposit(uint256)": "infinite",
								"isStakeWhitelisted(address)": "1326",
								"isStakeholder(address)": "infinite",
								"isStakeholderIndex(address)": "infinite",
								"owner()": "1137",
								"removeAddress(address)": "24606",
								"renounceOwnership()": "23637",
								"token()": "1202",
								"transferOwnership(address)": "23809",
								"withdraw(uint256)": "infinite",
								"withdrawAll()": "infinite"
							},
							"internal": {
								"addStakeholder(address)": "infinite",
								"removeStakeholder(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 423,
									"end": 11040,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 423,
									"end": 11040,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 423,
									"end": 11040,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "CALLVALUE",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 555,
									"end": 651,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 555,
									"end": 651,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 555,
									"end": 651,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 555,
									"end": 651,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "PUSHSIZE",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "CODESIZE",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "PUSHSIZE",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 555,
									"end": 651,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 555,
									"end": 651,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 555,
									"end": 651,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 555,
									"end": 651,
									"name": "JUMP",
									"source": 4,
									"value": "[in]"
								},
								{
									"begin": 555,
									"end": 651,
									"name": "tag",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 555,
									"end": 651,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 940,
									"end": 950,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 617,
									"end": 622,
									"name": "PUSH",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 617,
									"end": 643,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 617,
									"end": 643,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 617,
									"end": 643,
									"name": "AND",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 617,
									"end": 643,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 617,
									"end": 643,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 617,
									"end": 643,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 617,
									"end": 643,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 617,
									"end": 643,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 617,
									"end": 643,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 617,
									"end": 643,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 617,
									"end": 643,
									"name": "OR",
									"source": 4
								},
								{
									"begin": 617,
									"end": 643,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 617,
									"end": 643,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 423,
									"end": 11040,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "15"
								},
								{
									"begin": 423,
									"end": 11040,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 2,
									"value": "9"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 2
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 324,
									"name": "tag",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 324,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 14,
									"end": 324,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 5
								},
								{
									"begin": 105,
									"end": 107,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 105,
									"end": 107,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 105,
									"end": 107,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 158,
									"end": 164,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 150,
									"end": 156,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 143,
									"end": 165,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 105,
									"end": 107,
									"name": "tag",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 105,
									"end": 107,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 189,
									"end": 205,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 189,
									"end": 205,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 234,
									"end": 265,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 234,
									"end": 265,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 224,
									"end": 266,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 224,
									"end": 266,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 214,
									"end": 216,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 214,
									"end": 216,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 285,
									"end": 291,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 277,
									"end": 283,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 270,
									"end": 292,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 214,
									"end": 216,
									"name": "tag",
									"source": 5,
									"value": "18"
								},
								{
									"begin": 214,
									"end": 216,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 313,
									"end": 318,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 95,
									"end": 324,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 95,
									"end": 324,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 95,
									"end": 324,
									"name": "tag",
									"source": 5,
									"value": "15"
								},
								{
									"begin": 95,
									"end": 324,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 423,
									"end": 11040,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 423,
									"end": 11040,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 423,
									"end": 11040,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 423,
									"end": 11040,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 423,
									"end": 11040,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 423,
									"end": 11040,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 423,
									"end": 11040,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e150a3989e6754ce22286b43b8aebd1f4b52d30a11ba85e6a71d5a9321c7151464736f6c63430008000033",
									".code": [
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "tag",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "853828B6"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "CBDCE4E0"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "CBDCE4E0"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "E67719BD"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "EF037B90"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "F20E8B12"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "F2FDE38B"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "FC0C546A"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "tag",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "853828B6"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "8AED0FEB"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "8DA5CB5B"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "B6B55F25"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "BD0BB4F6"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "tag",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "27E235E3"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "27E235E3"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "2E1A7D4D"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "38EADA1C"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "4BA79DFE"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "6A40CBB6"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "715018A6"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "tag",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "112B3266"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "12B6887C"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "14BEE5A5"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "227A473B"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "23CC9F37"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "tag",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 423,
											"end": 11040,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "tag",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "tag",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "tag",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "tag",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "tag",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "41"
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "tag",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "tag",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "tag",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 6277,
											"end": 6708,
											"name": "tag",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 6277,
											"end": 6708,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6277,
											"end": 6708,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 6277,
											"end": 6708,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 6277,
											"end": 6708,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "tag",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "49"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "tag",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "tag",
											"source": 4,
											"value": "49"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "54"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "tag",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "tag",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "57"
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "59"
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "tag",
											"source": 4,
											"value": "59"
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "tag",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "tag",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "63"
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2830,
											"end": 3157,
											"name": "tag",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 2830,
											"end": 3157,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2830,
											"end": 3157,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 2830,
											"end": 3157,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 2830,
											"end": 3157,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 10793,
											"end": 11027,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 10793,
											"end": 11027,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10793,
											"end": 11027,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 10793,
											"end": 11027,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 10793,
											"end": 11027,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7493,
											"end": 7927,
											"name": "tag",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 7493,
											"end": 7927,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7493,
											"end": 7927,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 7493,
											"end": 7927,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 7493,
											"end": 7927,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "tag",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "42"
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "tag",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "tag",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "tag",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "tag",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "tag",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "86"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "tag",
											"source": 4,
											"value": "86"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "87"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "tag",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "90"
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "tag",
											"source": 4,
											"value": "90"
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "tag",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "tag",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "tag",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "tag",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 523,
											"end": 542,
											"name": "tag",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 523,
											"end": 542,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 523,
											"end": 542,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 523,
											"end": 542,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 523,
											"end": 542,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "tag",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4563,
											"end": 4567,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4593,
											"end": 4623,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 4612,
											"end": 4622,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 4593,
											"end": 4611,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 4593,
											"end": 4623,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4593,
											"end": 4623,
											"name": "tag",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 4593,
											"end": 4623,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "tag",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "tag",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 4585,
											"end": 4670,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4689,
											"end": 4716,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 4703,
											"end": 4715,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4689,
											"end": 4702,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 4689,
											"end": 4716,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4689,
											"end": 4716,
											"name": "tag",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 4689,
											"end": 4716,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "tag",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 4681,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4777,
											"end": 4799,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4777,
											"end": 4799,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4777,
											"end": 4799,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4777,
											"end": 4799,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4777,
											"end": 4799,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4777,
											"end": 4799,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4777,
											"end": 4785,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 4777,
											"end": 4799,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4777,
											"end": 4799,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4777,
											"end": 4799,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4777,
											"end": 4799,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4777,
											"end": 4799,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 4777,
											"end": 4817,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 4777,
											"end": 4817,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4777,
											"end": 4817,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 4777,
											"end": 4840,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 4777,
											"end": 4840,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "119"
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "tag",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 4769,
											"end": 4894,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5051,
											"end": 5073,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5051,
											"end": 5073,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5051,
											"end": 5073,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5051,
											"end": 5073,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5051,
											"end": 5073,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5051,
											"end": 5073,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5051,
											"end": 5059,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 5051,
											"end": 5073,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5051,
											"end": 5073,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5051,
											"end": 5073,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5051,
											"end": 5073,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5051,
											"end": 5073,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5051,
											"end": 5091,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 5051,
											"end": 5091,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5051,
											"end": 5091,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5051,
											"end": 5115,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 5051,
											"end": 5115,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5096,
											"end": 5114,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5051,
											"end": 5095,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 5051,
											"end": 5115,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5051,
											"end": 5115,
											"name": "tag",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 5051,
											"end": 5115,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5016,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5030,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5048,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 5008,
											"end": 5048,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5048,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5115,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5115,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5115,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5008,
											"end": 5115,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5166,
											"end": 5203,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 5166,
											"end": 5203,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5166,
											"end": 5203,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5166,
											"end": 5227,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 5166,
											"end": 5227,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5208,
											"end": 5226,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5166,
											"end": 5207,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 5166,
											"end": 5227,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5166,
											"end": 5227,
											"name": "tag",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 5166,
											"end": 5227,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5126,
											"end": 5148,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5148,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5148,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5126,
											"end": 5148,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5148,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5148,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5134,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 5126,
											"end": 5148,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5126,
											"end": 5148,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5148,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5126,
											"end": 5148,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5148,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5163,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 5126,
											"end": 5163,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5163,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5163,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5227,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5227,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5227,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5227,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5126,
											"end": 5163,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4440,
											"end": 5258,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "tag",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3495,
											"end": 3499,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3525,
											"end": 3555,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 3544,
											"end": 3554,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 3525,
											"end": 3543,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 3525,
											"end": 3555,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3525,
											"end": 3555,
											"name": "tag",
											"source": 4,
											"value": "125"
										},
										{
											"begin": 3525,
											"end": 3555,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "tag",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 3517,
											"end": 3602,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3621,
											"end": 3648,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 3635,
											"end": 3647,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3621,
											"end": 3634,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 3621,
											"end": 3648,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3621,
											"end": 3648,
											"name": "tag",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 3621,
											"end": 3648,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "129"
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "tag",
											"source": 4,
											"value": "129"
										},
										{
											"begin": 3613,
											"end": 3690,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3709,
											"end": 3717,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3709,
											"end": 3731,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3709,
											"end": 3746,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3709,
											"end": 3746,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3709,
											"end": 3746,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3709,
											"end": 3767,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 3709,
											"end": 3767,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "133"
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "tag",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 3701,
											"end": 3818,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3972,
											"end": 3994,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3972,
											"end": 3994,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3972,
											"end": 3994,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3972,
											"end": 3994,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3972,
											"end": 3994,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3972,
											"end": 3994,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3972,
											"end": 3980,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 3972,
											"end": 3994,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3972,
											"end": 3994,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3972,
											"end": 3994,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3972,
											"end": 3994,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3972,
											"end": 3994,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3972,
											"end": 4009,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3972,
											"end": 4009,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3972,
											"end": 4009,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3972,
											"end": 4031,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 3972,
											"end": 4031,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4014,
											"end": 4030,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 3972,
											"end": 4013,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 3972,
											"end": 4031,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3972,
											"end": 4031,
											"name": "tag",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 3972,
											"end": 4031,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3932,
											"end": 3954,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 3954,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 3954,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3932,
											"end": 3954,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 3954,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 3954,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 3940,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 3932,
											"end": 3954,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3932,
											"end": 3954,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 3954,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3932,
											"end": 3954,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 3954,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 3969,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3932,
											"end": 3969,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 3969,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 4031,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 4031,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 4031,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3932,
											"end": 4031,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 4085,
											"end": 4125,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 4085,
											"end": 4125,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4085,
											"end": 4125,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 4085,
											"end": 4147,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 4085,
											"end": 4147,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4130,
											"end": 4146,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4085,
											"end": 4129,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 4085,
											"end": 4147,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4085,
											"end": 4147,
											"name": "tag",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 4085,
											"end": 4147,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4042,
											"end": 4064,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4042,
											"end": 4064,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4042,
											"end": 4064,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4042,
											"end": 4064,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4042,
											"end": 4064,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4042,
											"end": 4064,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4042,
											"end": 4050,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 4042,
											"end": 4064,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4042,
											"end": 4064,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4042,
											"end": 4064,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4042,
											"end": 4064,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4042,
											"end": 4064,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 4042,
											"end": 4082,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 4042,
											"end": 4082,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4042,
											"end": 4147,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4165,
											"end": 4169,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3375,
											"end": 4178,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "tag",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6959,
											"end": 6966,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6959,
											"end": 6966,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6959,
											"end": 6966,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7019,
											"end": 7284,
											"name": "tag",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 7019,
											"end": 7284,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7043,
											"end": 7055,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 7043,
											"end": 7062,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7039,
											"end": 7062,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7039,
											"end": 7062,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 7019,
											"end": 7284,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7019,
											"end": 7284,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 7019,
											"end": 7284,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7086,
											"end": 7106,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7109,
											"end": 7121,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 7122,
											"end": 7123,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "PUSH",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "tag",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7189,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7189,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7189,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7175,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 7167,
											"end": 7189,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7189,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7189,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7189,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7167,
											"end": 7189,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7189,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7189,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7207,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 7167,
											"end": 7207,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7207,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7109,
											"end": 7124,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7237,
											"end": 7272,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 7237,
											"end": 7249,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7167,
											"end": 7207,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7237,
											"end": 7253,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 7237,
											"end": 7272,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7237,
											"end": 7272,
											"name": "tag",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 7237,
											"end": 7272,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7222,
											"end": 7272,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 7222,
											"end": 7272,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7019,
											"end": 7284,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7019,
											"end": 7284,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7069,
											"end": 7070,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 7064,
											"end": 7070,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7064,
											"end": 7070,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 7064,
											"end": 7070,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7064,
											"end": 7070,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7064,
											"end": 7070,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 7064,
											"end": 7070,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7064,
											"end": 7070,
											"name": "tag",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 7064,
											"end": 7070,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7064,
											"end": 7070,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7064,
											"end": 7070,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7019,
											"end": 7284,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 7019,
											"end": 7284,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7019,
											"end": 7284,
											"name": "tag",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 7019,
											"end": 7284,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7301,
											"end": 7313,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6880,
											"end": 7321,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "tag",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2407,
											"end": 2417,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2398,
											"end": 2406,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2398,
											"end": 2418,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2398,
											"end": 2431,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2398,
											"end": 2442,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 2398,
											"end": 2442,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2390,
											"end": 2443,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "146"
										},
										{
											"begin": 2390,
											"end": 2443,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2390,
											"end": 2443,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2390,
											"end": 2443,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2390,
											"end": 2443,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2390,
											"end": 2443,
											"name": "tag",
											"source": 4,
											"value": "146"
										},
										{
											"begin": 2390,
											"end": 2443,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2466,
											"end": 2476,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 2457,
											"end": 2477,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2457,
											"end": 2477,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2457,
											"end": 2477,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2457,
											"end": 2477,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2457,
											"end": 2465,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 2457,
											"end": 2477,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2457,
											"end": 2477,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2457,
											"end": 2477,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2457,
											"end": 2477,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2457,
											"end": 2477,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2457,
											"end": 2492,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 2457,
											"end": 2492,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2457,
											"end": 2492,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2454,
											"end": 2525,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "148"
										},
										{
											"begin": 2454,
											"end": 2525,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2499,
											"end": 2525,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "148"
										},
										{
											"begin": 2514,
											"end": 2524,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 2499,
											"end": 2513,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "149"
										},
										{
											"begin": 2499,
											"end": 2525,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2499,
											"end": 2525,
											"name": "tag",
											"source": 4,
											"value": "148"
										},
										{
											"begin": 2499,
											"end": 2525,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2591,
											"end": 2601,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 2582,
											"end": 2602,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2582,
											"end": 2602,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2582,
											"end": 2602,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2582,
											"end": 2602,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2582,
											"end": 2590,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 2582,
											"end": 2602,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2582,
											"end": 2602,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2582,
											"end": 2602,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2582,
											"end": 2602,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2582,
											"end": 2602,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2582,
											"end": 2615,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2582,
											"end": 2627,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "150"
										},
										{
											"begin": 2582,
											"end": 2627,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2620,
											"end": 2626,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2582,
											"end": 2619,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 2582,
											"end": 2627,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2582,
											"end": 2627,
											"name": "tag",
											"source": 4,
											"value": "150"
										},
										{
											"begin": 2582,
											"end": 2627,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2555,
											"end": 2565,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 2546,
											"end": 2566,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2546,
											"end": 2566,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2546,
											"end": 2566,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2546,
											"end": 2566,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2546,
											"end": 2554,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 2546,
											"end": 2566,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2546,
											"end": 2566,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2546,
											"end": 2566,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2546,
											"end": 2566,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2546,
											"end": 2566,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2546,
											"end": 2627,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2546,
											"end": 2627,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2546,
											"end": 2627,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 2676,
											"end": 2711,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 2676,
											"end": 2711,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2676,
											"end": 2711,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2676,
											"end": 2723,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "151"
										},
										{
											"begin": 2676,
											"end": 2723,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2716,
											"end": 2722,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2676,
											"end": 2715,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 2676,
											"end": 2723,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2676,
											"end": 2723,
											"name": "tag",
											"source": 4,
											"value": "151"
										},
										{
											"begin": 2676,
											"end": 2723,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2647,
											"end": 2657,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 2638,
											"end": 2658,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2638,
											"end": 2658,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2638,
											"end": 2658,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2638,
											"end": 2658,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2638,
											"end": 2646,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 2638,
											"end": 2658,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2638,
											"end": 2658,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2638,
											"end": 2658,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2638,
											"end": 2658,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2638,
											"end": 2658,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2638,
											"end": 2673,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 2638,
											"end": 2673,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2638,
											"end": 2723,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2327,
											"end": 2731,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 6277,
											"end": 6708,
											"name": "tag",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 6277,
											"end": 6708,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6347,
											"end": 6354,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6347,
											"end": 6354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6347,
											"end": 6354,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6407,
											"end": 6671,
											"name": "tag",
											"source": 4,
											"value": "153"
										},
										{
											"begin": 6407,
											"end": 6671,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6431,
											"end": 6443,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 6431,
											"end": 6450,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 6427,
											"end": 6450,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6427,
											"end": 6450,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 6407,
											"end": 6671,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 6407,
											"end": 6671,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 6407,
											"end": 6671,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6474,
											"end": 6494,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6497,
											"end": 6509,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 6510,
											"end": 6511,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "PUSH",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "tag",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6556,
											"end": 6578,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6556,
											"end": 6578,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6556,
											"end": 6578,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6556,
											"end": 6564,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 6556,
											"end": 6578,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6556,
											"end": 6578,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6556,
											"end": 6578,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6556,
											"end": 6578,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6556,
											"end": 6578,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6556,
											"end": 6578,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6556,
											"end": 6578,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 6556,
											"end": 6593,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6556,
											"end": 6593,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6497,
											"end": 6512,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6623,
											"end": 6659,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "158"
										},
										{
											"begin": 6623,
											"end": 6635,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 6556,
											"end": 6593,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6623,
											"end": 6639,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 6623,
											"end": 6659,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6623,
											"end": 6659,
											"name": "tag",
											"source": 4,
											"value": "158"
										},
										{
											"begin": 6623,
											"end": 6659,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6608,
											"end": 6659,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 6608,
											"end": 6659,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6407,
											"end": 6671,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6407,
											"end": 6671,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6457,
											"end": 6458,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 6452,
											"end": 6458,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6452,
											"end": 6458,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "159"
										},
										{
											"begin": 6452,
											"end": 6458,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6452,
											"end": 6458,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6452,
											"end": 6458,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 6452,
											"end": 6458,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6452,
											"end": 6458,
											"name": "tag",
											"source": 4,
											"value": "159"
										},
										{
											"begin": 6452,
											"end": 6458,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6452,
											"end": 6458,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6452,
											"end": 6458,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6407,
											"end": 6671,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "153"
										},
										{
											"begin": 6407,
											"end": 6671,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "tag",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 899,
											"end": 946,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "tag",
											"source": 4,
											"value": "57"
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10552,
											"end": 10562,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 10543,
											"end": 10563,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10543,
											"end": 10563,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10543,
											"end": 10563,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10543,
											"end": 10563,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10543,
											"end": 10551,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 10543,
											"end": 10563,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10543,
											"end": 10563,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10543,
											"end": 10563,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10543,
											"end": 10563,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10543,
											"end": 10563,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10543,
											"end": 10576,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10543,
											"end": 10590,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 10543,
											"end": 10590,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "161"
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "163"
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "tag",
											"source": 4,
											"value": "161"
										},
										{
											"begin": 10535,
											"end": 10651,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10675,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 10670,
											"end": 10675,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10670,
											"end": 10675,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10675,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10675,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10675,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10684,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 10670,
											"end": 10684,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10685,
											"end": 10695,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 10685,
											"end": 10695,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10697,
											"end": 10707,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 10697,
											"end": 10707,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "165"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "tag",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "166"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "tag",
											"source": 4,
											"value": "166"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "168"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "tag",
											"source": 4,
											"value": "168"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "169"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "170"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "tag",
											"source": 4,
											"value": "169"
										},
										{
											"begin": 10670,
											"end": 10708,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10662,
											"end": 10709,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "171"
										},
										{
											"begin": 10662,
											"end": 10709,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10662,
											"end": 10709,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10662,
											"end": 10709,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10662,
											"end": 10709,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10662,
											"end": 10709,
											"name": "tag",
											"source": 4,
											"value": "171"
										},
										{
											"begin": 10662,
											"end": 10709,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10729,
											"end": 10739,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10740,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10720,
											"end": 10740,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10740,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10740,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10728,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 10720,
											"end": 10740,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10720,
											"end": 10740,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10740,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10720,
											"end": 10740,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10740,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10767,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10767,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10757,
											"end": 10767,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10757,
											"end": 10767,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10740,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10767,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 10720,
											"end": 10767,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10757,
											"end": 10767,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10757,
											"end": 10767,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10767,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "173"
										},
										{
											"begin": 10720,
											"end": 10767,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10720,
											"end": 10767,
											"name": "tag",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 10720,
											"end": 10767,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10767,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10767,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10720,
											"end": 10767,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10476,
											"end": 10775,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "tag",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1634,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1652,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1652,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1644,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 1617,
											"end": 1652,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1617,
											"end": 1652,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "182"
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "184"
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "tag",
											"source": 4,
											"value": "182"
										},
										{
											"begin": 1609,
											"end": 1696,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1724,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1734,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1741,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1741,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1707,
											"end": 1741,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1737,
											"end": 1741,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 1707,
											"end": 1741,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1741,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1741,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1741,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1741,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1707,
											"end": 1741,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "PUSH",
											"source": 4,
											"value": "34E57D3E15D2174A31AED19B5A635AAD3C7FD6D6FF6B19D43F56819654E990FD"
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "tag",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1757,
											"end": 1789,
											"name": "LOG2",
											"source": 4
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1520,
											"end": 1797,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "tag",
											"source": 4,
											"value": "63"
										},
										{
											"begin": 1805,
											"end": 2102,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1913,
											"end": 1930,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 1913,
											"end": 1940,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "192"
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "194"
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "tag",
											"source": 4,
											"value": "192"
										},
										{
											"begin": 1905,
											"end": 1989,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2000,
											"end": 2027,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2000,
											"end": 2027,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2030,
											"end": 2035,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2000,
											"end": 2027,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2000,
											"end": 2027,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2000,
											"end": 2027,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2000,
											"end": 2017,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 2000,
											"end": 2027,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2000,
											"end": 2027,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2000,
											"end": 2027,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2000,
											"end": 2027,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2000,
											"end": 2027,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2000,
											"end": 2027,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2000,
											"end": 2035,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2000,
											"end": 2035,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2000,
											"end": 2035,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2000,
											"end": 2035,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2000,
											"end": 2035,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 2051,
											"end": 2086,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2051,
											"end": 2086,
											"name": "PUSH",
											"source": 4,
											"value": "C87598B69899C8B872E8B5E416808D7332FE62ED4F035F7E72AE6F646E12F73F"
										},
										{
											"begin": 2051,
											"end": 2086,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2051,
											"end": 2086,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 2051,
											"end": 2086,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2051,
											"end": 2086,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 2051,
											"end": 2086,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2830,
											"end": 3157,
											"name": "tag",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 2830,
											"end": 3157,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2921,
											"end": 2931,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 2888,
											"end": 2909,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2912,
											"end": 2932,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2912,
											"end": 2932,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2912,
											"end": 2932,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2912,
											"end": 2920,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 2912,
											"end": 2932,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2912,
											"end": 2932,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2912,
											"end": 2932,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2912,
											"end": 2932,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2912,
											"end": 2932,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2912,
											"end": 2947,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 2912,
											"end": 2947,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2912,
											"end": 2947,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2912,
											"end": 2947,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2994,
											"end": 3027,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2994,
											"end": 3027,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2994,
											"end": 3046,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "197"
										},
										{
											"begin": 2994,
											"end": 3046,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2912,
											"end": 2947,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2994,
											"end": 3031,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 2994,
											"end": 3046,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2994,
											"end": 3046,
											"name": "tag",
											"source": 4,
											"value": "197"
										},
										{
											"begin": 2994,
											"end": 3046,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2967,
											"end": 2977,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 2958,
											"end": 2978,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2958,
											"end": 2978,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2958,
											"end": 2978,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2958,
											"end": 2978,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2958,
											"end": 2966,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 2958,
											"end": 2978,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2958,
											"end": 2978,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2958,
											"end": 2978,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2958,
											"end": 2978,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2958,
											"end": 2978,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2958,
											"end": 3046,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2958,
											"end": 3046,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2958,
											"end": 3046,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3130,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3095,
											"end": 3130,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3130,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3149,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "151"
										},
										{
											"begin": 3095,
											"end": 3149,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3135,
											"end": 3148,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3095,
											"end": 3134,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 3095,
											"end": 3149,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "tag",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 10793,
											"end": 11027,
											"name": "tag",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 10793,
											"end": 11027,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10861,
											"end": 10871,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 10888,
											"end": 10889,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10852,
											"end": 10872,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10852,
											"end": 10872,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10852,
											"end": 10872,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10852,
											"end": 10860,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 10852,
											"end": 10872,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10852,
											"end": 10872,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10852,
											"end": 10872,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10852,
											"end": 10872,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10852,
											"end": 10872,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10852,
											"end": 10885,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10844,
											"end": 10890,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "208"
										},
										{
											"begin": 10844,
											"end": 10890,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10844,
											"end": 10890,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10844,
											"end": 10890,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10844,
											"end": 10890,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10844,
											"end": 10890,
											"name": "tag",
											"source": 4,
											"value": "208"
										},
										{
											"begin": 10844,
											"end": 10890,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10914,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 10909,
											"end": 10914,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10924,
											"end": 10934,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10914,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10936,
											"end": 10956,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10936,
											"end": 10956,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10936,
											"end": 10956,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10936,
											"end": 10944,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 10936,
											"end": 10956,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10936,
											"end": 10956,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10936,
											"end": 10956,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10956,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10936,
											"end": 10956,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10936,
											"end": 10956,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10936,
											"end": 10956,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10936,
											"end": 10969,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10909,
											"end": 10914,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10914,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10914,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10914,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10923,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 10909,
											"end": 10923,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "209"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 10924,
											"end": 10934,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10924,
											"end": 10934,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "165"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "tag",
											"source": 4,
											"value": "209"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "210"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "tag",
											"source": 4,
											"value": "210"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "212"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "tag",
											"source": 4,
											"value": "212"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "213"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "170"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "tag",
											"source": 4,
											"value": "213"
										},
										{
											"begin": 10909,
											"end": 10970,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10901,
											"end": 10971,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "214"
										},
										{
											"begin": 10901,
											"end": 10971,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10901,
											"end": 10971,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10901,
											"end": 10971,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10901,
											"end": 10971,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10901,
											"end": 10971,
											"name": "tag",
											"source": 4,
											"value": "214"
										},
										{
											"begin": 10901,
											"end": 10971,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10991,
											"end": 11001,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 11018,
											"end": 11019,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10982,
											"end": 11002,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10982,
											"end": 11002,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10982,
											"end": 11002,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10982,
											"end": 10990,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 10982,
											"end": 11002,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10982,
											"end": 11002,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10982,
											"end": 11002,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10982,
											"end": 11002,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10982,
											"end": 11002,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10982,
											"end": 11019,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 10793,
											"end": 11027,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7493,
											"end": 7927,
											"name": "tag",
											"source": 4,
											"value": "71"
										},
										{
											"begin": 7493,
											"end": 7927,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7572,
											"end": 7579,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7572,
											"end": 7579,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7572,
											"end": 7579,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7632,
											"end": 7890,
											"name": "tag",
											"source": 4,
											"value": "216"
										},
										{
											"begin": 7632,
											"end": 7890,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7656,
											"end": 7668,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 7656,
											"end": 7675,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7652,
											"end": 7675,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7652,
											"end": 7675,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 7632,
											"end": 7890,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7632,
											"end": 7890,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "138"
										},
										{
											"begin": 7632,
											"end": 7890,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7699,
											"end": 7719,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7722,
											"end": 7734,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 7735,
											"end": 7736,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "219"
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "PUSH",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "tag",
											"source": 4,
											"value": "219"
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7779,
											"end": 7801,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7779,
											"end": 7801,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7779,
											"end": 7801,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7779,
											"end": 7787,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 7779,
											"end": 7801,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7779,
											"end": 7801,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7779,
											"end": 7801,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7779,
											"end": 7801,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7779,
											"end": 7801,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7779,
											"end": 7801,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7779,
											"end": 7801,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 7779,
											"end": 7814,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7737,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7844,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "221"
										},
										{
											"begin": 7844,
											"end": 7856,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7779,
											"end": 7814,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7844,
											"end": 7860,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 7844,
											"end": 7878,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7844,
											"end": 7878,
											"name": "tag",
											"source": 4,
											"value": "221"
										},
										{
											"begin": 7844,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7829,
											"end": 7878,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 7829,
											"end": 7878,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7632,
											"end": 7890,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7632,
											"end": 7890,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7682,
											"end": 7683,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 7677,
											"end": 7683,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7677,
											"end": 7683,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "222"
										},
										{
											"begin": 7677,
											"end": 7683,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7677,
											"end": 7683,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7677,
											"end": 7683,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 7677,
											"end": 7683,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7677,
											"end": 7683,
											"name": "tag",
											"source": 4,
											"value": "222"
										},
										{
											"begin": 7677,
											"end": 7683,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7677,
											"end": 7683,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7677,
											"end": 7683,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7632,
											"end": 7890,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "216"
										},
										{
											"begin": 7632,
											"end": 7890,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "tag",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9947,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 9942,
											"end": 9947,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9973,
											"end": 9979,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9973,
											"end": 9979,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9942,
											"end": 9947,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9947,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9957,
											"name": "PUSH",
											"source": 4,
											"value": "70A08231"
										},
										{
											"begin": 9942,
											"end": 9957,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "225"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9958,
											"end": 9968,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 9958,
											"end": 9968,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "76"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "tag",
											"source": 4,
											"value": "225"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "226"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "tag",
											"source": 4,
											"value": "226"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "STATICCALL",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "228"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "tag",
											"source": 4,
											"value": "228"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "229"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "230"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "tag",
											"source": 4,
											"value": "229"
										},
										{
											"begin": 9942,
											"end": 9969,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9979,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 9942,
											"end": 9979,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "231"
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "233"
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "tag",
											"source": 4,
											"value": "231"
										},
										{
											"begin": 9934,
											"end": 10012,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10084,
											"end": 10094,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10095,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10075,
											"end": 10095,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10095,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10095,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10083,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 10075,
											"end": 10095,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10075,
											"end": 10095,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10095,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10075,
											"end": 10095,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10095,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10112,
											"end": 10118,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10112,
											"end": 10118,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10095,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "234"
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10112,
											"end": 10118,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10112,
											"end": 10118,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "tag",
											"source": 4,
											"value": "234"
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10075,
											"end": 10118,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10196,
											"end": 10201,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 10196,
											"end": 10201,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10196,
											"end": 10201,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10201,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10201,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10201,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10214,
											"name": "PUSH",
											"source": 4,
											"value": "23B872DD"
										},
										{
											"begin": 10196,
											"end": 10214,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "235"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10215,
											"end": 10225,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 10215,
											"end": 10225,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10235,
											"end": 10239,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 10235,
											"end": 10239,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10242,
											"end": 10248,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 10242,
											"end": 10248,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "236"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "tag",
											"source": 4,
											"value": "235"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "tag",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "239"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "tag",
											"source": 4,
											"value": "239"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "240"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "170"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "tag",
											"source": 4,
											"value": "240"
										},
										{
											"begin": 10196,
											"end": 10249,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10188,
											"end": 10250,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "241"
										},
										{
											"begin": 10188,
											"end": 10250,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10188,
											"end": 10250,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10188,
											"end": 10250,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10188,
											"end": 10250,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10188,
											"end": 10250,
											"name": "tag",
											"source": 4,
											"value": "241"
										},
										{
											"begin": 10188,
											"end": 10250,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9890,
											"end": 10256,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "tag",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8331,
											"end": 8335,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8337,
											"end": 8344,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8367,
											"end": 8376,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8362,
											"end": 8490,
											"name": "tag",
											"source": 4,
											"value": "243"
										},
										{
											"begin": 8362,
											"end": 8490,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8386,
											"end": 8398,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 8386,
											"end": 8405,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8382,
											"end": 8405,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8382,
											"end": 8405,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 8490,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 8490,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "244"
										},
										{
											"begin": 8362,
											"end": 8490,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8457,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 8458,
											"end": 8459,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "246"
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "PUSH",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "tag",
											"source": 4,
											"value": "246"
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8433,
											"end": 8460,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8433,
											"end": 8460,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8433,
											"end": 8460,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8445,
											"end": 8460,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8433,
											"end": 8460,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 8429,
											"end": 8478,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8429,
											"end": 8478,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "248"
										},
										{
											"begin": 8429,
											"end": 8478,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8470,
											"end": 8474,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 8470,
											"end": 8474,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8476,
											"end": 8477,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8462,
											"end": 8478,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 8462,
											"end": 8478,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8429,
											"end": 8478,
											"name": "tag",
											"source": 4,
											"value": "248"
										},
										{
											"begin": 8429,
											"end": 8478,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8407,
											"end": 8413,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "249"
										},
										{
											"begin": 8412,
											"end": 8413,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 8407,
											"end": 8413,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8407,
											"end": 8413,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 8407,
											"end": 8413,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8407,
											"end": 8413,
											"name": "tag",
											"source": 4,
											"value": "249"
										},
										{
											"begin": 8407,
											"end": 8413,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8407,
											"end": 8413,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8407,
											"end": 8413,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 8490,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "243"
										},
										{
											"begin": 8362,
											"end": 8490,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 8490,
											"name": "tag",
											"source": 4,
											"value": "244"
										},
										{
											"begin": 8362,
											"end": 8490,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 8490,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8508,
											"end": 8513,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8515,
											"end": 8516,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8500,
											"end": 8517,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8500,
											"end": 8517,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8500,
											"end": 8517,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8500,
											"end": 8517,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "tag",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8238,
											"end": 8525,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "tag",
											"source": 4,
											"value": "87"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5664,
											"end": 5686,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5664,
											"end": 5686,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5632,
											"end": 5639,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5664,
											"end": 5686,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5664,
											"end": 5686,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5664,
											"end": 5686,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5664,
											"end": 5672,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 5664,
											"end": 5686,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5664,
											"end": 5686,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5664,
											"end": 5686,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5664,
											"end": 5686,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5664,
											"end": 5686,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5664,
											"end": 5701,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 5664,
											"end": 5701,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5664,
											"end": 5701,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "tag",
											"source": 4,
											"value": "250"
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5530,
											"end": 5709,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "tag",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1440,
											"end": 1444,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1469,
											"end": 1486,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1346,
											"end": 1504,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "tag",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8879,
											"end": 8883,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8879,
											"end": 8883,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8901,
											"end": 9024,
											"name": "tag",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 8901,
											"end": 9024,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8925,
											"end": 8937,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 8925,
											"end": 8944,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8921,
											"end": 8944,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8921,
											"end": 8944,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 8901,
											"end": 9024,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8901,
											"end": 9024,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "254"
										},
										{
											"begin": 8901,
											"end": 9024,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8996,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 8997,
											"end": 8998,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "256"
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "PUSH",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "tag",
											"source": 4,
											"value": "256"
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8972,
											"end": 8999,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8972,
											"end": 8999,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8972,
											"end": 8999,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8984,
											"end": 8999,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8972,
											"end": 8999,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 8968,
											"end": 9012,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8968,
											"end": 9012,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "258"
										},
										{
											"begin": 8968,
											"end": 9012,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9008,
											"end": 9012,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 9001,
											"end": 9012,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9001,
											"end": 9012,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9001,
											"end": 9012,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9001,
											"end": 9012,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "250"
										},
										{
											"begin": 9001,
											"end": 9012,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8968,
											"end": 9012,
											"name": "tag",
											"source": 4,
											"value": "258"
										},
										{
											"begin": 8968,
											"end": 9012,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8946,
											"end": 8952,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "259"
										},
										{
											"begin": 8951,
											"end": 8952,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 8946,
											"end": 8952,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8946,
											"end": 8952,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 8946,
											"end": 8952,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8946,
											"end": 8952,
											"name": "tag",
											"source": 4,
											"value": "259"
										},
										{
											"begin": 8946,
											"end": 8952,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8946,
											"end": 8952,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8946,
											"end": 8952,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8901,
											"end": 9024,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 8901,
											"end": 9024,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8901,
											"end": 9024,
											"name": "tag",
											"source": 4,
											"value": "254"
										},
										{
											"begin": 8901,
											"end": 9024,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9041,
											"end": 9046,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9041,
											"end": 9046,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8791,
											"end": 9054,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "tag",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6061,
											"end": 6083,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6029,
											"end": 6036,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6061,
											"end": 6083,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6061,
											"end": 6083,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6061,
											"end": 6083,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6061,
											"end": 6069,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 6061,
											"end": 6083,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6061,
											"end": 6083,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6061,
											"end": 6083,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6061,
											"end": 6083,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6061,
											"end": 6083,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 6061,
											"end": 6101,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 6061,
											"end": 6101,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6061,
											"end": 6101,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 6061,
											"end": 6101,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5927,
											"end": 6109,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "262"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "262"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "263"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "264"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "264"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "267"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "269"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "267"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "241"
										},
										{
											"begin": 2100,
											"end": 2108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 523,
											"end": 542,
											"name": "tag",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 523,
											"end": 542,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 523,
											"end": 542,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 523,
											"end": 542,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 523,
											"end": 542,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 523,
											"end": 542,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 523,
											"end": 542,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 3108,
											"end": 3204,
											"name": "tag",
											"source": 3,
											"value": "121"
										},
										{
											"begin": 3108,
											"end": 3204,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3166,
											"end": 3173,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3192,
											"end": 3197,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "272"
										},
										{
											"begin": 3196,
											"end": 3197,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3192,
											"end": 3193,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3192,
											"end": 3197,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "173"
										},
										{
											"begin": 3192,
											"end": 3197,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3192,
											"end": 3197,
											"name": "tag",
											"source": 3,
											"value": "272"
										},
										{
											"begin": 3192,
											"end": 3197,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3185,
											"end": 3197,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 3108,
											"end": 3204,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3108,
											"end": 3204,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2741,
											"end": 2837,
											"name": "tag",
											"source": 3,
											"value": "123"
										},
										{
											"begin": 2741,
											"end": 2837,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2799,
											"end": 2806,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2825,
											"end": 2830,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "272"
										},
										{
											"begin": 2829,
											"end": 2830,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2825,
											"end": 2826,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2825,
											"end": 2830,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "144"
										},
										{
											"begin": 2825,
											"end": 2830,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 9177,
											"end": 9384,
											"name": "tag",
											"source": 4,
											"value": "149"
										},
										{
											"begin": 9177,
											"end": 9384,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9257,
											"end": 9276,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9282,
											"end": 9314,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "276"
										},
										{
											"begin": 9301,
											"end": 9313,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9282,
											"end": 9300,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 9282,
											"end": 9314,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9282,
											"end": 9314,
											"name": "tag",
											"source": 4,
											"value": "276"
										},
										{
											"begin": 9282,
											"end": 9314,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9256,
											"end": 9314,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9256,
											"end": 9314,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9256,
											"end": 9314,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9329,
											"end": 9343,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9325,
											"end": 9376,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "277"
										},
										{
											"begin": 9325,
											"end": 9376,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9357,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "PUSH",
											"source": 4,
											"value": "405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE"
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "AND",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9345,
											"end": 9376,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 9325,
											"end": 9376,
											"name": "tag",
											"source": 4,
											"value": "277"
										},
										{
											"begin": 9325,
											"end": 9376,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9177,
											"end": 9384,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9177,
											"end": 9384,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9177,
											"end": 9384,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "tag",
											"source": 5,
											"value": "282"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 84,
											"end": 104,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 133,
											"end": 164,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 133,
											"end": 164,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 123,
											"end": 165,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 123,
											"end": 165,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 113,
											"end": 115,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "250"
										},
										{
											"begin": 113,
											"end": 115,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 179,
											"end": 180,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 177,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 169,
											"end": 181,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 194,
											"end": 392,
											"name": "tag",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 194,
											"end": 392,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 194,
											"end": 392,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 306,
											"end": 308,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 294,
											"end": 303,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 285,
											"end": 292,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 281,
											"end": 304,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 277,
											"end": 309,
											"name": "SLT",
											"source": 5
										},
										{
											"begin": 274,
											"end": 276,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 274,
											"end": 276,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "286"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 327,
											"end": 333,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 319,
											"end": 325,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 312,
											"end": 334,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 274,
											"end": 276,
											"name": "tag",
											"source": 5,
											"value": "286"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "272"
										},
										{
											"begin": 376,
											"end": 385,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "282"
										},
										{
											"begin": 355,
											"end": 386,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 397,
											"end": 694,
											"name": "tag",
											"source": 5,
											"value": "170"
										},
										{
											"begin": 397,
											"end": 694,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 397,
											"end": 694,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 505,
											"end": 514,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 496,
											"end": 503,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 492,
											"end": 515,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 488,
											"end": 520,
											"name": "SLT",
											"source": 5
										},
										{
											"begin": 485,
											"end": 487,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 485,
											"end": 487,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "289"
										},
										{
											"begin": 485,
											"end": 487,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 538,
											"end": 544,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 530,
											"end": 536,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 523,
											"end": 545,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 485,
											"end": 487,
											"name": "tag",
											"source": 5,
											"value": "289"
										},
										{
											"begin": 485,
											"end": 487,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 575,
											"end": 584,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 569,
											"end": 585,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 628,
											"end": 633,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 621,
											"end": 634,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 614,
											"end": 635,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 607,
											"end": 612,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 604,
											"end": 636,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 594,
											"end": 596,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "272"
										},
										{
											"begin": 594,
											"end": 596,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 655,
											"end": 661,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 647,
											"end": 653,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 640,
											"end": 662,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 699,
											"end": 889,
											"name": "tag",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 699,
											"end": 889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 699,
											"end": 889,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 811,
											"end": 813,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 799,
											"end": 808,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 790,
											"end": 797,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 786,
											"end": 809,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 782,
											"end": 814,
											"name": "SLT",
											"source": 5
										},
										{
											"begin": 779,
											"end": 781,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 779,
											"end": 781,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "292"
										},
										{
											"begin": 779,
											"end": 781,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 832,
											"end": 838,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 824,
											"end": 830,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 817,
											"end": 839,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 779,
											"end": 781,
											"name": "tag",
											"source": 5,
											"value": "292"
										},
										{
											"begin": 779,
											"end": 781,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 860,
											"end": 883,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 860,
											"end": 883,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 769,
											"end": 889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 769,
											"end": 889,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 894,
											"end": 1088,
											"name": "tag",
											"source": 5,
											"value": "230"
										},
										{
											"begin": 894,
											"end": 1088,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 894,
											"end": 1088,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1017,
											"end": 1019,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1005,
											"end": 1014,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 996,
											"end": 1003,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 992,
											"end": 1015,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 988,
											"end": 1020,
											"name": "SLT",
											"source": 5
										},
										{
											"begin": 985,
											"end": 987,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 985,
											"end": 987,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "294"
										},
										{
											"begin": 985,
											"end": 987,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1038,
											"end": 1044,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1030,
											"end": 1036,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1023,
											"end": 1045,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 985,
											"end": 987,
											"name": "tag",
											"source": 5,
											"value": "294"
										},
										{
											"begin": 985,
											"end": 987,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1066,
											"end": 1082,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1066,
											"end": 1082,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 975,
											"end": 1088,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 975,
											"end": 1088,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1093,
											"end": 1359,
											"name": "tag",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 1093,
											"end": 1359,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1093,
											"end": 1359,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1093,
											"end": 1359,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1222,
											"end": 1224,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1210,
											"end": 1219,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1201,
											"end": 1208,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1197,
											"end": 1220,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1193,
											"end": 1225,
											"name": "SLT",
											"source": 5
										},
										{
											"begin": 1190,
											"end": 1192,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1190,
											"end": 1192,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "296"
										},
										{
											"begin": 1190,
											"end": 1192,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1243,
											"end": 1249,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1235,
											"end": 1241,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1228,
											"end": 1250,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1190,
											"end": 1192,
											"name": "tag",
											"source": 5,
											"value": "296"
										},
										{
											"begin": 1190,
											"end": 1192,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1284,
											"end": 1293,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1271,
											"end": 1294,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 1261,
											"end": 1294,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1261,
											"end": 1294,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1313,
											"end": 1353,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "297"
										},
										{
											"begin": 1349,
											"end": 1351,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1338,
											"end": 1347,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1334,
											"end": 1352,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1313,
											"end": 1353,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "282"
										},
										{
											"begin": 1313,
											"end": 1353,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 1313,
											"end": 1353,
											"name": "tag",
											"source": 5,
											"value": "297"
										},
										{
											"begin": 1313,
											"end": 1353,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1303,
											"end": 1353,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1303,
											"end": 1353,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1180,
											"end": 1359,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1180,
											"end": 1359,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1180,
											"end": 1359,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1180,
											"end": 1359,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1180,
											"end": 1359,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1180,
											"end": 1359,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1364,
											"end": 1567,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 1364,
											"end": 1567,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1528,
											"end": 1560,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1528,
											"end": 1560,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1528,
											"end": 1560,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1528,
											"end": 1560,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1510,
											"end": 1561,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1510,
											"end": 1561,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1498,
											"end": 1500,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1483,
											"end": 1501,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1483,
											"end": 1501,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1465,
											"end": 1567,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1572,
											"end": 1947,
											"name": "tag",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 1572,
											"end": 1947,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1830,
											"end": 1845,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1830,
											"end": 1845,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1830,
											"end": 1845,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1812,
											"end": 1846,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1812,
											"end": 1846,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1882,
											"end": 1897,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1882,
											"end": 1897,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1882,
											"end": 1897,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1882,
											"end": 1897,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1877,
											"end": 1879,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1862,
											"end": 1880,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1862,
											"end": 1880,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1855,
											"end": 1898,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1929,
											"end": 1931,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1914,
											"end": 1932,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1914,
											"end": 1932,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1907,
											"end": 1941,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1907,
											"end": 1941,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1907,
											"end": 1941,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1907,
											"end": 1941,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1762,
											"end": 1764,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1747,
											"end": 1765,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1747,
											"end": 1765,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1947,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1952,
											"end": 2226,
											"name": "tag",
											"source": 5,
											"value": "165"
										},
										{
											"begin": 1952,
											"end": 2226,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2144,
											"end": 2176,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2176,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2176,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2176,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2126,
											"end": 2177,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2126,
											"end": 2177,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2208,
											"end": 2210,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2193,
											"end": 2211,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2193,
											"end": 2211,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2186,
											"end": 2220,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2114,
											"end": 2116,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2099,
											"end": 2117,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2099,
											"end": 2117,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2081,
											"end": 2226,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2231,
											"end": 2418,
											"name": "tag",
											"source": 5,
											"value": "33"
										},
										{
											"begin": 2231,
											"end": 2418,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2396,
											"end": 2410,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2396,
											"end": 2410,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2389,
											"end": 2411,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2371,
											"end": 2412,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2371,
											"end": 2412,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2359,
											"end": 2361,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2344,
											"end": 2362,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2344,
											"end": 2362,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2326,
											"end": 2418,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2423,
											"end": 2681,
											"name": "tag",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 2423,
											"end": 2681,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2616,
											"end": 2630,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2616,
											"end": 2630,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2609,
											"end": 2631,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2591,
											"end": 2632,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2591,
											"end": 2632,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2663,
											"end": 2665,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2648,
											"end": 2666,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2648,
											"end": 2666,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2641,
											"end": 2675,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2579,
											"end": 2581,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2564,
											"end": 2582,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2564,
											"end": 2582,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2546,
											"end": 2681,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2908,
											"end": 3318,
											"name": "tag",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 2908,
											"end": 3318,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3110,
											"end": 3112,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3092,
											"end": 3113,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3092,
											"end": 3113,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3092,
											"end": 3113,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3149,
											"end": 3151,
											"name": "PUSH",
											"source": 5,
											"value": "2E"
										},
										{
											"begin": 3129,
											"end": 3147,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3129,
											"end": 3147,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3129,
											"end": 3147,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3122,
											"end": 3152,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3188,
											"end": 3222,
											"name": "PUSH",
											"source": 5,
											"value": "5F7374616B65686F6C6465722068617320746F206861766520656E6F75676820"
										},
										{
											"begin": 3183,
											"end": 3185,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3168,
											"end": 3186,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3168,
											"end": 3186,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3161,
											"end": 3223,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7374616B65642062616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3254,
											"end": 3256,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3239,
											"end": 3257,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3232,
											"end": 3276,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3308,
											"end": 3311,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 3293,
											"end": 3312,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3293,
											"end": 3312,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3082,
											"end": 3318,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 3323,
											"end": 3725,
											"name": "tag",
											"source": 5,
											"value": "269"
										},
										{
											"begin": 3323,
											"end": 3725,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3525,
											"end": 3527,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3507,
											"end": 3528,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3507,
											"end": 3528,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3507,
											"end": 3528,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3564,
											"end": 3566,
											"name": "PUSH",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 3544,
											"end": 3562,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3544,
											"end": 3562,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3544,
											"end": 3562,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3537,
											"end": 3567,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3603,
											"end": 3637,
											"name": "PUSH",
											"source": 5,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 3598,
											"end": 3600,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3583,
											"end": 3601,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3583,
											"end": 3601,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3576,
											"end": 3638,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3669,
											"end": 3671,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 3654,
											"end": 3672,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3654,
											"end": 3672,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3647,
											"end": 3683,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3715,
											"end": 3718,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 3700,
											"end": 3719,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3700,
											"end": 3719,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3497,
											"end": 3725,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 3730,
											"end": 4136,
											"name": "tag",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 3730,
											"end": 4136,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3932,
											"end": 3934,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3914,
											"end": 3935,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3914,
											"end": 3935,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3914,
											"end": 3935,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3971,
											"end": 3973,
											"name": "PUSH",
											"source": 5,
											"value": "2A"
										},
										{
											"begin": 3951,
											"end": 3969,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3951,
											"end": 3969,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3951,
											"end": 3969,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3944,
											"end": 3974,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4010,
											"end": 4044,
											"name": "PUSH",
											"source": 5,
											"value": "69735374616B6557686974656C6973746564206D757374206265207472756520"
										},
										{
											"begin": 4005,
											"end": 4007,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3990,
											"end": 4008,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3990,
											"end": 4008,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3983,
											"end": 4045,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3337B91029B2B73232B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4076,
											"end": 4078,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 4061,
											"end": 4079,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4061,
											"end": 4079,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4054,
											"end": 4094,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4126,
											"end": 4129,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 4111,
											"end": 4130,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4111,
											"end": 4130,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3904,
											"end": 4136,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 4141,
											"end": 4554,
											"name": "tag",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 4141,
											"end": 4554,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4343,
											"end": 4345,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4325,
											"end": 4346,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4325,
											"end": 4346,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4325,
											"end": 4346,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4382,
											"end": 4384,
											"name": "PUSH",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 4362,
											"end": 4380,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4362,
											"end": 4380,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4362,
											"end": 4380,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4355,
											"end": 4385,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4421,
											"end": 4455,
											"name": "PUSH",
											"source": 5,
											"value": "5F7374616B65686F6C6465722068617320746F206861766520656E6F75676820"
										},
										{
											"begin": 4416,
											"end": 4418,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4401,
											"end": 4419,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4401,
											"end": 4419,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4394,
											"end": 4456,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C6C6F63617465642062616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4487,
											"end": 4489,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 4472,
											"end": 4490,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4472,
											"end": 4490,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4465,
											"end": 4512,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4544,
											"end": 4547,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 4529,
											"end": 4548,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4529,
											"end": 4548,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4315,
											"end": 4554,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 4559,
											"end": 4958,
											"name": "tag",
											"source": 5,
											"value": "194"
										},
										{
											"begin": 4559,
											"end": 4958,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4761,
											"end": 4763,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4743,
											"end": 4764,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4743,
											"end": 4764,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4743,
											"end": 4764,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4800,
											"end": 4802,
											"name": "PUSH",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 4780,
											"end": 4798,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4780,
											"end": 4798,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4780,
											"end": 4798,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4773,
											"end": 4803,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4839,
											"end": 4873,
											"name": "PUSH",
											"source": 5,
											"value": "41646472657373206D7573742062652077686974656C697374656420616C7265"
										},
										{
											"begin": 4834,
											"end": 4836,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4819,
											"end": 4837,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4819,
											"end": 4837,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4812,
											"end": 4874,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616479"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4905,
											"end": 4907,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 4890,
											"end": 4908,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4890,
											"end": 4908,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4883,
											"end": 4916,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4948,
											"end": 4951,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 4933,
											"end": 4952,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4933,
											"end": 4952,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4733,
											"end": 4958,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 4963,
											"end": 5319,
											"name": "tag",
											"source": 5,
											"value": "180"
										},
										{
											"begin": 4963,
											"end": 5319,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5165,
											"end": 5167,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5147,
											"end": 5168,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5147,
											"end": 5168,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5147,
											"end": 5168,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5184,
											"end": 5202,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5184,
											"end": 5202,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5184,
											"end": 5202,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5177,
											"end": 5207,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5243,
											"end": 5277,
											"name": "PUSH",
											"source": 5,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 5238,
											"end": 5240,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5223,
											"end": 5241,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5223,
											"end": 5241,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5216,
											"end": 5278,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5310,
											"end": 5312,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5295,
											"end": 5313,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5295,
											"end": 5313,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5137,
											"end": 5319,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 5324,
											"end": 5725,
											"name": "tag",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 5324,
											"end": 5725,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5526,
											"end": 5528,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5508,
											"end": 5529,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5508,
											"end": 5529,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5508,
											"end": 5529,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5565,
											"end": 5567,
											"name": "PUSH",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 5545,
											"end": 5563,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5545,
											"end": 5563,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5545,
											"end": 5563,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5538,
											"end": 5568,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5604,
											"end": 5638,
											"name": "PUSH",
											"source": 5,
											"value": "69735374616B65686F6C646572206D757374206265207472756520666F722053"
										},
										{
											"begin": 5599,
											"end": 5601,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5584,
											"end": 5602,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5584,
											"end": 5602,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5577,
											"end": 5639,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "32B73232B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5670,
											"end": 5672,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 5655,
											"end": 5673,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5655,
											"end": 5673,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5648,
											"end": 5683,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5715,
											"end": 5718,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 5700,
											"end": 5719,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5700,
											"end": 5719,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5498,
											"end": 5725,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 5730,
											"end": 6133,
											"name": "tag",
											"source": 5,
											"value": "184"
										},
										{
											"begin": 5730,
											"end": 6133,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5932,
											"end": 5934,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5914,
											"end": 5935,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5914,
											"end": 5935,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5914,
											"end": 5935,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5971,
											"end": 5973,
											"name": "PUSH",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 5951,
											"end": 5969,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5951,
											"end": 5969,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5951,
											"end": 5969,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5944,
											"end": 5974,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6010,
											"end": 6044,
											"name": "PUSH",
											"source": 5,
											"value": "41646472657373206D757374206E6F742062652077686974656C697374656420"
										},
										{
											"begin": 6005,
											"end": 6007,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5990,
											"end": 6008,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5990,
											"end": 6008,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5983,
											"end": 6045,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C7265616479"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6076,
											"end": 6078,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 6061,
											"end": 6079,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6061,
											"end": 6079,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6054,
											"end": 6091,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6123,
											"end": 6126,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 6108,
											"end": 6127,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6108,
											"end": 6127,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5904,
											"end": 6133,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 6138,
											"end": 6490,
											"name": "tag",
											"source": 5,
											"value": "233"
										},
										{
											"begin": 6138,
											"end": 6490,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6340,
											"end": 6342,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 6322,
											"end": 6343,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6322,
											"end": 6343,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6322,
											"end": 6343,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6379,
											"end": 6381,
											"name": "PUSH",
											"source": 5,
											"value": "1C"
										},
										{
											"begin": 6359,
											"end": 6377,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6359,
											"end": 6377,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6359,
											"end": 6377,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6352,
											"end": 6382,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6418,
											"end": 6448,
											"name": "PUSH",
											"source": 5,
											"value": "6E6F7420656E6F75676820746F6B656E7320746F206465706F73697400000000"
										},
										{
											"begin": 6413,
											"end": 6415,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6398,
											"end": 6416,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6398,
											"end": 6416,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6391,
											"end": 6449,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6481,
											"end": 6483,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 6466,
											"end": 6484,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6466,
											"end": 6484,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6312,
											"end": 6490,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 6495,
											"end": 6915,
											"name": "tag",
											"source": 5,
											"value": "163"
										},
										{
											"begin": 6495,
											"end": 6915,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6697,
											"end": 6699,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 6679,
											"end": 6700,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6700,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6679,
											"end": 6700,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6736,
											"end": 6738,
											"name": "PUSH",
											"source": 5,
											"value": "38"
										},
										{
											"begin": 6716,
											"end": 6734,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6734,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6716,
											"end": 6734,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6709,
											"end": 6739,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6775,
											"end": 6809,
											"name": "PUSH",
											"source": 5,
											"value": "6E6F7420656E6F75676820746F6B656E7320696E207468652066726565207374"
										},
										{
											"begin": 6770,
											"end": 6772,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6755,
											"end": 6773,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6755,
											"end": 6773,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6748,
											"end": 6810,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6846,
											"end": 6872,
											"name": "PUSH",
											"source": 5,
											"value": "616B65642062616C616E636520746F2077697468647261770000000000000000"
										},
										{
											"begin": 6841,
											"end": 6843,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 6826,
											"end": 6844,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6826,
											"end": 6844,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6819,
											"end": 6873,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6905,
											"end": 6908,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 6890,
											"end": 6909,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6890,
											"end": 6909,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6669,
											"end": 6915,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 6920,
											"end": 7097,
											"name": "tag",
											"source": 5,
											"value": "41"
										},
										{
											"begin": 6920,
											"end": 7097,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7066,
											"end": 7091,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7066,
											"end": 7091,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7066,
											"end": 7091,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7054,
											"end": 7056,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7039,
											"end": 7057,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7039,
											"end": 7057,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7021,
											"end": 7097,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7102,
											"end": 7421,
											"name": "tag",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 7102,
											"end": 7421,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7304,
											"end": 7329,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 7304,
											"end": 7329,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7304,
											"end": 7329,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7360,
											"end": 7362,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7345,
											"end": 7363,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7345,
											"end": 7363,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7338,
											"end": 7372,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7338,
											"end": 7372,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7338,
											"end": 7372,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7338,
											"end": 7372,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7403,
											"end": 7405,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7388,
											"end": 7406,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7388,
											"end": 7406,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7381,
											"end": 7415,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7292,
											"end": 7294,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 7277,
											"end": 7295,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7277,
											"end": 7295,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7259,
											"end": 7421,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7426,
											"end": 7554,
											"name": "tag",
											"source": 5,
											"value": "144"
										},
										{
											"begin": 7426,
											"end": 7554,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7426,
											"end": 7554,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7497,
											"end": 7498,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7493,
											"end": 7499,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 7490,
											"end": 7491,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7487,
											"end": 7500,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 7484,
											"end": 7486,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7484,
											"end": 7486,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "318"
										},
										{
											"begin": 7484,
											"end": 7486,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7503,
											"end": 7521,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "318"
										},
										{
											"begin": 7503,
											"end": 7521,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "319"
										},
										{
											"begin": 7503,
											"end": 7521,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 7503,
											"end": 7521,
											"name": "tag",
											"source": 5,
											"value": "318"
										},
										{
											"begin": 7503,
											"end": 7521,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7539,
											"end": 7548,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7539,
											"end": 7548,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7474,
											"end": 7554,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7559,
											"end": 7684,
											"name": "tag",
											"source": 5,
											"value": "173"
										},
										{
											"begin": 7559,
											"end": 7684,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7559,
											"end": 7684,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7627,
											"end": 7628,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7624,
											"end": 7625,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7621,
											"end": 7629,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 7618,
											"end": 7620,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7618,
											"end": 7620,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "322"
										},
										{
											"begin": 7618,
											"end": 7620,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7632,
											"end": 7650,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "322"
										},
										{
											"begin": 7632,
											"end": 7650,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "319"
										},
										{
											"begin": 7632,
											"end": 7650,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 7632,
											"end": 7650,
											"name": "tag",
											"source": 5,
											"value": "322"
										},
										{
											"begin": 7632,
											"end": 7650,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7669,
											"end": 7678,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7669,
											"end": 7678,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7608,
											"end": 7684,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 7689,
											"end": 7816,
											"name": "tag",
											"source": 5,
											"value": "319"
										},
										{
											"begin": 7689,
											"end": 7816,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7750,
											"end": 7760,
											"name": "PUSH",
											"source": 5,
											"value": "4E487B71"
										},
										{
											"begin": 7745,
											"end": 7748,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 7741,
											"end": 7761,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 7738,
											"end": 7739,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7731,
											"end": 7762,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7781,
											"end": 7785,
											"name": "PUSH",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 7778,
											"end": 7779,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7771,
											"end": 7786,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7805,
											"end": 7809,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 7802,
											"end": 7803,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7795,
											"end": 7810,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"AllocatedStakedAmountOf(address)": "f20e8b12",
							"AvailableStakedAmountOf(address)": "cbdce4e0",
							"ProxyStakeAllocate(uint256,address)": "12b6887c",
							"ProxyStakeDeallocate(uint256,address)": "112b3266",
							"Stake(uint256)": "227a473b",
							"TotalAllocatedStakes()": "14bee5a5",
							"TotalAvailableStakes()": "8aed0feb",
							"TotalStakes()": "23cc9f37",
							"addAddress(address)": "38eada1c",
							"balances(address)": "27e235e3",
							"closeAllStakes()": "6a40cbb6",
							"deposit(uint256)": "b6b55f25",
							"isStakeWhitelisted(address)": "e67719bd",
							"isStakeholder(address)": "ef037b90",
							"isStakeholderIndex(address)": "bd0bb4f6",
							"owner()": "8da5cb5b",
							"removeAddress(address)": "4ba79dfe",
							"renounceOwnership()": "715018a6",
							"token()": "fc0c546a",
							"transferOwnership(address)": "f2fde38b",
							"withdraw(uint256)": "2e1a7d4d",
							"withdrawAll()": "853828b6"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"EXD_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"StakeUnWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"StakeWhitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"AllocatedStakedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"AvailableStakedAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_StakeAllocation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"ProxyStakeAllocate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_StakeToDeallocate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"ProxyStakeDeallocate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalAllocatedStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalAvailableStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"free_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocated_balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAllStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isStakeholderIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numTokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"AllocatedStakedAmountOf(address)\":{\"params\":{\"_stakeholder\":\"The stakeholder to retrieve the stake for.\"},\"returns\":{\"_0\":\"uint256 The amount of wei staked.\"}},\"AvailableStakedAmountOf(address)\":{\"params\":{\"_stakeholder\":\"The stakeholder to retrieve the stake for.\"},\"returns\":{\"_0\":\"uint256 The amount of wei staked.\"}},\"Stake(uint256)\":{\"params\":{\"_stake\":\"The size of the stake to be created.\"}},\"TotalAllocatedStakes()\":{\"returns\":{\"_0\":\"uint256 The aggregated stakes from all stakeholders.\"}},\"TotalAvailableStakes()\":{\"returns\":{\"_0\":\"uint256 The aggregated stakes from all stakeholders.\"}},\"TotalStakes()\":{\"returns\":{\"_0\":\"uint256 The aggregated stakes from all stakeholders.\"}},\"isStakeholder(address)\":{\"params\":{\"_address\":\"The address to verify.\"},\"returns\":{\"_0\":\"bool, uint256 Whether the address is a stakeholder,  and if so its position in the stakeholders array.\"}},\"isStakeholderIndex(address)\":{\"params\":{\"_address\":\"The address to verify.\"},\"returns\":{\"_0\":\"bool, uint256 Whether the address is a stakeholder,  and if so its position in the stakeholders array.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"_numTokens\":\"The number of ERC20 tokens desired in exchange for voting rights\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"AllocatedStakedAmountOf(address)\":{\"notice\":\"A method to retrieve the stake for a stakeholder.\"},\"AvailableStakedAmountOf(address)\":{\"notice\":\"A method to retrieve the stake for a stakeholder.\"},\"ProxyStakeAllocate(uint256,address)\":{\"notice\":\"A method for a verified whitelisted contract to allocate for itself some stake // nonReentrant()\"},\"ProxyStakeDeallocate(uint256,address)\":{\"notice\":\"A method for a verified whitelisted contract to allocate for itself some stake _StakeToDeallocate has to be equal to the amount of at least one ALLOCATED allocation else the procedure will fail\"},\"Stake(uint256)\":{\"notice\":\"A method for a stakeholder to create a stake.\"},\"TotalAllocatedStakes()\":{\"notice\":\"A method to the aggregated stakes from all stakeholders.\"},\"TotalAvailableStakes()\":{\"notice\":\"A method to the aggregated stakes from all stakeholders.\"},\"TotalStakes()\":{\"notice\":\"A method to the aggregated stakes from all stakeholders.\"},\"balances(address)\":{\"notice\":\"Stakeholders account and balances\"},\"closeAllStakes()\":{\"notice\":\"A method for a stakeholder to close all available stakes\"},\"isStakeholder(address)\":{\"notice\":\"A method to check if an address is a stakeholder.\"},\"isStakeholderIndex(address)\":{\"notice\":\"A method to check if an address is a stakeholder.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw _numTokens ERC20 tokens from the voting contract, revoking these voting rights\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/worksystems/StakingManager.sol\":\"StakingManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ad0fb4425453220f15bdb8c4e009052839804bb725797b6d8c02ee2271bc3c23\",\"dweb:/ipfs/QmPtjdMxzEifPUEUa6cKX1yfTWjaZV6QtdwMdN6bEL9FBM\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4cb252ec7657ba7a91be688cbd263090aa5379e504f488a62d06198e0d630322\",\"dweb:/ipfs/QmW56fDiDirhWfWiKrycXE5UY6tTNtFrYx39ipnSs8mkYb\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4fd625dca17657403af518cc6c8ab5c54c58898cf6e912ca2e1b0f3194ad0405\",\"dweb:/ipfs/QmQVv7YeeKmaS11bg7YDTeeGDk6i7sV8LMMfohaLM4SiRu\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://063db5d664d3d5bae10d0056c9d00339265229532d06b53d5f2e91778b2e428d\",\"dweb:/ipfs/QmWM92rU59t6BcZSj4w6ikoPL32R9hyTMb9Msg5X8vvu1s\"]},\"contracts/worksystems/StakingManager.sol\":{\"keccak256\":\"0x45a58fdbe809ebf0e3c4a94a1daf6d467e042ca01fdd72db29d2955154920306\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://703270cd9d7f832e24641038996f786d95a2fff1607456bcbf271543fbefc340\",\"dweb:/ipfs/Qmb3VkRr2xFh8uErBZnpULPxRzkTfNkkBgmcLkNQf4UwMH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/worksystems/StakingManager.sol:StakingManager",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 529,
								"contract": "contracts/worksystems/StakingManager.sol:StakingManager",
								"label": "token",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IERC20)182"
							},
							{
								"astId": 544,
								"contract": "contracts/worksystems/StakingManager.sol:StakingManager",
								"label": "stakeholders",
								"offset": 0,
								"slot": "2",
								"type": "t_array(t_address)dyn_storage"
							},
							{
								"astId": 557,
								"contract": "contracts/worksystems/StakingManager.sol:StakingManager",
								"label": "balances",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_struct(Balances)551_storage)"
							},
							{
								"astId": 561,
								"contract": "contracts/worksystems/StakingManager.sol:StakingManager",
								"label": "StakeWhitelistMap",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 643,
								"contract": "contracts/worksystems/StakingManager.sol:StakingManager",
								"label": "locked",
								"offset": 0,
								"slot": "5",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IERC20)182": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_struct(Balances)551_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct StakingManager.Balances)",
								"numberOfBytes": "32",
								"value": "t_struct(Balances)551_storage"
							},
							"t_struct(Balances)551_storage": {
								"encoding": "inplace",
								"label": "struct StakingManager.Balances",
								"members": [
									{
										"astId": 546,
										"contract": "contracts/worksystems/StakingManager.sol:StakingManager",
										"label": "free_balance",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 548,
										"contract": "contracts/worksystems/StakingManager.sol:StakingManager",
										"label": "staked_balance",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 550,
										"contract": "contracts/worksystems/StakingManager.sol:StakingManager",
										"label": "allocated_balance",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "96"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"AllocatedStakedAmountOf(address)": {
								"notice": "A method to retrieve the stake for a stakeholder."
							},
							"AvailableStakedAmountOf(address)": {
								"notice": "A method to retrieve the stake for a stakeholder."
							},
							"ProxyStakeAllocate(uint256,address)": {
								"notice": "A method for a verified whitelisted contract to allocate for itself some stake // nonReentrant()"
							},
							"ProxyStakeDeallocate(uint256,address)": {
								"notice": "A method for a verified whitelisted contract to allocate for itself some stake _StakeToDeallocate has to be equal to the amount of at least one ALLOCATED allocation else the procedure will fail"
							},
							"Stake(uint256)": {
								"notice": "A method for a stakeholder to create a stake."
							},
							"TotalAllocatedStakes()": {
								"notice": "A method to the aggregated stakes from all stakeholders."
							},
							"TotalAvailableStakes()": {
								"notice": "A method to the aggregated stakes from all stakeholders."
							},
							"TotalStakes()": {
								"notice": "A method to the aggregated stakes from all stakeholders."
							},
							"balances(address)": {
								"notice": "Stakeholders account and balances"
							},
							"closeAllStakes()": {
								"notice": "A method for a stakeholder to close all available stakes"
							},
							"isStakeholder(address)": {
								"notice": "A method to check if an address is a stakeholder."
							},
							"isStakeholderIndex(address)": {
								"notice": "A method to check if an address is a stakeholder."
							},
							"withdraw(uint256)": {
								"notice": "Withdraw _numTokens ERC20 tokens from the voting contract, revoking these voting rights"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							204
						],
						"Ownable": [
							104
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 205,
							"src": "112:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 204,
										"src": "668:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:0"
								}
							],
							"contractDependencies": [
								204
							],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								204
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "682:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "738:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "769:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:0"
									},
									"src": "711:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "911:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 194,
																"src": "940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "921:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "921:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:0"
									},
									"scope": 104,
									"src": "897:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "1091:30:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1108:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 28,
												"id": 30,
												"nodeType": "Return",
												"src": "1101:13:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 32,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:0"
									},
									"scope": 104,
									"src": "1036:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1230:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 36,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "1248:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "1259:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:0"
											}
										]
									},
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:0"
									},
									"src": "1209:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1722:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 52,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1732:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 50,
											"modifierName": {
												"id": 49,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1712:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:0"
									},
									"scope": 104,
									"src": "1668:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1988:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 69,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2006:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 72,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 70,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 68,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 78,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2081:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 66,
											"modifierName": {
												"id": 65,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1945:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 104,
									"src": "1918:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2333:124:0",
										"statements": [
											{
												"assignments": [
													90
												],
												"declarations": [
													{
														"constant": false,
														"id": 90,
														"mutability": "mutable",
														"name": "oldOwner",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "2343:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 89,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 92,
												"initialValue": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:0"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2378:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 94,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "2387:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 98,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "2431:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 99,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2441:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 97,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2410:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "2405:45:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2298:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:0"
									},
									"scope": 104,
									"src": "2270:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "639:1820:0"
						}
					],
					"src": "87:2373:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							182
						]
					},
					"id": 183,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "91:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "116:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 182,
							"linearizedBaseContracts": [
								182
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 108,
										"nodeType": "StructuredDocumentation",
										"src": "210:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 113,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "301:2:1"
									},
									"returnParameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 111,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "327:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 110,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "327:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "326:9:1"
									},
									"scope": 182,
									"src": "281:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 114,
										"nodeType": "StructuredDocumentation",
										"src": "342:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 121,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 121,
												"src": "438:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "438:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "437:17:1"
									},
									"returnParameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 121,
												"src": "478:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "478:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "477:9:1"
									},
									"scope": 182,
									"src": "419:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 122,
										"nodeType": "StructuredDocumentation",
										"src": "493:209:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 131,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "725:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "725:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "744:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "744:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "724:35:1"
									},
									"returnParameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 131,
												"src": "778:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 128,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "778:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "777:6:1"
									},
									"scope": 182,
									"src": "707:77:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "790:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 141,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "1078:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1078:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "1093:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 135,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1093:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1077:32:1"
									},
									"returnParameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "1133:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 138,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1133:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1132:9:1"
									},
									"scope": 182,
									"src": "1059:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "1148:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 151,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "1812:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1812:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "1829:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1829:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1811:33:1"
									},
									"returnParameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "1863:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 148,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1863:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1862:6:1"
									},
									"scope": 182,
									"src": "1795:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 152,
										"nodeType": "StructuredDocumentation",
										"src": "1875:296:1",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "2207:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2207:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "2231:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2231:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "2258:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 157,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2258:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2197:81:1"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "2297:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 160,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2297:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2296:6:1"
									},
									"scope": 182,
									"src": "2176:127:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "2309:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 172,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 172,
												"src": "2487:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 168,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 172,
												"src": "2509:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 167,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2509:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 170,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 172,
												"src": "2529:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2529:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2486:57:1"
									},
									"src": "2472:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 173,
										"nodeType": "StructuredDocumentation",
										"src": "2550:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 181,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "2718:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2718:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "2741:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 176,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2741:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "2766:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2766:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2717:63:1"
									},
									"src": "2703:78:1"
								}
							],
							"scope": 183,
							"src": "187:2596:1"
						}
					],
					"src": "91:2693:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							204
						]
					},
					"id": 205,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 184,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 185,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:2",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 204,
							"linearizedBaseContracts": [
								204
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 193,
										"nodeType": "Block",
										"src": "702:34:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 190,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 189,
												"id": 192,
												"nodeType": "Return",
												"src": "712:17:2"
											}
										]
									},
									"id": 194,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:2"
									},
									"returnParameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "693:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:2"
									},
									"scope": 204,
									"src": "640:96:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 202,
										"nodeType": "Block",
										"src": "809:32:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 199,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 198,
												"id": 201,
												"nodeType": "Return",
												"src": "819:15:2"
											}
										]
									},
									"id": 203,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 195,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:2"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "793:14:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 196,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:2"
									},
									"scope": 204,
									"src": "742:99:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 205,
							"src": "608:235:2"
						}
					],
					"src": "86:758:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							516
						]
					},
					"id": 517,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 206,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "92:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 207,
								"nodeType": "StructuredDocumentation",
								"src": "270:196:3",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 516,
							"linearizedBaseContracts": [
								516
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 238,
										"nodeType": "Block",
										"src": "702:140:3",
										"statements": [
											{
												"id": 237,
												"nodeType": "UncheckedBlock",
												"src": "712:124:3",
												"statements": [
													{
														"assignments": [
															220
														],
														"declarations": [
															{
																"constant": false,
																"id": 220,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 237,
																"src": "736:9:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 219,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "736:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 224,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 223,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 221,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 210,
																"src": "748:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 222,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 212,
																"src": "752:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "748:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "736:17:3"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 227,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 225,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 220,
																"src": "771:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 226,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 210,
																"src": "775:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "771:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 232,
														"nodeType": "IfStatement",
														"src": "767:28:3",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 228,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "786:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 229,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "793:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 230,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "785:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 218,
															"id": 231,
															"nodeType": "Return",
															"src": "778:17:3"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 233,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "817:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 234,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 220,
																	"src": "823:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 235,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "816:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 218,
														"id": 236,
														"nodeType": "Return",
														"src": "809:16:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 208,
										"nodeType": "StructuredDocumentation",
										"src": "490:131:3",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 239,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "642:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "642:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "653:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 211,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "641:22:3"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "687:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 214,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "687:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "693:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "686:15:3"
									},
									"scope": 516,
									"src": "626:216:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 266,
										"nodeType": "Block",
										"src": "1064:113:3",
										"statements": [
											{
												"id": 265,
												"nodeType": "UncheckedBlock",
												"src": "1074:97:3",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 251,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 244,
																"src": "1102:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 252,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 242,
																"src": "1106:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1102:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 258,
														"nodeType": "IfStatement",
														"src": "1098:28:3",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 254,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1117:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1124:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 256,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1116:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 250,
															"id": 257,
															"nodeType": "Return",
															"src": "1109:17:3"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 259,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1148:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 262,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 260,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 242,
																		"src": "1154:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 261,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 244,
																		"src": "1158:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1154:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 263,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1147:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 250,
														"id": 264,
														"nodeType": "Return",
														"src": "1140:20:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 240,
										"nodeType": "StructuredDocumentation",
										"src": "848:135:3",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 267,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 267,
												"src": "1004:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1004:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 267,
												"src": "1015:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 243,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1015:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1003:22:3"
									},
									"returnParameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 267,
												"src": "1049:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 246,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1049:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 267,
												"src": "1055:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1055:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1048:15:3"
									},
									"scope": 516,
									"src": "988:189:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 308,
										"nodeType": "Block",
										"src": "1401:417:3",
										"statements": [
											{
												"id": 307,
												"nodeType": "UncheckedBlock",
												"src": "1411:401:3",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 281,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 279,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 270,
																"src": "1669:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 280,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1674:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1669:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 286,
														"nodeType": "IfStatement",
														"src": "1665:28:3",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 282,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1685:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 283,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1691:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 284,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1684:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 278,
															"id": 285,
															"nodeType": "Return",
															"src": "1677:16:3"
														}
													},
													{
														"assignments": [
															288
														],
														"declarations": [
															{
																"constant": false,
																"id": 288,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 307,
																"src": "1707:9:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 287,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1707:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 292,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 291,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 289,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 270,
																"src": "1719:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 290,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 272,
																"src": "1723:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1719:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1707:17:3"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 295,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 293,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 288,
																	"src": "1742:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 294,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 270,
																	"src": "1746:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1742:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 296,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 272,
																"src": "1751:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1742:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 302,
														"nodeType": "IfStatement",
														"src": "1738:33:3",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1762:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 299,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1769:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 300,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1761:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 278,
															"id": 301,
															"nodeType": "Return",
															"src": "1754:17:3"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 303,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1793:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 304,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 288,
																	"src": "1799:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 305,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1792:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 278,
														"id": 306,
														"nodeType": "Return",
														"src": "1785:16:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 268,
										"nodeType": "StructuredDocumentation",
										"src": "1183:137:3",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 309,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "1341:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1341:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "1352:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1352:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1340:22:3"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 275,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "1386:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 274,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1386:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 309,
												"src": "1392:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 276,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1392:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1385:15:3"
									},
									"scope": 516,
									"src": "1325:493:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 336,
										"nodeType": "Block",
										"src": "2043:114:3",
										"statements": [
											{
												"id": 335,
												"nodeType": "UncheckedBlock",
												"src": "2053:98:3",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 323,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 321,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 314,
																"src": "2081:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 322,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2086:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2081:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 328,
														"nodeType": "IfStatement",
														"src": "2077:29:3",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 324,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2097:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 325,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2104:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 326,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2096:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 320,
															"id": 327,
															"nodeType": "Return",
															"src": "2089:17:3"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 329,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2128:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 332,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 330,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 312,
																		"src": "2134:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 331,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 314,
																		"src": "2138:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2134:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 333,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2127:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 320,
														"id": 334,
														"nodeType": "Return",
														"src": "2120:20:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 310,
										"nodeType": "StructuredDocumentation",
										"src": "1824:138:3",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 337,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "1983:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1983:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "1994:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 313,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1982:22:3"
									},
									"returnParameters": {
										"id": 320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "2028:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 316,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2028:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "2034:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 318,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2034:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2027:15:3"
									},
									"scope": 516,
									"src": "1967:190:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 364,
										"nodeType": "Block",
										"src": "2392:114:3",
										"statements": [
											{
												"id": 363,
												"nodeType": "UncheckedBlock",
												"src": "2402:98:3",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 351,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 349,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 342,
																"src": "2430:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 350,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2435:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2430:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 356,
														"nodeType": "IfStatement",
														"src": "2426:29:3",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 352,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2446:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 353,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2453:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 354,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2445:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 348,
															"id": 355,
															"nodeType": "Return",
															"src": "2438:17:3"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 357,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2477:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 360,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 358,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 340,
																		"src": "2483:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 359,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 342,
																		"src": "2487:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2483:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 361,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2476:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 348,
														"id": 362,
														"nodeType": "Return",
														"src": "2469:20:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 338,
										"nodeType": "StructuredDocumentation",
										"src": "2163:148:3",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "2332:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 339,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2332:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "2343:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2331:22:3"
									},
									"returnParameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "2377:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 344,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2377:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "2383:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 346,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2383:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2376:15:3"
									},
									"scope": 516,
									"src": "2316:190:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 379,
										"nodeType": "Block",
										"src": "2808:29:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 377,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 375,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 368,
														"src": "2825:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 376,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 370,
														"src": "2829:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2825:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 374,
												"id": 378,
												"nodeType": "Return",
												"src": "2818:12:3"
											}
										]
									},
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "2512:224:3",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 380,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 380,
												"src": "2754:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 367,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2754:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 380,
												"src": "2765:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2753:22:3"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 373,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 380,
												"src": "2799:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2799:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2798:9:3"
									},
									"scope": 516,
									"src": "2741:96:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 394,
										"nodeType": "Block",
										"src": "3175:29:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 392,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 390,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 383,
														"src": "3192:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 391,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 385,
														"src": "3196:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3192:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 389,
												"id": 393,
												"nodeType": "Return",
												"src": "3185:12:3"
											}
										]
									},
									"documentation": {
										"id": 381,
										"nodeType": "StructuredDocumentation",
										"src": "2843:260:3",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 395,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 383,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "3121:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 382,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3121:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "3132:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 384,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3132:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3120:22:3"
									},
									"returnParameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "3166:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3166:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3165:9:3"
									},
									"scope": 516,
									"src": "3108:96:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 409,
										"nodeType": "Block",
										"src": "3518:29:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 405,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 398,
														"src": "3535:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 406,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 400,
														"src": "3539:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3535:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 404,
												"id": 408,
												"nodeType": "Return",
												"src": "3528:12:3"
											}
										]
									},
									"documentation": {
										"id": 396,
										"nodeType": "StructuredDocumentation",
										"src": "3210:236:3",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "3464:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 397,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3464:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "3475:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3463:22:3"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "3509:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3509:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3508:9:3"
									},
									"scope": 516,
									"src": "3451:96:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 424,
										"nodeType": "Block",
										"src": "3903:29:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 420,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 413,
														"src": "3920:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 421,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 415,
														"src": "3924:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3920:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 419,
												"id": 423,
												"nodeType": "Return",
												"src": "3913:12:3"
											}
										]
									},
									"documentation": {
										"id": 411,
										"nodeType": "StructuredDocumentation",
										"src": "3553:278:3",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "3849:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 412,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3849:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "3860:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3860:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3848:22:3"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "3894:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3894:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:9:3"
									},
									"scope": 516,
									"src": "3836:96:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 439,
										"nodeType": "Block",
										"src": "4452:29:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 435,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 428,
														"src": "4469:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 436,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 430,
														"src": "4473:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4469:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 434,
												"id": 438,
												"nodeType": "Return",
												"src": "4462:12:3"
											}
										]
									},
									"documentation": {
										"id": 426,
										"nodeType": "StructuredDocumentation",
										"src": "3938:442:3",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 440,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "4398:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 427,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4398:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "4409:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4409:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4397:22:3"
									},
									"returnParameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "4443:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 432,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4443:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4442:9:3"
									},
									"scope": 516,
									"src": "4385:96:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 464,
										"nodeType": "Block",
										"src": "5070:106:3",
										"statements": [
											{
												"id": 463,
												"nodeType": "UncheckedBlock",
												"src": "5080:90:3",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 455,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 453,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 445,
																		"src": "5112:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 454,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 443,
																		"src": "5117:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5112:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 456,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 447,
																	"src": "5120:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 452,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5104:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5104:29:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 458,
														"nodeType": "ExpressionStatement",
														"src": "5104:29:3"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 461,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 459,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 443,
																"src": "5154:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 460,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "5158:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5154:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 451,
														"id": 462,
														"nodeType": "Return",
														"src": "5147:12:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 441,
										"nodeType": "StructuredDocumentation",
										"src": "4487:453:3",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 465,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 448,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "4967:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 442,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4967:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "4986:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 444,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4986:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "5005:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 446,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5005:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4957:80:3"
									},
									"returnParameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 450,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "5061:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:9:3"
									},
									"scope": 516,
									"src": "4945:231:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 489,
										"nodeType": "Block",
										"src": "5785:105:3",
										"statements": [
											{
												"id": 488,
												"nodeType": "UncheckedBlock",
												"src": "5795:89:3",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 480,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 478,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 470,
																		"src": "5827:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 479,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5831:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5827:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 481,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 472,
																	"src": "5834:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 477,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5819:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5819:28:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 483,
														"nodeType": "ExpressionStatement",
														"src": "5819:28:3"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 484,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 468,
																"src": "5868:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 485,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 470,
																"src": "5872:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5868:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 476,
														"id": 487,
														"nodeType": "Return",
														"src": "5861:12:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 466,
										"nodeType": "StructuredDocumentation",
										"src": "5182:473:3",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 490,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "5682:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5682:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 470,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "5701:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 469,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "5720:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 471,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5720:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5672:80:3"
									},
									"returnParameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "5776:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5776:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5775:9:3"
									},
									"scope": 516,
									"src": "5660:230:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 514,
										"nodeType": "Block",
										"src": "6661:105:3",
										"statements": [
											{
												"id": 513,
												"nodeType": "UncheckedBlock",
												"src": "6671:89:3",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 505,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 503,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 495,
																		"src": "6703:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 504,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6707:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6703:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 506,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 497,
																	"src": "6710:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 502,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6695:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6695:28:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 508,
														"nodeType": "ExpressionStatement",
														"src": "6695:28:3"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 511,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 509,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 493,
																"src": "6744:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 510,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 495,
																"src": "6748:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6744:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 501,
														"id": 512,
														"nodeType": "Return",
														"src": "6737:12:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 491,
										"nodeType": "StructuredDocumentation",
										"src": "5896:635:3",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "6558:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6558:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "6577:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 494,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6577:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "6596:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 496,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6596:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6548:80:3"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "6652:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 499,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6652:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6651:9:3"
									},
									"scope": 516,
									"src": "6536:230:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 517,
							"src": "467:6301:3"
						}
					],
					"src": "92:6677:3"
				},
				"id": 3
			},
			"contracts/worksystems/StakingManager.sol": {
				"ast": {
					"absolutePath": "contracts/worksystems/StakingManager.sol",
					"exportedSymbols": {
						"Context": [
							204
						],
						"IERC20": [
							182
						],
						"Ownable": [
							104
						],
						"SafeMath": [
							516
						],
						"StakingManager": [
							1282
						]
					},
					"id": 1283,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 518,
							"literals": [
								"solidity",
								">=",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 519,
							"nodeType": "ImportDirective",
							"scope": 1283,
							"sourceUnit": 183,
							"src": "63:56:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 520,
							"nodeType": "ImportDirective",
							"scope": 1283,
							"sourceUnit": 517,
							"src": "121:57:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 521,
							"nodeType": "ImportDirective",
							"scope": 1283,
							"sourceUnit": 105,
							"src": "180:52:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 522,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 104,
										"src": "450:7:4"
									},
									"id": 523,
									"nodeType": "InheritanceSpecifier",
									"src": "450:7:4"
								}
							],
							"contractDependencies": [
								104,
								204
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1282,
							"linearizedBaseContracts": [
								1282,
								104,
								204
							],
							"name": "StakingManager",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 526,
									"libraryName": {
										"id": 524,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 516,
										"src": "494:8:4"
									},
									"nodeType": "UsingForDirective",
									"src": "488:27:4",
									"typeName": {
										"id": 525,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "507:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "fc0c546a",
									"id": 529,
									"mutability": "mutable",
									"name": "token",
									"nodeType": "VariableDeclaration",
									"scope": 1282,
									"src": "523:19:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$182",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 528,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 527,
											"name": "IERC20",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 182,
											"src": "523:6:4"
										},
										"referencedDeclaration": 182,
										"src": "523:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$182",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 540,
										"nodeType": "Block",
										"src": "606:45:4",
										"statements": [
											{
												"expression": {
													"id": 538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 534,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 529,
														"src": "617:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$182",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 536,
																"name": "EXD_token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 531,
																"src": "633:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 535,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 182,
															"src": "626:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$182_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 537,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "626:17:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$182",
															"typeString": "contract IERC20"
														}
													},
													"src": "617:26:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$182",
														"typeString": "contract IERC20"
													}
												},
												"id": 539,
												"nodeType": "ExpressionStatement",
												"src": "617:26:4"
											}
										]
									},
									"id": 541,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "EXD_token",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "567:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 530,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "567:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "566:38:4"
									},
									"returnParameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "606:0:4"
									},
									"scope": 1282,
									"src": "555:96:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 544,
									"mutability": "mutable",
									"name": "stakeholders",
									"nodeType": "VariableDeclaration",
									"scope": 1282,
									"src": "661:31:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 542,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "661:7:4",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 543,
										"nodeType": "ArrayTypeName",
										"src": "661:9:4",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "StakingManager.Balances",
									"id": 551,
									"members": [
										{
											"constant": false,
											"id": 546,
											"mutability": "mutable",
											"name": "free_balance",
											"nodeType": "VariableDeclaration",
											"scope": 551,
											"src": "734:20:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 545,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "734:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 548,
											"mutability": "mutable",
											"name": "staked_balance",
											"nodeType": "VariableDeclaration",
											"scope": 551,
											"src": "765:22:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 547,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "765:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 550,
											"mutability": "mutable",
											"name": "allocated_balance",
											"nodeType": "VariableDeclaration",
											"scope": 551,
											"src": "798:25:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 549,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "798:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Balances",
									"nodeType": "StructDefinition",
									"scope": 1282,
									"src": "707:124:4",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 552,
										"nodeType": "StructuredDocumentation",
										"src": "839:54:4",
										"text": " Stakeholders account and balances"
									},
									"functionSelector": "27e235e3",
									"id": 557,
									"mutability": "mutable",
									"name": "balances",
									"nodeType": "VariableDeclaration",
									"scope": 1282,
									"src": "899:47:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
										"typeString": "mapping(address => struct StakingManager.Balances)"
									},
									"typeName": {
										"id": 556,
										"keyType": {
											"id": 553,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "909:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "899:31:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
											"typeString": "mapping(address => struct StakingManager.Balances)"
										},
										"valueType": {
											"id": 555,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 554,
												"name": "Balances",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 551,
												"src": "920:8:4"
											},
											"referencedDeclaration": 551,
											"src": "920:8:4",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Balances_$551_storage_ptr",
												"typeString": "struct StakingManager.Balances"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 561,
									"mutability": "mutable",
									"name": "StakeWhitelistMap",
									"nodeType": "VariableDeclaration",
									"scope": 1282,
									"src": "1060:51:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 560,
										"keyType": {
											"id": 558,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1069:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1060:25:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 559,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "1080:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 567,
									"name": "StakeWhitelisted",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 563,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "1217:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 562,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1217:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 565,
												"indexed": false,
												"mutability": "mutable",
												"name": "isWhitelisted",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "1242:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 564,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1242:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1216:45:4"
									},
									"src": "1194:68:4"
								},
								{
									"anonymous": false,
									"id": 573,
									"name": "StakeUnWhitelisted",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 569,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "1293:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 568,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1293:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 571,
												"indexed": false,
												"mutability": "mutable",
												"name": "isWhitelisted",
												"nodeType": "VariableDeclaration",
												"scope": 573,
												"src": "1318:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 570,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1318:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1292:45:4"
									},
									"src": "1268:70:4"
								},
								{
									"body": {
										"id": 584,
										"nodeType": "Block",
										"src": "1451:53:4",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 580,
														"name": "StakeWhitelistMap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 561,
														"src": "1469:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 582,
													"indexExpression": {
														"id": 581,
														"name": "_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 575,
														"src": "1487:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1469:27:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 579,
												"id": 583,
												"nodeType": "Return",
												"src": "1462:34:4"
											}
										]
									},
									"functionSelector": "e67719bd",
									"id": 585,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isStakeWhitelisted",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "1374:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1374:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1373:18:4"
									},
									"returnParameters": {
										"id": 579,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 578,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "1440:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 577,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1440:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1439:6:4"
									},
									"scope": 1282,
									"src": "1346:158:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 612,
										"nodeType": "Block",
										"src": "1598:199:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 597,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 593,
																	"name": "StakeWhitelistMap",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 561,
																	"src": "1617:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 595,
																"indexExpression": {
																	"id": 594,
																	"name": "_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 587,
																	"src": "1635:8:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1617:27:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "74727565",
																"id": 596,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1648:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "1617:35:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "41646472657373206d757374206e6f742062652077686974656c697374656420616c7265616479",
															"id": 598,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1654:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e8e9d0a0de6df530cab55500d1d615d5495baa9bbc49fb47a6a7731eb760add1",
																"typeString": "literal_string \"Address must not be whitelisted already\""
															},
															"value": "Address must not be whitelisted already"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e8e9d0a0de6df530cab55500d1d615d5495baa9bbc49fb47a6a7731eb760add1",
																"typeString": "literal_string \"Address must not be whitelisted already\""
															}
														],
														"id": 592,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1609:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 599,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1609:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 600,
												"nodeType": "ExpressionStatement",
												"src": "1609:87:4"
											},
											{
												"expression": {
													"id": 605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 601,
															"name": "StakeWhitelistMap",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 561,
															"src": "1707:17:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 603,
														"indexExpression": {
															"id": 602,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "1725:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1707:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 604,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1737:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1707:34:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 606,
												"nodeType": "ExpressionStatement",
												"src": "1707:34:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 608,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "1774:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "74727565",
															"id": 609,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1784:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 607,
														"name": "StakeWhitelisted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 567,
														"src": "1757:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,bool)"
														}
													},
													"id": 610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1757:32:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 611,
												"nodeType": "EmitStatement",
												"src": "1752:37:4"
											}
										]
									},
									"functionSelector": "38eada1c",
									"id": 613,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 590,
											"modifierName": {
												"id": 589,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1583:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1583:9:4"
										}
									],
									"name": "addAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "1540:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 586,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1540:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1539:18:4"
									},
									"returnParameters": {
										"id": 591,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1598:0:4"
									},
									"scope": 1282,
									"src": "1520:277:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 640,
										"nodeType": "Block",
										"src": "1886:216:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 625,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 621,
																	"name": "StakeWhitelistMap",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 561,
																	"src": "1913:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 623,
																"indexExpression": {
																	"id": 622,
																	"name": "_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 615,
																	"src": "1931:8:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1913:27:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 624,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1944:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "1913:36:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "41646472657373206d7573742062652077686974656c697374656420616c7265616479",
															"id": 626,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1951:37:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_65cf03327a1e90fd0398815409cf9b9679e48701ab3d219f81d1da1b2bfb20b9",
																"typeString": "literal_string \"Address must be whitelisted already\""
															},
															"value": "Address must be whitelisted already"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_65cf03327a1e90fd0398815409cf9b9679e48701ab3d219f81d1da1b2bfb20b9",
																"typeString": "literal_string \"Address must be whitelisted already\""
															}
														],
														"id": 620,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1905:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 627,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1905:84:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 628,
												"nodeType": "ExpressionStatement",
												"src": "1905:84:4"
											},
											{
												"expression": {
													"id": 633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 629,
															"name": "StakeWhitelistMap",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 561,
															"src": "2000:17:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 631,
														"indexExpression": {
															"id": 630,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 615,
															"src": "2018:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2000:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 632,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2030:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2000:35:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 634,
												"nodeType": "ExpressionStatement",
												"src": "2000:35:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 636,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 615,
															"src": "2070:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "66616c7365",
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2080:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 635,
														"name": "StakeUnWhitelisted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "2051:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,bool)"
														}
													},
													"id": 638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2051:35:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 639,
												"nodeType": "EmitStatement",
												"src": "2046:40:4"
											}
										]
									},
									"functionSelector": "4ba79dfe",
									"id": 641,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 618,
											"modifierName": {
												"id": 617,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1871:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1871:9:4"
										}
									],
									"name": "removeAddress",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 641,
												"src": "1828:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 614,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1828:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1827:18:4"
									},
									"returnParameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1886:0:4"
									},
									"scope": 1282,
									"src": "1805:297:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 643,
									"mutability": "mutable",
									"name": "locked",
									"nodeType": "VariableDeclaration",
									"scope": 1282,
									"src": "2159:20:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 642,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2159:4:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 702,
										"nodeType": "Block",
										"src": "2379:352:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 656,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 650,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "2398:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 653,
																	"indexExpression": {
																		"expression": {
																			"id": 651,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2407:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 652,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2407:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2398:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 654,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "free_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 546,
																"src": "2398:33:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 655,
																"name": "_stake",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 646,
																"src": "2436:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2398:44:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 649,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2390:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2390:53:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 658,
												"nodeType": "ExpressionStatement",
												"src": "2390:53:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 659,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "2457:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 662,
															"indexExpression": {
																"expression": {
																	"id": 660,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2466:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 661,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2466:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2457:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 663,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staked_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 548,
														"src": "2457:35:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 664,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2496:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2457:40:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 671,
												"nodeType": "IfStatement",
												"src": "2454:71:4",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"expression": {
																	"id": 667,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2514:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 668,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2514:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 666,
															"name": "addStakeholder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1139,
															"src": "2499:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
																"typeString": "function (address)"
															}
														},
														"id": 669,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2499:26:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 670,
													"nodeType": "ExpressionStatement",
													"src": "2499:26:4"
												}
											},
											{
												"expression": {
													"id": 685,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 672,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "2546:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 675,
															"indexExpression": {
																"expression": {
																	"id": 673,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2555:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 674,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2555:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2546:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 676,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "free_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 546,
														"src": "2546:33:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 683,
																"name": "_stake",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 646,
																"src": "2620:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"baseExpression": {
																		"id": 677,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "2582:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 680,
																	"indexExpression": {
																		"expression": {
																			"id": 678,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2591:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 679,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2591:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2582:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 681,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "free_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 546,
																"src": "2582:33:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 682,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 395,
															"src": "2582:37:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 684,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2582:45:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2546:81:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 686,
												"nodeType": "ExpressionStatement",
												"src": "2546:81:4"
											},
											{
												"expression": {
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 687,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "2638:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 690,
															"indexExpression": {
																"expression": {
																	"id": 688,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2647:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 689,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2647:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2638:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 691,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "staked_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 548,
														"src": "2638:35:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 698,
																"name": "_stake",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 646,
																"src": "2716:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"baseExpression": {
																		"id": 692,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "2676:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 695,
																	"indexExpression": {
																		"expression": {
																			"id": 693,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2685:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 694,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2685:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2676:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 696,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "staked_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 548,
																"src": "2676:35:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 697,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 380,
															"src": "2676:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 699,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2676:47:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2638:85:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 701,
												"nodeType": "ExpressionStatement",
												"src": "2638:85:4"
											}
										]
									},
									"documentation": {
										"id": 644,
										"nodeType": "StructuredDocumentation",
										"src": "2188:133:4",
										"text": " @notice A method for a stakeholder to create a stake.\n @param _stake The size of the stake to be created."
									},
									"functionSelector": "227a473b",
									"id": 703,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "Stake",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 646,
												"mutability": "mutable",
												"name": "_stake",
												"nodeType": "VariableDeclaration",
												"scope": 703,
												"src": "2342:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 645,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:16:4"
									},
									"returnParameters": {
										"id": 648,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2379:0:4"
									},
									"scope": 1282,
									"src": "2327:404:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 745,
										"nodeType": "Block",
										"src": "2877:280:4",
										"statements": [
											{
												"assignments": [
													708
												],
												"declarations": [
													{
														"constant": false,
														"id": 708,
														"mutability": "mutable",
														"name": "staked_amount",
														"nodeType": "VariableDeclaration",
														"scope": 745,
														"src": "2888:21:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 707,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2888:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 714,
												"initialValue": {
													"expression": {
														"baseExpression": {
															"id": 709,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 557,
															"src": "2912:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
															}
														},
														"id": 712,
														"indexExpression": {
															"expression": {
																"id": 710,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2921:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 711,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2921:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2912:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Balances_$551_storage",
															"typeString": "struct StakingManager.Balances storage ref"
														}
													},
													"id": 713,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "staked_balance",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 548,
													"src": "2912:35:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2888:59:4"
											},
											{
												"expression": {
													"id": 728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 715,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "2958:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 718,
															"indexExpression": {
																"expression": {
																	"id": 716,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2967:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 717,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2967:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2958:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 719,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "free_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 546,
														"src": "2958:33:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 726,
																"name": "staked_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 708,
																"src": "3032:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"baseExpression": {
																		"id": 720,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "2994:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 723,
																	"indexExpression": {
																		"expression": {
																			"id": 721,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3003:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 722,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3003:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2994:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 724,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "free_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 546,
																"src": "2994:33:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 725,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 380,
															"src": "2994:37:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 727,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2994:52:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2958:88:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 729,
												"nodeType": "ExpressionStatement",
												"src": "2958:88:4"
											},
											{
												"expression": {
													"id": 743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 730,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "3057:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 733,
															"indexExpression": {
																"expression": {
																	"id": 731,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3066:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 732,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3066:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3057:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 734,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "staked_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 548,
														"src": "3057:35:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 741,
																"name": "staked_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 708,
																"src": "3135:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"baseExpression": {
																		"id": 735,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "3095:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 738,
																	"indexExpression": {
																		"expression": {
																			"id": 736,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "3104:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 737,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "3104:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3095:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 739,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "staked_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 548,
																"src": "3095:35:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 740,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 395,
															"src": "3095:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 742,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3095:54:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3057:92:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 744,
												"nodeType": "ExpressionStatement",
												"src": "3057:92:4"
											}
										]
									},
									"documentation": {
										"id": 704,
										"nodeType": "StructuredDocumentation",
										"src": "2739:85:4",
										"text": " @notice A method for a stakeholder to close all available stakes"
									},
									"functionSelector": "6a40cbb6",
									"id": 746,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "closeAllStakes",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2853:2:4"
									},
									"returnParameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2877:0:4"
									},
									"scope": 1282,
									"src": "2830:327:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 810,
										"nodeType": "Block",
										"src": "3506:672:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 758,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3544:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 759,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3544:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 757,
																"name": "isStakeWhitelisted",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 585,
																"src": "3525:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 760,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3525:30:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "69735374616b6557686974656c6973746564206d757374206265207472756520666f722053656e646572",
															"id": 761,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3557:44:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_298edb33324b45dc0502b4d47d478872011ba64baac4d1f13dc64fbeb86db43d",
																"typeString": "literal_string \"isStakeWhitelisted must be true for Sender\""
															},
															"value": "isStakeWhitelisted must be true for Sender"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_298edb33324b45dc0502b4d47d478872011ba64baac4d1f13dc64fbeb86db43d",
																"typeString": "literal_string \"isStakeWhitelisted must be true for Sender\""
															}
														],
														"id": 756,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3517:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 762,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3517:85:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 763,
												"nodeType": "ExpressionStatement",
												"src": "3517:85:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 766,
																	"name": "_stakeholder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 751,
																	"src": "3635:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 765,
																"name": "isStakeholder",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1117,
																"src": "3621:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 767,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3621:27:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "69735374616b65686f6c646572206d757374206265207472756520666f722053656e646572",
															"id": 768,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3650:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c302f0beb37a5eeff9f7ac0d485bf4f986219711f2ba83fc8a8a92cac233905a",
																"typeString": "literal_string \"isStakeholder must be true for Sender\""
															},
															"value": "isStakeholder must be true for Sender"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c302f0beb37a5eeff9f7ac0d485bf4f986219711f2ba83fc8a8a92cac233905a",
																"typeString": "literal_string \"isStakeholder must be true for Sender\""
															}
														],
														"id": 764,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3613:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3613:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 770,
												"nodeType": "ExpressionStatement",
												"src": "3613:77:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 777,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 772,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "3709:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 774,
																	"indexExpression": {
																		"id": 773,
																		"name": "_stakeholder",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 751,
																		"src": "3718:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3709:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 775,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "staked_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 548,
																"src": "3709:37:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 776,
																"name": "_StakeAllocation",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 749,
																"src": "3751:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3709:58:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5f7374616b65686f6c6465722068617320746f206861766520656e6f756768207374616b65642062616c616e6365",
															"id": 778,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3769:48:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0950f71c3eaf4fbdc3694257bebef9e2dbaf3001649f3ae165931407e5f014d3",
																"typeString": "literal_string \"_stakeholder has to have enough staked balance\""
															},
															"value": "_stakeholder has to have enough staked balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0950f71c3eaf4fbdc3694257bebef9e2dbaf3001649f3ae165931407e5f014d3",
																"typeString": "literal_string \"_stakeholder has to have enough staked balance\""
															}
														],
														"id": 771,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3701:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3701:117:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 780,
												"nodeType": "ExpressionStatement",
												"src": "3701:117:4"
											},
											{
												"expression": {
													"id": 792,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 781,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "3932:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 783,
															"indexExpression": {
																"id": 782,
																"name": "_stakeholder",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 751,
																"src": "3941:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3932:22:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 784,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "staked_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 548,
														"src": "3932:37:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 790,
																"name": "_StakeAllocation",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 749,
																"src": "4014:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"baseExpression": {
																		"id": 785,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "3972:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 787,
																	"indexExpression": {
																		"id": 786,
																		"name": "_stakeholder",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 751,
																		"src": "3981:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3972:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 788,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "staked_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 548,
																"src": "3972:37:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 789,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 395,
															"src": "3972:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 791,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3972:59:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3932:99:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 793,
												"nodeType": "ExpressionStatement",
												"src": "3932:99:4"
											},
											{
												"expression": {
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 794,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "4042:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 796,
															"indexExpression": {
																"id": 795,
																"name": "_stakeholder",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 751,
																"src": "4051:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4042:22:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 797,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "allocated_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 550,
														"src": "4042:40:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 803,
																"name": "_StakeAllocation",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 749,
																"src": "4130:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"baseExpression": {
																		"id": 798,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "4085:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 800,
																	"indexExpression": {
																		"id": 799,
																		"name": "_stakeholder",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 751,
																		"src": "4094:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4085:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 801,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allocated_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 550,
																"src": "4085:40:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 802,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 380,
															"src": "4085:44:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 804,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4085:62:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4042:105:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 806,
												"nodeType": "ExpressionStatement",
												"src": "4042:105:4"
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 807,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4165:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"id": 808,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "4164:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 755,
												"id": 809,
												"nodeType": "Return",
												"src": "4158:12:4"
											}
										]
									},
									"documentation": {
										"id": 747,
										"nodeType": "StructuredDocumentation",
										"src": "3244:125:4",
										"text": " @notice A method for a verified whitelisted contract to allocate for itself some stake // nonReentrant()"
									},
									"functionSelector": "12b6887c",
									"id": 811,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ProxyStakeAllocate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "_StakeAllocation",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "3403:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 748,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3403:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 751,
												"mutability": "mutable",
												"name": "_stakeholder",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "3429:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 750,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3429:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3402:48:4"
									},
									"returnParameters": {
										"id": 755,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 754,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "3495:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 753,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3495:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3494:6:4"
									},
									"scope": 1282,
									"src": "3375:803:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 875,
										"nodeType": "Block",
										"src": "4574:684:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 823,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "4612:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 824,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "4612:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 822,
																"name": "isStakeWhitelisted",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 585,
																"src": "4593:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 825,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4593:30:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "69735374616b6557686974656c6973746564206d757374206265207472756520666f722053656e646572",
															"id": 826,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4625:44:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_298edb33324b45dc0502b4d47d478872011ba64baac4d1f13dc64fbeb86db43d",
																"typeString": "literal_string \"isStakeWhitelisted must be true for Sender\""
															},
															"value": "isStakeWhitelisted must be true for Sender"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_298edb33324b45dc0502b4d47d478872011ba64baac4d1f13dc64fbeb86db43d",
																"typeString": "literal_string \"isStakeWhitelisted must be true for Sender\""
															}
														],
														"id": 821,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4585:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4585:85:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 828,
												"nodeType": "ExpressionStatement",
												"src": "4585:85:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 831,
																	"name": "_stakeholder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 816,
																	"src": "4703:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 830,
																"name": "isStakeholder",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1117,
																"src": "4689:13:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4689:27:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "69735374616b65686f6c646572206d757374206265207472756520666f722053656e646572",
															"id": 833,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4718:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c302f0beb37a5eeff9f7ac0d485bf4f986219711f2ba83fc8a8a92cac233905a",
																"typeString": "literal_string \"isStakeholder must be true for Sender\""
															},
															"value": "isStakeholder must be true for Sender"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c302f0beb37a5eeff9f7ac0d485bf4f986219711f2ba83fc8a8a92cac233905a",
																"typeString": "literal_string \"isStakeholder must be true for Sender\""
															}
														],
														"id": 829,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4681:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 834,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4681:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 835,
												"nodeType": "ExpressionStatement",
												"src": "4681:77:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 837,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "4777:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 839,
																	"indexExpression": {
																		"id": 838,
																		"name": "_stakeholder",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 816,
																		"src": "4786:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4777:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 840,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allocated_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 550,
																"src": "4777:40:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 841,
																"name": "_StakeToDeallocate",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 814,
																"src": "4822:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4777:63:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5f7374616b65686f6c6465722068617320746f206861766520656e6f75676820616c6c6f63617465642062616c616e6365",
															"id": 843,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4842:51:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4eb9f915bb66badb390a06b1d2fae578ac26e0277c0ae5a6fe4529526dd4aa59",
																"typeString": "literal_string \"_stakeholder has to have enough allocated balance\""
															},
															"value": "_stakeholder has to have enough allocated balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4eb9f915bb66badb390a06b1d2fae578ac26e0277c0ae5a6fe4529526dd4aa59",
																"typeString": "literal_string \"_stakeholder has to have enough allocated balance\""
															}
														],
														"id": 836,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4769:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4769:125:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 845,
												"nodeType": "ExpressionStatement",
												"src": "4769:125:4"
											},
											{
												"expression": {
													"id": 857,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 846,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "5008:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 848,
															"indexExpression": {
																"id": 847,
																"name": "_stakeholder",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 816,
																"src": "5017:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5008:22:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 849,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "allocated_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 550,
														"src": "5008:40:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 855,
																"name": "_StakeToDeallocate",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 814,
																"src": "5096:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"baseExpression": {
																		"id": 850,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "5051:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 852,
																	"indexExpression": {
																		"id": 851,
																		"name": "_stakeholder",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 816,
																		"src": "5060:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5051:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 853,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allocated_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 550,
																"src": "5051:40:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 395,
															"src": "5051:44:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 856,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5051:64:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5008:107:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 858,
												"nodeType": "ExpressionStatement",
												"src": "5008:107:4"
											},
											{
												"expression": {
													"id": 870,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 859,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "5126:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 861,
															"indexExpression": {
																"id": 860,
																"name": "_stakeholder",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 816,
																"src": "5135:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5126:22:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 862,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "staked_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 548,
														"src": "5126:37:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 868,
																"name": "_StakeToDeallocate",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 814,
																"src": "5208:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"expression": {
																	"baseExpression": {
																		"id": 863,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "5166:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 865,
																	"indexExpression": {
																		"id": 864,
																		"name": "_stakeholder",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 816,
																		"src": "5175:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "5166:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 866,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "staked_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 548,
																"src": "5166:37:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 380,
															"src": "5166:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 869,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5166:61:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5126:101:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 871,
												"nodeType": "ExpressionStatement",
												"src": "5126:101:4"
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 872,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5245:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"id": 873,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5244:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 820,
												"id": 874,
												"nodeType": "Return",
												"src": "5238:12:4"
											}
										]
									},
									"documentation": {
										"id": 812,
										"nodeType": "StructuredDocumentation",
										"src": "4196:238:4",
										"text": " @notice A method for a verified whitelisted contract to allocate for itself some stake\n _StakeToDeallocate has to be equal to the amount of at least one ALLOCATED allocation\n else the procedure will fail"
									},
									"functionSelector": "112b3266",
									"id": 876,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ProxyStakeDeallocate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "_StakeToDeallocate",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "4470:26:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 813,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4470:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "_stakeholder",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "4498:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 815,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4498:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4469:50:4"
									},
									"returnParameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "4563:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 818,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4563:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4562:6:4"
									},
									"scope": 1282,
									"src": "4440:818:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 889,
										"nodeType": "Block",
										"src": "5646:63:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 884,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 557,
															"src": "5664:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
															}
														},
														"id": 886,
														"indexExpression": {
															"id": 885,
															"name": "_stakeholder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 879,
															"src": "5673:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5664:22:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Balances_$551_storage",
															"typeString": "struct StakingManager.Balances storage ref"
														}
													},
													"id": 887,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "staked_balance",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 548,
													"src": "5664:37:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 883,
												"id": 888,
												"nodeType": "Return",
												"src": "5657:44:4"
											}
										]
									},
									"documentation": {
										"id": 877,
										"nodeType": "StructuredDocumentation",
										"src": "5325:199:4",
										"text": " @notice A method to retrieve the stake for a stakeholder.\n @param _stakeholder The stakeholder to retrieve the stake for.\n @return uint256 The amount of wei staked."
									},
									"functionSelector": "cbdce4e0",
									"id": 890,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "AvailableStakedAmountOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "_stakeholder",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "5563:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 878,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5563:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5562:22:4"
									},
									"returnParameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "5632:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 881,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5632:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5631:9:4"
									},
									"scope": 1282,
									"src": "5530:179:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 903,
										"nodeType": "Block",
										"src": "6043:66:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 898,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 557,
															"src": "6061:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
															}
														},
														"id": 900,
														"indexExpression": {
															"id": 899,
															"name": "_stakeholder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 893,
															"src": "6070:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "6061:22:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Balances_$551_storage",
															"typeString": "struct StakingManager.Balances storage ref"
														}
													},
													"id": 901,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "allocated_balance",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 550,
													"src": "6061:40:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 897,
												"id": 902,
												"nodeType": "Return",
												"src": "6054:47:4"
											}
										]
									},
									"documentation": {
										"id": 891,
										"nodeType": "StructuredDocumentation",
										"src": "5722:199:4",
										"text": " @notice A method to retrieve the stake for a stakeholder.\n @param _stakeholder The stakeholder to retrieve the stake for.\n @return uint256 The amount of wei staked."
									},
									"functionSelector": "f20e8b12",
									"id": 904,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "AllocatedStakedAmountOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "_stakeholder",
												"nodeType": "VariableDeclaration",
												"scope": 904,
												"src": "5960:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 892,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5960:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5959:22:4"
									},
									"returnParameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 904,
												"src": "6029:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 895,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6029:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6028:9:4"
									},
									"scope": 1282,
									"src": "5927:182:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 950,
										"nodeType": "Block",
										"src": "6361:347:4",
										"statements": [
											{
												"assignments": [
													911
												],
												"declarations": [
													{
														"constant": false,
														"id": 911,
														"mutability": "mutable",
														"name": "_totalStakes",
														"nodeType": "VariableDeclaration",
														"scope": 950,
														"src": "6372:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 910,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6372:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 913,
												"initialValue": {
													"hexValue": "30",
													"id": 912,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6395:1:4",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6372:24:4"
											},
											{
												"body": {
													"id": 946,
													"nodeType": "Block",
													"src": "6459:212:4",
													"statements": [
														{
															"assignments": [
																927
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 927,
																	"mutability": "mutable",
																	"name": "user_address",
																	"nodeType": "VariableDeclaration",
																	"scope": 946,
																	"src": "6474:20:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 926,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6474:7:4",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 931,
															"initialValue": {
																"baseExpression": {
																	"id": 928,
																	"name": "stakeholders",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 544,
																	"src": "6497:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_storage",
																		"typeString": "address[] storage ref"
																	}
																},
																"id": 930,
																"indexExpression": {
																	"id": 929,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 915,
																	"src": "6510:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6497:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6474:38:4"
														},
														{
															"assignments": [
																933
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 933,
																	"mutability": "mutable",
																	"name": "user_staked_amount",
																	"nodeType": "VariableDeclaration",
																	"scope": 946,
																	"src": "6527:26:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 932,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6527:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 938,
															"initialValue": {
																"expression": {
																	"baseExpression": {
																		"id": 934,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "6556:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 936,
																	"indexExpression": {
																		"id": 935,
																		"name": "user_address",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 927,
																		"src": "6565:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6556:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 937,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "staked_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 548,
																"src": "6556:37:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6527:66:4"
														},
														{
															"expression": {
																"id": 944,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 939,
																	"name": "_totalStakes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 911,
																	"src": "6608:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 942,
																			"name": "user_staked_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 933,
																			"src": "6640:18:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 940,
																			"name": "_totalStakes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 911,
																			"src": "6623:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 941,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 380,
																		"src": "6623:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 943,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6623:36:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6608:51:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 945,
															"nodeType": "ExpressionStatement",
															"src": "6608:51:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 921,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 918,
														"name": "s",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 915,
														"src": "6427:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 919,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "6431:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 920,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6431:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6427:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 947,
												"initializationExpression": {
													"assignments": [
														915
													],
													"declarations": [
														{
															"constant": false,
															"id": 915,
															"mutability": "mutable",
															"name": "s",
															"nodeType": "VariableDeclaration",
															"scope": 947,
															"src": "6412:9:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 914,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6412:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 917,
													"initialValue": {
														"hexValue": "30",
														"id": 916,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6424:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "6412:13:4"
												},
												"loopExpression": {
													"expression": {
														"id": 924,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 922,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 915,
															"src": "6452:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"hexValue": "31",
															"id": 923,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6457:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "6452:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 925,
													"nodeType": "ExpressionStatement",
													"src": "6452:6:4"
												},
												"nodeType": "ForStatement",
												"src": "6407:264:4"
											},
											{
												"expression": {
													"id": 948,
													"name": "_totalStakes",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 911,
													"src": "6688:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 909,
												"id": 949,
												"nodeType": "Return",
												"src": "6681:19:4"
											}
										]
									},
									"documentation": {
										"id": 905,
										"nodeType": "StructuredDocumentation",
										"src": "6117:154:4",
										"text": " @notice A method to the aggregated stakes from all stakeholders.\n @return uint256 The aggregated stakes from all stakeholders."
									},
									"functionSelector": "23cc9f37",
									"id": 951,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "TotalStakes",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 906,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6297:2:4"
									},
									"returnParameters": {
										"id": 909,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 908,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "6347:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 907,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6347:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6346:9:4"
									},
									"scope": 1282,
									"src": "6277:431:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 997,
										"nodeType": "Block",
										"src": "6973:348:4",
										"statements": [
											{
												"assignments": [
													958
												],
												"declarations": [
													{
														"constant": false,
														"id": 958,
														"mutability": "mutable",
														"name": "_totalStakes",
														"nodeType": "VariableDeclaration",
														"scope": 997,
														"src": "6984:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 957,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6984:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 960,
												"initialValue": {
													"hexValue": "30",
													"id": 959,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7007:1:4",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6984:24:4"
											},
											{
												"body": {
													"id": 993,
													"nodeType": "Block",
													"src": "7071:213:4",
													"statements": [
														{
															"assignments": [
																974
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 974,
																	"mutability": "mutable",
																	"name": "user_address",
																	"nodeType": "VariableDeclaration",
																	"scope": 993,
																	"src": "7086:20:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 973,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7086:7:4",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 978,
															"initialValue": {
																"baseExpression": {
																	"id": 975,
																	"name": "stakeholders",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 544,
																	"src": "7109:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_storage",
																		"typeString": "address[] storage ref"
																	}
																},
																"id": 977,
																"indexExpression": {
																	"id": 976,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 962,
																	"src": "7122:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7109:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7086:38:4"
														},
														{
															"assignments": [
																980
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 980,
																	"mutability": "mutable",
																	"name": "user_alloc_amount",
																	"nodeType": "VariableDeclaration",
																	"scope": 993,
																	"src": "7139:25:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 979,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7139:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 985,
															"initialValue": {
																"expression": {
																	"baseExpression": {
																		"id": 981,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "7167:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 983,
																	"indexExpression": {
																		"id": 982,
																		"name": "user_address",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 974,
																		"src": "7176:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "7167:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 984,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allocated_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 550,
																"src": "7167:40:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7139:68:4"
														},
														{
															"expression": {
																"id": 991,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 986,
																	"name": "_totalStakes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 958,
																	"src": "7222:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 989,
																			"name": "user_alloc_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 980,
																			"src": "7254:17:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 987,
																			"name": "_totalStakes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 958,
																			"src": "7237:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 988,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 380,
																		"src": "7237:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 990,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7237:35:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7222:50:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 992,
															"nodeType": "ExpressionStatement",
															"src": "7222:50:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 968,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 965,
														"name": "s",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 962,
														"src": "7039:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 966,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "7043:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 967,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7043:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7039:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 994,
												"initializationExpression": {
													"assignments": [
														962
													],
													"declarations": [
														{
															"constant": false,
															"id": 962,
															"mutability": "mutable",
															"name": "s",
															"nodeType": "VariableDeclaration",
															"scope": 994,
															"src": "7024:9:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 961,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "7024:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 964,
													"initialValue": {
														"hexValue": "30",
														"id": 963,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7036:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "7024:13:4"
												},
												"loopExpression": {
													"expression": {
														"id": 971,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 969,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 962,
															"src": "7064:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"hexValue": "31",
															"id": 970,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7069:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "7064:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 972,
													"nodeType": "ExpressionStatement",
													"src": "7064:6:4"
												},
												"nodeType": "ForStatement",
												"src": "7019:265:4"
											},
											{
												"expression": {
													"id": 995,
													"name": "_totalStakes",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 958,
													"src": "7301:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 956,
												"id": 996,
												"nodeType": "Return",
												"src": "7294:19:4"
											}
										]
									},
									"documentation": {
										"id": 952,
										"nodeType": "StructuredDocumentation",
										"src": "6720:154:4",
										"text": " @notice A method to the aggregated stakes from all stakeholders.\n @return uint256 The aggregated stakes from all stakeholders."
									},
									"functionSelector": "14bee5a5",
									"id": 998,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "TotalAllocatedStakes",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 953,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6909:2:4"
									},
									"returnParameters": {
										"id": 956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "6959:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 954,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6959:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6958:9:4"
									},
									"scope": 1282,
									"src": "6880:441:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1044,
										"nodeType": "Block",
										"src": "7586:341:4",
										"statements": [
											{
												"assignments": [
													1005
												],
												"declarations": [
													{
														"constant": false,
														"id": 1005,
														"mutability": "mutable",
														"name": "_totalStakes",
														"nodeType": "VariableDeclaration",
														"scope": 1044,
														"src": "7597:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1004,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7597:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1007,
												"initialValue": {
													"hexValue": "30",
													"id": 1006,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7620:1:4",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7597:24:4"
											},
											{
												"body": {
													"id": 1040,
													"nodeType": "Block",
													"src": "7684:206:4",
													"statements": [
														{
															"assignments": [
																1021
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1021,
																	"mutability": "mutable",
																	"name": "user_address",
																	"nodeType": "VariableDeclaration",
																	"scope": 1040,
																	"src": "7699:20:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1020,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7699:7:4",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1025,
															"initialValue": {
																"baseExpression": {
																	"id": 1022,
																	"name": "stakeholders",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 544,
																	"src": "7722:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_storage",
																		"typeString": "address[] storage ref"
																	}
																},
																"id": 1024,
																"indexExpression": {
																	"id": 1023,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1009,
																	"src": "7735:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7722:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7699:38:4"
														},
														{
															"assignments": [
																1027
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1027,
																	"mutability": "mutable",
																	"name": "user_free_amount",
																	"nodeType": "VariableDeclaration",
																	"scope": 1040,
																	"src": "7752:24:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1026,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7752:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1032,
															"initialValue": {
																"expression": {
																	"baseExpression": {
																		"id": 1028,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "7779:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 1030,
																	"indexExpression": {
																		"id": 1029,
																		"name": "user_address",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1021,
																		"src": "7788:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "7779:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 1031,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "free_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 546,
																"src": "7779:35:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7752:62:4"
														},
														{
															"expression": {
																"id": 1038,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1033,
																	"name": "_totalStakes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1005,
																	"src": "7829:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1036,
																			"name": "user_free_amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1027,
																			"src": "7861:16:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 1034,
																			"name": "_totalStakes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1005,
																			"src": "7844:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 1035,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "add",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 380,
																		"src": "7844:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1037,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7844:34:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7829:49:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1039,
															"nodeType": "ExpressionStatement",
															"src": "7829:49:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1012,
														"name": "s",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1009,
														"src": "7652:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1013,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "7656:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 1014,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7656:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7652:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1041,
												"initializationExpression": {
													"assignments": [
														1009
													],
													"declarations": [
														{
															"constant": false,
															"id": 1009,
															"mutability": "mutable",
															"name": "s",
															"nodeType": "VariableDeclaration",
															"scope": 1041,
															"src": "7637:9:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1008,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "7637:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1011,
													"initialValue": {
														"hexValue": "30",
														"id": 1010,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7649:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "7637:13:4"
												},
												"loopExpression": {
													"expression": {
														"id": 1018,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1016,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1009,
															"src": "7677:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"hexValue": "31",
															"id": 1017,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7682:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "7677:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1019,
													"nodeType": "ExpressionStatement",
													"src": "7677:6:4"
												},
												"nodeType": "ForStatement",
												"src": "7632:258:4"
											},
											{
												"expression": {
													"id": 1042,
													"name": "_totalStakes",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1005,
													"src": "7907:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1003,
												"id": 1043,
												"nodeType": "Return",
												"src": "7900:19:4"
											}
										]
									},
									"documentation": {
										"id": 999,
										"nodeType": "StructuredDocumentation",
										"src": "7333:154:4",
										"text": " @notice A method to the aggregated stakes from all stakeholders.\n @return uint256 The aggregated stakes from all stakeholders."
									},
									"functionSelector": "8aed0feb",
									"id": 1045,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "TotalAvailableStakes",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1000,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7522:2:4"
									},
									"returnParameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "7572:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1001,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7572:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7571:9:4"
									},
									"scope": 1282,
									"src": "7493:434:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1083,
										"nodeType": "Block",
										"src": "8351:174:4",
										"statements": [
											{
												"body": {
													"id": 1077,
													"nodeType": "Block",
													"src": "8414:76:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1071,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1067,
																	"name": "_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1048,
																	"src": "8433:8:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1068,
																		"name": "stakeholders",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 544,
																		"src": "8445:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 1070,
																	"indexExpression": {
																		"id": 1069,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1056,
																		"src": "8458:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "8445:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "8433:27:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1076,
															"nodeType": "IfStatement",
															"src": "8429:49:4",
															"trueBody": {
																"expression": {
																	"components": [
																		{
																			"hexValue": "74727565",
																			"id": 1072,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "8470:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "true"
																		},
																		{
																			"id": 1073,
																			"name": "s",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1056,
																			"src": "8476:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1074,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "8469:9:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																		"typeString": "tuple(bool,uint256)"
																	}
																},
																"functionReturnParameters": 1054,
																"id": 1075,
																"nodeType": "Return",
																"src": "8462:16:4"
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1062,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1059,
														"name": "s",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1056,
														"src": "8382:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1060,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "8386:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 1061,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8386:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8382:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1078,
												"initializationExpression": {
													"assignments": [
														1056
													],
													"declarations": [
														{
															"constant": false,
															"id": 1056,
															"mutability": "mutable",
															"name": "s",
															"nodeType": "VariableDeclaration",
															"scope": 1078,
															"src": "8367:9:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1055,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "8367:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1058,
													"initialValue": {
														"hexValue": "30",
														"id": 1057,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8379:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "8367:13:4"
												},
												"loopExpression": {
													"expression": {
														"id": 1065,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1063,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1056,
															"src": "8407:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"hexValue": "31",
															"id": 1064,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8412:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "8407:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1066,
													"nodeType": "ExpressionStatement",
													"src": "8407:6:4"
												},
												"nodeType": "ForStatement",
												"src": "8362:128:4"
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "66616c7365",
															"id": 1079,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8508:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														},
														{
															"hexValue": "30",
															"id": 1080,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8515:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"id": 1081,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "8507:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
														"typeString": "tuple(bool,int_const 0)"
													}
												},
												"functionReturnParameters": 1054,
												"id": 1082,
												"nodeType": "Return",
												"src": "8500:17:4"
											}
										]
									},
									"documentation": {
										"id": 1046,
										"nodeType": "StructuredDocumentation",
										"src": "7980:252:4",
										"text": " @notice A method to check if an address is a stakeholder.\n @param _address The address to verify.\n @return bool, uint256 Whether the address is a stakeholder, \n and if so its position in the stakeholders array."
									},
									"functionSelector": "bd0bb4f6",
									"id": 1084,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isStakeholderIndex",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 1084,
												"src": "8266:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1047,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8266:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8265:18:4"
									},
									"returnParameters": {
										"id": 1054,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1051,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1084,
												"src": "8331:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1050,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8331:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1053,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1084,
												"src": "8337:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1052,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8337:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8330:15:4"
									},
									"scope": 1282,
									"src": "8238:287:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1116,
										"nodeType": "Block",
										"src": "8890:164:4",
										"statements": [
											{
												"body": {
													"id": 1112,
													"nodeType": "Block",
													"src": "8953:71:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1108,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1104,
																	"name": "_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1087,
																	"src": "8972:8:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1105,
																		"name": "stakeholders",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 544,
																		"src": "8984:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 1107,
																	"indexExpression": {
																		"id": 1106,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1093,
																		"src": "8997:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "8984:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "8972:27:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1111,
															"nodeType": "IfStatement",
															"src": "8968:44:4",
															"trueBody": {
																"expression": {
																	"hexValue": "74727565",
																	"id": 1109,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9008:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"functionReturnParameters": 1091,
																"id": 1110,
																"nodeType": "Return",
																"src": "9001:11:4"
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1099,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1096,
														"name": "s",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "8921:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1097,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "8925:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 1098,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8925:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8921:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1113,
												"initializationExpression": {
													"assignments": [
														1093
													],
													"declarations": [
														{
															"constant": false,
															"id": 1093,
															"mutability": "mutable",
															"name": "s",
															"nodeType": "VariableDeclaration",
															"scope": 1113,
															"src": "8906:9:4",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1092,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "8906:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1095,
													"initialValue": {
														"hexValue": "30",
														"id": 1094,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8918:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "8906:13:4"
												},
												"loopExpression": {
													"expression": {
														"id": 1102,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 1100,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1093,
															"src": "8946:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"hexValue": "31",
															"id": 1101,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8951:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "8946:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1103,
													"nodeType": "ExpressionStatement",
													"src": "8946:6:4"
												},
												"nodeType": "ForStatement",
												"src": "8901:123:4"
											},
											{
												"expression": {
													"hexValue": "66616c7365",
													"id": 1114,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "9041:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"functionReturnParameters": 1091,
												"id": 1115,
												"nodeType": "Return",
												"src": "9034:12:4"
											}
										]
									},
									"documentation": {
										"id": 1085,
										"nodeType": "StructuredDocumentation",
										"src": "8533:252:4",
										"text": " @notice A method to check if an address is a stakeholder.\n @param _address The address to verify.\n @return bool, uint256 Whether the address is a stakeholder, \n and if so its position in the stakeholders array."
									},
									"functionSelector": "ef037b90",
									"id": 1117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isStakeholder",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1088,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1087,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"scope": 1117,
												"src": "8814:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1086,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8814:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8813:18:4"
									},
									"returnParameters": {
										"id": 1091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1117,
												"src": "8879:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1089,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8879:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8878:6:4"
									},
									"scope": 1282,
									"src": "8791:263:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1138,
										"nodeType": "Block",
										"src": "9245:139:4",
										"statements": [
											{
												"assignments": [
													1124,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1124,
														"mutability": "mutable",
														"name": "_isStakeholder",
														"nodeType": "VariableDeclaration",
														"scope": 1138,
														"src": "9257:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1123,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "9257:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1128,
												"initialValue": {
													"arguments": [
														{
															"id": 1126,
															"name": "_stakeholder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1120,
															"src": "9301:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1125,
														"name": "isStakeholderIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1084,
														"src": "9282:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$_t_uint256_$",
															"typeString": "function (address) view returns (bool,uint256)"
														}
													},
													"id": 1127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9282:32:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9256:58:4"
											},
											{
												"condition": {
													"id": 1130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "9328:15:4",
													"subExpression": {
														"id": 1129,
														"name": "_isStakeholder",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1124,
														"src": "9329:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1137,
												"nodeType": "IfStatement",
												"src": "9325:51:4",
												"trueBody": {
													"expression": {
														"arguments": [
															{
																"id": 1134,
																"name": "_stakeholder",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1120,
																"src": "9363:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 1131,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 544,
																"src": "9345:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_storage",
																	"typeString": "address[] storage ref"
																}
															},
															"id": 1133,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "push",
															"nodeType": "MemberAccess",
															"src": "9345:17:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$__$",
																"typeString": "function (address)"
															}
														},
														"id": 1135,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9345:31:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1136,
													"nodeType": "ExpressionStatement",
													"src": "9345:31:4"
												}
											}
										]
									},
									"documentation": {
										"id": 1118,
										"nodeType": "StructuredDocumentation",
										"src": "9060:111:4",
										"text": " @notice A method to add a stakeholder.\n @param _stakeholder The stakeholder to add."
									},
									"id": 1139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "addStakeholder",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1120,
												"mutability": "mutable",
												"name": "_stakeholder",
												"nodeType": "VariableDeclaration",
												"scope": 1139,
												"src": "9201:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9201:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9200:22:4"
									},
									"returnParameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9245:0:4"
									},
									"scope": 1282,
									"src": "9177:207:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1172,
										"nodeType": "Block",
										"src": "9586:230:4",
										"statements": [
											{
												"assignments": [
													1146,
													1148
												],
												"declarations": [
													{
														"constant": false,
														"id": 1146,
														"mutability": "mutable",
														"name": "_isStakeholder",
														"nodeType": "VariableDeclaration",
														"scope": 1172,
														"src": "9598:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1145,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "9598:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1148,
														"mutability": "mutable",
														"name": "s",
														"nodeType": "VariableDeclaration",
														"scope": 1172,
														"src": "9619:9:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1147,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9619:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1152,
												"initialValue": {
													"arguments": [
														{
															"id": 1150,
															"name": "_stakeholder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1142,
															"src": "9651:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1149,
														"name": "isStakeholderIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1084,
														"src": "9632:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$_t_uint256_$",
															"typeString": "function (address) view returns (bool,uint256)"
														}
													},
													"id": 1151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9632:32:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9597:67:4"
											},
											{
												"condition": {
													"id": 1153,
													"name": "_isStakeholder",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1146,
													"src": "9678:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1171,
												"nodeType": "IfStatement",
												"src": "9675:133:4",
												"trueBody": {
													"id": 1170,
													"nodeType": "Block",
													"src": "9693:115:4",
													"statements": [
														{
															"expression": {
																"id": 1163,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1154,
																		"name": "stakeholders",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 544,
																		"src": "9708:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 1156,
																	"indexExpression": {
																		"id": 1155,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1148,
																		"src": "9721:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "9708:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1157,
																		"name": "stakeholders",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 544,
																		"src": "9726:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 1162,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 1158,
																				"name": "stakeholders",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 544,
																				"src": "9739:12:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_address_$dyn_storage",
																					"typeString": "address[] storage ref"
																				}
																			},
																			"id": 1159,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "9739:19:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1160,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9761:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9739:23:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "9726:37:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "9708:55:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1164,
															"nodeType": "ExpressionStatement",
															"src": "9708:55:4"
														},
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1165,
																		"name": "stakeholders",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 544,
																		"src": "9778:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 1167,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "pop",
																	"nodeType": "MemberAccess",
																	"src": "9778:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypop_nonpayable$__$returns$__$",
																		"typeString": "function ()"
																	}
																},
																"id": 1168,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9778:18:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1169,
															"nodeType": "ExpressionStatement",
															"src": "9778:18:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1140,
										"nodeType": "StructuredDocumentation",
										"src": "9392:117:4",
										"text": " @notice A method to remove a stakeholder.\n @param _stakeholder The stakeholder to remove."
									},
									"id": 1173,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "removeStakeholder",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "_stakeholder",
												"nodeType": "VariableDeclaration",
												"scope": 1173,
												"src": "9542:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9542:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9541:22:4"
									},
									"returnParameters": {
										"id": 1144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9586:0:4"
									},
									"scope": 1282,
									"src": "9515:301:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1210,
										"nodeType": "Block",
										"src": "9927:329:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1185,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1181,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "9958:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1182,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "9958:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 1179,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 529,
																		"src": "9942:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$182",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1180,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "balanceOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 121,
																	"src": "9942:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view external returns (uint256)"
																	}
																},
																"id": 1183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9942:27:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1184,
																"name": "tokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1175,
																"src": "9973:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9942:37:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f7420656e6f75676820746f6b656e7320746f206465706f736974",
															"id": 1186,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9981:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f2930608c32725964c5f0cdb3630f15515ff6b9f9c3749cabfcd0b6f50001729",
																"typeString": "literal_string \"not enough tokens to deposit\""
															},
															"value": "not enough tokens to deposit"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f2930608c32725964c5f0cdb3630f15515ff6b9f9c3749cabfcd0b6f50001729",
																"typeString": "literal_string \"not enough tokens to deposit\""
															}
														],
														"id": 1178,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9934:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9934:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1188,
												"nodeType": "ExpressionStatement",
												"src": "9934:78:4"
											},
											{
												"expression": {
													"id": 1195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1189,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "10075:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 1192,
															"indexExpression": {
																"expression": {
																	"id": 1190,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "10084:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1191,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "10084:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10075:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 1193,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "free_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 546,
														"src": "10075:33:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1194,
														"name": "tokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1175,
														"src": "10112:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10075:43:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1196,
												"nodeType": "ExpressionStatement",
												"src": "10075:43:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1200,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "10215:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1201,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "10215:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1204,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "10235:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_StakingManager_$1282",
																				"typeString": "contract StakingManager"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_StakingManager_$1282",
																				"typeString": "contract StakingManager"
																			}
																		],
																		"id": 1203,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "10227:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1202,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "10227:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1205,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10227:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1206,
																	"name": "tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1175,
																	"src": "10242:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1198,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 529,
																	"src": "10196:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$182",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 1199,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "transferFrom",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 163,
																"src": "10196:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256) external returns (bool)"
																}
															},
															"id": 1207,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10196:53:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1197,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10188:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10188:62:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1209,
												"nodeType": "ExpressionStatement",
												"src": "10188:62:4"
											}
										]
									},
									"functionSelector": "b6b55f25",
									"id": 1211,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1211,
												"src": "9907:11:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1174,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "9907:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9906:13:4"
									},
									"returnParameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9927:0:4"
									},
									"scope": 1282,
									"src": "9890:366:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1245,
										"nodeType": "Block",
										"src": "10524:251:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1218,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "10543:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 1221,
																	"indexExpression": {
																		"expression": {
																			"id": 1219,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "10552:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1220,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "10552:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10543:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 1222,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "free_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 546,
																"src": "10543:33:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1223,
																"name": "_numTokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1214,
																"src": "10580:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10543:47:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f7420656e6f75676820746f6b656e7320696e207468652066726565207374616b65642062616c616e636520746f207769746864726177",
															"id": 1225,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10592:58:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f9bfa3e6cb26cb6643b09c0104d485e6ee45977fdf77d93b43149d9266c83158",
																"typeString": "literal_string \"not enough tokens in the free staked balance to withdraw\""
															},
															"value": "not enough tokens in the free staked balance to withdraw"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f9bfa3e6cb26cb6643b09c0104d485e6ee45977fdf77d93b43149d9266c83158",
																"typeString": "literal_string \"not enough tokens in the free staked balance to withdraw\""
															}
														],
														"id": 1217,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10535:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10535:116:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1227,
												"nodeType": "ExpressionStatement",
												"src": "10535:116:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1231,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "10685:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1232,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "10685:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1233,
																	"name": "_numTokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1214,
																	"src": "10697:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1229,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 529,
																	"src": "10670:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$182",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 1230,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "transfer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 131,
																"src": "10670:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) external returns (bool)"
																}
															},
															"id": 1234,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10670:38:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1228,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10662:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10662:47:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1236,
												"nodeType": "ExpressionStatement",
												"src": "10662:47:4"
											},
											{
												"expression": {
													"id": 1243,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1237,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "10720:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 1240,
															"indexExpression": {
																"expression": {
																	"id": 1238,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "10729:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1239,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "10729:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10720:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 1241,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "free_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 546,
														"src": "10720:33:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1242,
														"name": "_numTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1214,
														"src": "10757:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10720:47:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1244,
												"nodeType": "ExpressionStatement",
												"src": "10720:47:4"
											}
										]
									},
									"documentation": {
										"id": 1212,
										"nodeType": "StructuredDocumentation",
										"src": "10270:200:4",
										"text": "@notice Withdraw _numTokens ERC20 tokens from the voting contract, revoking these voting rights\n@param _numTokens The number of ERC20 tokens desired in exchange for voting rights"
									},
									"functionSelector": "2e1a7d4d",
									"id": 1246,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1214,
												"mutability": "mutable",
												"name": "_numTokens",
												"nodeType": "VariableDeclaration",
												"scope": 1246,
												"src": "10494:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1213,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "10494:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10493:17:4"
									},
									"returnParameters": {
										"id": 1216,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10524:0:4"
									},
									"scope": 1282,
									"src": "10476:299:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1280,
										"nodeType": "Block",
										"src": "10833:194:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1250,
																		"name": "balances",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "10852:8:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																			"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																		}
																	},
																	"id": 1253,
																	"indexExpression": {
																		"expression": {
																			"id": 1251,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "10861:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1252,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "10861:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10852:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Balances_$551_storage",
																		"typeString": "struct StakingManager.Balances storage ref"
																	}
																},
																"id": 1254,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "free_balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 546,
																"src": "10852:33:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1255,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10888:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10852:37:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1249,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10844:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10844:46:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1258,
												"nodeType": "ExpressionStatement",
												"src": "10844:46:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1262,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "10924:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1263,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "10924:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1264,
																			"name": "balances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 557,
																			"src": "10936:8:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																				"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																			}
																		},
																		"id": 1267,
																		"indexExpression": {
																			"expression": {
																				"id": 1265,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "10945:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 1266,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "10945:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "10936:20:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Balances_$551_storage",
																			"typeString": "struct StakingManager.Balances storage ref"
																		}
																	},
																	"id": 1268,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "free_balance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 546,
																	"src": "10936:33:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1260,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 529,
																	"src": "10909:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$182",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 1261,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "transfer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 131,
																"src": "10909:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) external returns (bool)"
																}
															},
															"id": 1269,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10909:61:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1259,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10901:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10901:70:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1271,
												"nodeType": "ExpressionStatement",
												"src": "10901:70:4"
											},
											{
												"expression": {
													"id": 1278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1272,
																"name": "balances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 557,
																"src": "10982:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Balances_$551_storage_$",
																	"typeString": "mapping(address => struct StakingManager.Balances storage ref)"
																}
															},
															"id": 1275,
															"indexExpression": {
																"expression": {
																	"id": 1273,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "10991:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1274,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "10991:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10982:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Balances_$551_storage",
																"typeString": "struct StakingManager.Balances storage ref"
															}
														},
														"id": 1276,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "free_balance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 546,
														"src": "10982:33:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1277,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11018:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10982:37:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1279,
												"nodeType": "ExpressionStatement",
												"src": "10982:37:4"
											}
										]
									},
									"functionSelector": "853828b6",
									"id": 1281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawAll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10813:2:4"
									},
									"returnParameters": {
										"id": 1248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10833:0:4"
									},
									"scope": 1282,
									"src": "10793:234:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1283,
							"src": "423:10617:4"
						}
					],
					"src": "33:11007:4"
				},
				"id": 4
			}
		}
	}
}